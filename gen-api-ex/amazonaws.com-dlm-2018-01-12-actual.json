{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "mike.ralphson@gmail.com",
      "name" : "Mike Ralphson",
      "url" : "https://github.com/mermade/aws2openapi",
      "x-twitter" : "PermittedSoc"
    },
    "description" : "<fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon DLM supports Amazon EBS volumes and snapshots. For information about using Amazon DLM with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\">Automating the Amazon EBS Snapshot Lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>",
    "license" : {
      "name" : "Apache 2.0 License",
      "url" : "http://www.apache.org/licenses/"
    },
    "termsOfService" : "https://aws.amazon.com/service-terms/",
    "title" : "Amazon Data Lifecycle Manager",
    "version" : "2018-01-12",
    "x-providerName" : "amazonaws.com",
    "x-logo" : {
      "url" : "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
      "backgroundColor" : "#FFFFFF"
    },
    "x-aws-signingName" : "dlm",
    "x-apiClientRegistration" : {
      "url" : "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-preferred" : true,
    "x-release" : "v4",
    "x-apisguru-categories" : [ "cloud" ],
    "x-serviceName" : "dlm",
    "x-origin" : [ {
      "contentType" : "application/json",
      "url" : "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dlm-2018-01-12.normal.json",
      "converter" : {
        "url" : "https://github.com/mermade/aws2openapi",
        "version" : "1.0.0"
      },
      "x-apisguru-driver" : "external"
    } ]
  },
  "servers" : [ {
    "url" : "http://dlm.{region}.amazonaws.com",
    "description" : "The Amazon DLM multi-region endpoint",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "us-east-1",
        "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "us-gov-west-1", "us-gov-east-1", "ca-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-south-1", "af-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ap-east-1", "ap-south-1", "sa-east-1", "me-south-1" ]
      }
    }
  }, {
    "url" : "https://dlm.{region}.amazonaws.com",
    "description" : "The Amazon DLM multi-region endpoint",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "us-east-1",
        "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "us-gov-west-1", "us-gov-east-1", "ca-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-south-1", "af-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ap-east-1", "ap-south-1", "sa-east-1", "me-south-1" ]
      }
    }
  }, {
    "url" : "http://dlm.{region}.amazonaws.com.cn",
    "description" : "The Amazon DLM endpoint for China (Beijing) and China (Ningxia)",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "cn-north-1",
        "enum" : [ "cn-north-1", "cn-northwest-1" ]
      }
    }
  }, {
    "url" : "https://dlm.{region}.amazonaws.com.cn",
    "description" : "The Amazon DLM endpoint for China (Beijing) and China (Ningxia)",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "cn-north-1",
        "enum" : [ "cn-north-1", "cn-northwest-1" ]
      }
    }
  } ],
  "paths" : {
    "/tags/{resourceArn}#tagKeys" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "delete" : {
        "description" : "Removes the specified tags from the specified resource.",
        "operationId" : "UntagResource",
        "parameters" : [ {
          "description" : "The Amazon Resource Name (ARN) of the resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 2048,
            "minLength" : 0,
            "pattern" : "^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "resourceArn"
        }, {
          "description" : "The tag keys.",
          "required" : true,
          "schema" : {
            "maxItems" : 200,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagKey"
            }
          },
          "in" : "query",
          "name" : "tagKeys"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UntagResourceResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "481" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "482" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        }
      }
    },
    "/policies" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "get" : {
        "description" : "<p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>",
        "operationId" : "GetLifecyclePolicies",
        "parameters" : [ {
          "description" : "The identifiers of the data lifecycle policies.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyId"
            }
          },
          "in" : "query",
          "name" : "policyIds"
        }, {
          "description" : "The activation state.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "ENABLED", "DISABLED", "ERROR" ]
          },
          "in" : "query",
          "name" : "state"
        }, {
          "description" : "The resource type.",
          "required" : false,
          "schema" : {
            "maxItems" : 1,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceTypeValues"
            }
          },
          "in" : "query",
          "name" : "resourceTypes"
        }, {
          "description" : "<p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>",
          "required" : false,
          "schema" : {
            "maxItems" : 50,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagFilter"
            }
          },
          "in" : "query",
          "name" : "targetTags"
        }, {
          "description" : "<p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>",
          "required" : false,
          "schema" : {
            "maxItems" : 50,
            "minItems" : 0,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagFilter"
            }
          },
          "in" : "query",
          "name" : "tagsToAdd"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLifecyclePoliciesResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "481" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "482" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "483" : {
            "description" : "LimitExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LimitExceededException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "description" : "Creates a policy to manage the lifecycle of the specified Amazon Web Services resources. You can create up to 100 lifecycle policies.",
        "operationId" : "CreateLifecyclePolicy",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "ExecutionRoleArn" : {
                    "description" : "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.",
                    "maxLength" : 2048,
                    "minLength" : 0,
                    "pattern" : "arn:aws(-[a-z]{1,3}){0,2}:iam::\\d+:role/.*",
                    "type" : "string"
                  },
                  "Description" : {
                    "description" : "A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.",
                    "maxLength" : 500,
                    "minLength" : 0,
                    "pattern" : "[0-9A-Za-z _-]+",
                    "type" : "string"
                  },
                  "State" : {
                    "description" : "The desired activation state of the lifecycle policy after creation.",
                    "type" : "string",
                    "enum" : [ "ENABLED", "DISABLED" ]
                  },
                  "PolicyDetails" : {
                    "description" : "Specifies the configuration of a lifecycle policy.",
                    "properties" : {
                      "PolicyType" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/PolicyTypeValues"
                        }, {
                          "description" : "<p>The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>"
                        } ]
                      },
                      "ResourceTypes" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ResourceTypeValuesList"
                        }, {
                          "description" : "<p>The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "Schedules" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ScheduleList"
                        }, {
                          "description" : "<p>The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules?one mandatory schedule and up to three optional schedules.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "EventSource" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventSource"
                        }, {
                          "description" : "<p>The event that triggers the event-based policy. </p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
                        } ]
                      },
                      "Parameters" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/Parameters"
                        }, {
                          "description" : "<p>A set of optional parameters for snapshot and AMI lifecycle policies. </p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "Actions" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ActionList"
                        }, {
                          "description" : "<p>The actions to be performed when the event-based policy is triggered. You can specify only one action per policy.</p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
                        } ]
                      },
                      "TargetTags" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/TargetTagList"
                        }, {
                          "description" : "<p>The single tag that identifies targeted resources for this policy.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "ResourceLocations" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ResourceLocationList"
                        }, {
                          "description" : "<p>The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>. </p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>"
                        } ]
                      }
                    },
                    "type" : "object"
                  },
                  "Tags" : {
                    "description" : "The tags to apply to the lifecycle policy during creation.",
                    "maxProperties" : 200,
                    "minProperties" : 1,
                    "type" : "object",
                    "additionalProperties" : {
                      "$ref" : "#/components/schemas/TagValue"
                    }
                  }
                },
                "type" : "object",
                "required" : [ "ExecutionRoleArn", "Description", "State", "PolicyDetails" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateLifecyclePolicyResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "481" : {
            "description" : "LimitExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LimitExceededException"
                }
              }
            }
          },
          "482" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policyId}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "patch" : {
        "description" : "Updates the specified lifecycle policy.",
        "operationId" : "UpdateLifecyclePolicy",
        "parameters" : [ {
          "description" : "The identifier of the lifecycle policy.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "policy-[A-Za-z0-9]+",
            "type" : "string"
          },
          "in" : "path",
          "name" : "policyId"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "ExecutionRoleArn" : {
                    "description" : "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.",
                    "maxLength" : 2048,
                    "minLength" : 0,
                    "pattern" : "arn:aws(-[a-z]{1,3}){0,2}:iam::\\d+:role/.*",
                    "type" : "string"
                  },
                  "Description" : {
                    "description" : "A description of the lifecycle policy.",
                    "maxLength" : 500,
                    "minLength" : 0,
                    "pattern" : "[0-9A-Za-z _-]+",
                    "type" : "string"
                  },
                  "State" : {
                    "description" : "The desired activation state of the lifecycle policy after creation.",
                    "type" : "string",
                    "enum" : [ "ENABLED", "DISABLED" ]
                  },
                  "PolicyDetails" : {
                    "description" : "Specifies the configuration of a lifecycle policy.",
                    "properties" : {
                      "PolicyType" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/PolicyTypeValues"
                        }, {
                          "description" : "<p>The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>"
                        } ]
                      },
                      "ResourceTypes" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ResourceTypeValuesList"
                        }, {
                          "description" : "<p>The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "Schedules" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ScheduleList"
                        }, {
                          "description" : "<p>The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules?one mandatory schedule and up to three optional schedules.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "EventSource" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventSource"
                        }, {
                          "description" : "<p>The event that triggers the event-based policy. </p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
                        } ]
                      },
                      "Parameters" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/Parameters"
                        }, {
                          "description" : "<p>A set of optional parameters for snapshot and AMI lifecycle policies. </p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "Actions" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ActionList"
                        }, {
                          "description" : "<p>The actions to be performed when the event-based policy is triggered. You can specify only one action per policy.</p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
                        } ]
                      },
                      "TargetTags" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/TargetTagList"
                        }, {
                          "description" : "<p>The single tag that identifies targeted resources for this policy.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
                        } ]
                      },
                      "ResourceLocations" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ResourceLocationList"
                        }, {
                          "description" : "<p>The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>. </p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>"
                        } ]
                      }
                    },
                    "type" : "object"
                  }
                },
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateLifecyclePolicyResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "481" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "482" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "483" : {
            "description" : "LimitExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LimitExceededException"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{resourceArn}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "get" : {
        "description" : "Lists the tags for the specified resource.",
        "operationId" : "ListTagsForResource",
        "parameters" : [ {
          "description" : "The Amazon Resource Name (ARN) of the resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 2048,
            "minLength" : 0,
            "pattern" : "^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "resourceArn"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListTagsForResourceResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "481" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "482" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        }
      },
      "post" : {
        "description" : "Adds the specified tags to the specified resource.",
        "operationId" : "TagResource",
        "parameters" : [ {
          "description" : "The Amazon Resource Name (ARN) of the resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 2048,
            "minLength" : 0,
            "pattern" : "^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "resourceArn"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "Tags" : {
                    "description" : "One or more tags.",
                    "maxProperties" : 200,
                    "minProperties" : 1,
                    "type" : "object",
                    "additionalProperties" : {
                      "$ref" : "#/components/schemas/TagValue"
                    }
                  }
                },
                "type" : "object",
                "required" : [ "Tags" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagResourceResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "481" : {
            "description" : "InvalidRequestException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidRequestException"
                }
              }
            }
          },
          "482" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policyId}/" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "delete" : {
        "description" : "Deletes the specified lifecycle policy and halts the automated operations that the policy specified.",
        "operationId" : "DeleteLifecyclePolicy",
        "parameters" : [ {
          "description" : "The identifier of the lifecycle policy.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "policy-[A-Za-z0-9]+",
            "type" : "string"
          },
          "in" : "path",
          "name" : "policyId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteLifecyclePolicyResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "LimitExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LimitExceededException"
                }
              }
            }
          }
        }
      },
      "get" : {
        "description" : "Gets detailed information about the specified lifecycle policy.",
        "operationId" : "GetLifecyclePolicy",
        "parameters" : [ {
          "description" : "The identifier of the lifecycle policy.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "policy-[A-Za-z0-9]+",
            "type" : "string"
          },
          "in" : "path",
          "name" : "policyId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLifecyclePolicyResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "ResourceNotFoundException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "LimitExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LimitExceededException"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "X-Amz-Date" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Date"
      },
      "X-Amz-Algorithm" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Algorithm"
      },
      "X-Amz-Signature" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-SignedHeaders"
      },
      "X-Amz-Security-Token" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Security-Token"
      },
      "X-Amz-Credential" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Credential"
      },
      "X-Amz-Content-Sha256" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Content-Sha256"
      }
    },
    "schemas" : {
      "TargetRegion" : {
        "maxLength" : 16,
        "minLength" : 0,
        "pattern" : "([a-z]+-){2,3}\\d",
        "type" : "string"
      },
      "DeleteLifecyclePolicyResponse" : {
        "type" : "object"
      },
      "Encrypted" : {
        "type" : "boolean"
      },
      "DeleteLifecyclePolicyRequest" : {
        "type" : "object",
        "title" : "DeleteLifecyclePolicyRequest"
      },
      "PolicyTypeValues" : {
        "type" : "string",
        "enum" : [ "EBS_SNAPSHOT_MANAGEMENT", "IMAGE_MANAGEMENT", "EVENT_BASED_POLICY" ]
      },
      "Count" : {
        "maximum" : 1000,
        "minimum" : 1,
        "type" : "integer"
      },
      "DescriptionRegex" : {
        "maxLength" : 1000,
        "minLength" : 0,
        "pattern" : "[\\p{all}]*",
        "type" : "string"
      },
      "String" : {
        "maxLength" : 500,
        "minLength" : 0,
        "pattern" : "[\\p{all}]*",
        "type" : "string"
      },
      "CopyTagsNullable" : {
        "type" : "boolean"
      },
      "EventTypeValues" : {
        "type" : "string",
        "enum" : [ "shareSnapshot" ]
      },
      "TargetTagsFilterList" : {
        "maxItems" : 50,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TagFilter"
        }
      },
      "TagsToAddList" : {
        "maxItems" : 45,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Tag"
        }
      },
      "ExecutionRoleArn" : {
        "maxLength" : 2048,
        "minLength" : 0,
        "pattern" : "arn:aws(-[a-z]{1,3}){0,2}:iam::\\d+:role/.*",
        "type" : "string"
      },
      "CrossRegionCopyDeprecateRule" : {
        "description" : "Specifies an AMI deprecation rule for cross-Region AMI copies created by a cross-Region copy rule.",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time in which to measure the <b>Interval</b>."
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The period after which to deprecate the cross-Region AMI copies. The period must be less than or equal to the cross-Region AMI copy retention period, and it can't be greater than 10 years. This is equivalent to 120 months, 520 weeks, or 3650 days."
            } ]
          }
        },
        "type" : "object"
      },
      "InvalidRequestException" : { },
      "PolicyDetails" : {
        "description" : "Specifies the configuration of a lifecycle policy.",
        "properties" : {
          "PolicyType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyTypeValues"
            }, {
              "description" : "<p>The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>"
            } ]
          },
          "ResourceTypes" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResourceTypeValuesList"
            }, {
              "description" : "<p>The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
            } ]
          },
          "Schedules" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ScheduleList"
            }, {
              "description" : "<p>The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules?one mandatory schedule and up to three optional schedules.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
            } ]
          },
          "EventSource" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventSource"
            }, {
              "description" : "<p>The event that triggers the event-based policy. </p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
            } ]
          },
          "Parameters" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Parameters"
            }, {
              "description" : "<p>A set of optional parameters for snapshot and AMI lifecycle policies. </p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
            } ]
          },
          "Actions" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ActionList"
            }, {
              "description" : "<p>The actions to be performed when the event-based policy is triggered. You can specify only one action per policy.</p> <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>"
            } ]
          },
          "TargetTags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TargetTagList"
            }, {
              "description" : "<p>The single tag that identifies targeted resources for this policy.</p> <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>"
            } ]
          },
          "ResourceLocations" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResourceLocationList"
            }, {
              "description" : "<p>The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>. </p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>"
            } ]
          }
        },
        "type" : "object"
      },
      "CronExpression" : {
        "maxLength" : 106,
        "minLength" : 17,
        "pattern" : "cron\\([^\\n]{11,100}\\)",
        "type" : "string"
      },
      "ResourceNotFoundException" : { },
      "PolicyIdList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PolicyId"
        }
      },
      "CreateLifecyclePolicyRequest" : {
        "properties" : {
          "ExecutionRoleArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExecutionRoleArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy."
            } ]
          },
          "Description" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDescription"
            }, {
              "description" : "A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported."
            } ]
          },
          "State" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SettablePolicyStateValues"
            }, {
              "description" : "The desired activation state of the lifecycle policy after creation."
            } ]
          },
          "PolicyDetails" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDetails"
            }, {
              "description" : "The configuration details of the lifecycle policy."
            } ]
          },
          "Tags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagMap"
            }, {
              "description" : "The tags to apply to the lifecycle policy during creation."
            } ]
          }
        },
        "type" : "object",
        "title" : "CreateLifecyclePolicyRequest",
        "required" : [ "ExecutionRoleArn", "Description", "State", "PolicyDetails" ]
      },
      "LifecyclePolicySummary" : {
        "description" : "Summary information about a lifecycle policy.",
        "properties" : {
          "PolicyType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyTypeValues"
            }, {
              "description" : "The type of policy. <code>EBS_SNAPSHOT_MANAGEMENT</code> indicates that the policy manages the lifecycle of Amazon EBS snapshots. <code>IMAGE_MANAGEMENT</code> indicates that the policy manages the lifecycle of EBS-backed AMIs."
            } ]
          },
          "Description" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDescription"
            }, {
              "description" : "The description of the lifecycle policy."
            } ]
          },
          "State" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/GettablePolicyStateValues"
            }, {
              "description" : "The activation state of the lifecycle policy."
            } ]
          },
          "PolicyId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyId"
            }, {
              "description" : "The identifier of the lifecycle policy."
            } ]
          },
          "Tags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagMap"
            }, {
              "description" : "The tags."
            } ]
          }
        },
        "type" : "object"
      },
      "SettablePolicyStateValues" : {
        "type" : "string",
        "enum" : [ "ENABLED", "DISABLED" ]
      },
      "ResourceLocationList" : {
        "maxItems" : 1,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ResourceLocationValues"
        }
      },
      "Parameters" : {
        "description" : "Specifies optional parameters to add to a policy. The set of valid parameters depends on the combination of policy type and resource type.",
        "properties" : {
          "ExcludeBootVolume" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExcludeBootVolume"
            }, {
              "description" : "[EBS Snapshot Management ? Instance policies only] Indicates whether to exclude the root volume from snapshots created using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSnapshots.html\">CreateSnapshots</a>. The default is false."
            } ]
          },
          "NoReboot" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NoReboot"
            }, {
              "description" : "Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. <code>true</code> indicates that targeted instances are not rebooted when the policy runs. <code>false</code> indicates that target instances are rebooted when the policy runs. The default is <code>true</code> (instances are not rebooted)."
            } ]
          }
        },
        "type" : "object"
      },
      "CrossRegionCopyRule" : {
        "description" : "Specifies a rule for cross-Region snapshot copies.",
        "properties" : {
          "TargetRegion" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TargetRegion"
            }, {
              "description" : "<p>Avoid using this parameter when creating new policies. Instead, use <b>Target</b> to specify a target Region or a target Outpost for snapshot copies.</p> <p>For policies created before the <b>Target</b> parameter was introduced, this parameter indicates the target Region for snapshot copies.</p>"
            } ]
          },
          "Target" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Target"
            }, {
              "description" : "<p>The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.</p> <p>Use this parameter instead of <b>TargetRegion</b>. Do not specify both.</p>"
            } ]
          },
          "DeprecateRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CrossRegionCopyDeprecateRule"
            }, {
              "description" : "The AMI deprecation rule for cross-Region AMI copies created by the rule."
            } ]
          },
          "Encrypted" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Encrypted"
            }, {
              "description" : "To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or if encryption by default is not enabled."
            } ]
          },
          "CmkArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CmkArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used."
            } ]
          },
          "RetainRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CrossRegionCopyRetainRule"
            }, {
              "description" : "The retention rule that indicates how long snapshot copies are to be retained in the destination Region."
            } ]
          },
          "CopyTags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CopyTagsNullable"
            }, {
              "description" : "Indicates whether to copy all user-defined tags from the source snapshot to the cross-Region snapshot copy."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "Encrypted" ]
      },
      "CrossRegionCopyRetainRule" : {
        "description" : "Specifies the retention rule for cross-Region snapshot copies.",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time for time-based retention."
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days."
            } ]
          }
        },
        "type" : "object"
      },
      "AvailabilityZone" : {
        "maxLength" : 16,
        "minLength" : 0,
        "pattern" : "([a-z]+-){2,3}\\d[a-z]",
        "type" : "string"
      },
      "EventParameters" : {
        "description" : "Specifies an event that triggers an event-based policy.",
        "properties" : {
          "EventType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventTypeValues"
            }, {
              "description" : "The type of event. Currently, only snapshot sharing events are supported."
            } ]
          },
          "SnapshotOwner" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SnapshotOwnerList"
            }, {
              "description" : "The IDs of the Amazon Web Services accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified Amazon Web Services accounts shares a snapshot with your account."
            } ]
          },
          "DescriptionRegex" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DescriptionRegex"
            }, {
              "description" : "<p>The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.</p> <p>For example, specifying <code>^.*Created for policy: policy-1234567890abcdef0.*$</code> configures the policy to run only if snapshots created by policy <code>policy-1234567890abcdef0</code> are shared with your account.</p>"
            } ]
          }
        },
        "type" : "object",
        "required" : [ "EventType", "SnapshotOwner", "DescriptionRegex" ]
      },
      "AvailabilityZoneList" : {
        "maxItems" : 10,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AvailabilityZone"
        }
      },
      "ActionName" : {
        "maxLength" : 120,
        "minLength" : 0,
        "pattern" : "[0-9A-Za-z _-]+",
        "type" : "string"
      },
      "EventSource" : {
        "description" : "Specifies an event that triggers an event-based policy.",
        "properties" : {
          "Type" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventSourceValues"
            }, {
              "description" : "The source of the event. Currently only managed CloudWatch Events rules are supported."
            } ]
          },
          "Parameters" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EventParameters"
            }, {
              "description" : "Information about the event."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "Type" ]
      },
      "UntagResourceResponse" : {
        "type" : "object"
      },
      "SnapshotOwnerList" : {
        "maxItems" : 50,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AwsAccountId"
        }
      },
      "ExcludeBootVolume" : {
        "type" : "boolean"
      },
      "LifecyclePolicy" : {
        "description" : "Detailed information about a lifecycle policy.",
        "properties" : {
          "ExecutionRoleArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExecutionRoleArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy."
            } ]
          },
          "Description" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDescription"
            }, {
              "description" : "The description of the lifecycle policy."
            } ]
          },
          "PolicyArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the policy."
            } ]
          },
          "State" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/GettablePolicyStateValues"
            }, {
              "description" : "The activation state of the lifecycle policy."
            } ]
          },
          "DateCreated" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Timestamp"
            }, {
              "description" : "The local date and time when the lifecycle policy was created."
            } ]
          },
          "PolicyDetails" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDetails"
            }, {
              "description" : "The configuration of the lifecycle policy"
            } ]
          },
          "PolicyId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyId"
            }, {
              "description" : "The identifier of the lifecycle policy."
            } ]
          },
          "DateModified" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Timestamp"
            }, {
              "description" : "The local date and time when the lifecycle policy was last modified."
            } ]
          },
          "Tags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagMap"
            }, {
              "description" : "The tags."
            } ]
          },
          "StatusMessage" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/StatusMessage"
            }, {
              "description" : "The description of the status."
            } ]
          }
        },
        "type" : "object"
      },
      "AwsAccountId" : {
        "maxLength" : 12,
        "minLength" : 12,
        "pattern" : "^[0-9]{12}$",
        "type" : "string"
      },
      "RetentionIntervalUnitValues" : {
        "type" : "string",
        "enum" : [ "DAYS", "WEEKS", "MONTHS", "YEARS" ]
      },
      "ActionList" : {
        "maxItems" : 1,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Action"
        }
      },
      "GetLifecyclePolicyResponse" : {
        "properties" : {
          "Policy" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/LifecyclePolicy"
            }, {
              "description" : "Detailed information about the lifecycle policy."
            } ]
          }
        },
        "type" : "object"
      },
      "Interval" : {
        "minimum" : 1,
        "type" : "integer"
      },
      "Action" : {
        "description" : "Specifies an action for an event-based policy.",
        "properties" : {
          "CrossRegionCopy" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CrossRegionCopyActionList"
            }, {
              "description" : "The rule for copying shared snapshots across Regions."
            } ]
          },
          "Name" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ActionName"
            }, {
              "description" : "A descriptive name for the action."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "Name", "CrossRegionCopy" ]
      },
      "GetLifecyclePoliciesRequest" : {
        "type" : "object",
        "title" : "GetLifecyclePoliciesRequest"
      },
      "VariableTagsList" : {
        "maxItems" : 45,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Tag"
        }
      },
      "GetLifecyclePolicyRequest" : {
        "type" : "object",
        "title" : "GetLifecyclePolicyRequest"
      },
      "TagFilter" : {
        "maxLength" : 256,
        "minLength" : 0,
        "pattern" : "[\\p{all}]*",
        "type" : "string"
      },
      "ResourceLocationValues" : {
        "type" : "string",
        "enum" : [ "CLOUD", "OUTPOST" ]
      },
      "Time" : {
        "maxLength" : 5,
        "minLength" : 5,
        "pattern" : "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
        "type" : "string"
      },
      "TagResourceResponse" : {
        "type" : "object"
      },
      "TimesList" : {
        "maxItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Time"
        }
      },
      "Timestamp" : {
        "format" : "date-time",
        "type" : "string"
      },
      "CrossRegionCopyRules" : {
        "maxItems" : 3,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CrossRegionCopyRule"
        }
      },
      "ResourceTypeValuesList" : {
        "maxItems" : 1,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ResourceTypeValues"
        }
      },
      "Target" : {
        "maxLength" : 2048,
        "minLength" : 0,
        "pattern" : "^[\\w:\\-\\/\\*]+$",
        "type" : "string"
      },
      "DeprecateRule" : {
        "description" : "Specifies an AMI deprecation rule for a schedule.",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time in which to measure the <b>Interval</b>."
            } ]
          },
          "Count" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Count"
            }, {
              "description" : "If the schedule has a count-based retention rule, this parameter specifies the number of oldest AMIs to deprecate. The count must be less than or equal to the schedule's retention count, and it can't be greater than 1000."
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "If the schedule has an age-based retention rule, this parameter specifies the period after which to deprecate AMIs created by the schedule. The period must be less than or equal to the schedule's retention period, and it can't be greater than 10 years. This is equivalent to 120 months, 520 weeks, or 3650 days."
            } ]
          }
        },
        "type" : "object"
      },
      "PolicyDescription" : {
        "maxLength" : 500,
        "minLength" : 0,
        "pattern" : "[0-9A-Za-z _-]+",
        "type" : "string"
      },
      "CreateRule" : {
        "description" : "<p>Specifies when to create snapshots of EBS volumes.</p> <p>You must specify either a Cron expression or an interval, interval unit, and start time. You cannot specify both.</p>",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/IntervalUnitValues"
            }, {
              "description" : "The interval unit."
            } ]
          },
          "Times" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimesList"
            }, {
              "description" : "<p>The time, in UTC, to start the operation. The supported format is hh:mm.</p> <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon DLM selects a time within the next 24 hours.</p>"
            } ]
          },
          "CronExpression" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CronExpression"
            }, {
              "description" : "The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions\">Cron expressions</a> in the <i>Amazon CloudWatch User Guide</i>."
            } ]
          },
          "Location" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/LocationValues"
            }, {
              "description" : "<p>Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>. To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>. If you omit this parameter, <code>CLOUD</code> is used by default.</p> <p>If the policy targets resources in an Amazon Web Services Region, then you must create snapshots in the same Region as the source resource.</p> <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost.</p>"
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24."
            } ]
          }
        },
        "type" : "object"
      },
      "PolicyArn" : {
        "maxLength" : 2048,
        "minLength" : 0,
        "pattern" : "^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$",
        "type" : "string"
      },
      "UpdateLifecyclePolicyRequest" : {
        "properties" : {
          "ExecutionRoleArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExecutionRoleArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy."
            } ]
          },
          "Description" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDescription"
            }, {
              "description" : "A description of the lifecycle policy."
            } ]
          },
          "State" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SettablePolicyStateValues"
            }, {
              "description" : "The desired activation state of the lifecycle policy after creation."
            } ]
          },
          "PolicyDetails" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyDetails"
            }, {
              "description" : "The configuration of the lifecycle policy. You cannot update the policy type or the resource type."
            } ]
          }
        },
        "type" : "object",
        "title" : "UpdateLifecyclePolicyRequest"
      },
      "ListTagsForResourceRequest" : {
        "type" : "object",
        "title" : "ListTagsForResourceRequest"
      },
      "TagKey" : {
        "maxLength" : 128,
        "minLength" : 1,
        "pattern" : "^(?!aws:)[a-zA-Z+-=._:/]+$",
        "type" : "string"
      },
      "UpdateLifecyclePolicyResponse" : {
        "type" : "object"
      },
      "TagValue" : {
        "maxLength" : 256,
        "pattern" : "[\\p{all}]*",
        "type" : "string"
      },
      "TagMap" : {
        "maxProperties" : 200,
        "minProperties" : 1,
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/TagValue"
        }
      },
      "TagResourceRequest" : {
        "properties" : {
          "Tags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagMap"
            }, {
              "description" : "One or more tags."
            } ]
          }
        },
        "type" : "object",
        "title" : "TagResourceRequest",
        "required" : [ "Tags" ]
      },
      "ListTagsForResourceResponse" : {
        "properties" : {
          "Tags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagMap"
            }, {
              "description" : "Information about the tags."
            } ]
          }
        },
        "type" : "object"
      },
      "LocationValues" : {
        "type" : "string",
        "enum" : [ "CLOUD", "OUTPOST_LOCAL" ]
      },
      "CreateLifecyclePolicyResponse" : {
        "properties" : {
          "PolicyId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyId"
            }, {
              "description" : "The identifier of the lifecycle policy."
            } ]
          }
        },
        "type" : "object"
      },
      "EncryptionConfiguration" : {
        "description" : "Specifies the encryption settings for shared snapshots that are copied across Regions.",
        "properties" : {
          "Encrypted" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Encrypted"
            }, {
              "description" : "To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled."
            } ]
          },
          "CmkArn" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CmkArn"
            }, {
              "description" : "The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "Encrypted" ]
      },
      "InternalServerException" : { },
      "ResourceTypeValues" : {
        "type" : "string",
        "enum" : [ "VOLUME", "INSTANCE" ]
      },
      "CrossRegionCopyActionList" : {
        "maxItems" : 3,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CrossRegionCopyAction"
        }
      },
      "RetainRule" : {
        "description" : "Specifies the retention rule for a lifecycle policy. You can retain snapshots based on either a count or a time interval.",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time for time-based retention."
            } ]
          },
          "Count" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Count"
            }, {
              "description" : "The number of snapshots to retain for each volume, up to a maximum of 1000."
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days."
            } ]
          }
        },
        "type" : "object"
      },
      "StatusMessage" : {
        "maxLength" : 500,
        "minLength" : 0,
        "pattern" : "[\\p{all}]*",
        "type" : "string"
      },
      "ScheduleName" : {
        "maxLength" : 120,
        "minLength" : 0,
        "pattern" : "[0-9A-Za-z _-]+",
        "type" : "string"
      },
      "CrossRegionCopyAction" : {
        "description" : "Specifies a rule for copying shared snapshots across Regions.",
        "properties" : {
          "Target" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Target"
            }, {
              "description" : "The target Region."
            } ]
          },
          "EncryptionConfiguration" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EncryptionConfiguration"
            }, {
              "description" : "The encryption settings for the copied snapshot."
            } ]
          },
          "RetainRule" : {
            "$ref" : "#/components/schemas/CrossRegionCopyRetainRule"
          }
        },
        "type" : "object",
        "required" : [ "Target", "EncryptionConfiguration" ]
      },
      "ShareRules" : {
        "maxItems" : 1,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ShareRule"
        }
      },
      "TagsToAddFilterList" : {
        "maxItems" : 50,
        "minItems" : 0,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TagFilter"
        }
      },
      "LifecyclePolicySummaryList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/LifecyclePolicySummary"
        }
      },
      "GetLifecyclePoliciesResponse" : {
        "properties" : {
          "Policies" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/LifecyclePolicySummaryList"
            }, {
              "description" : "Summary information about the lifecycle policies."
            } ]
          }
        },
        "type" : "object"
      },
      "ShareTargetAccountList" : {
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AwsAccountId"
        }
      },
      "UntagResourceRequest" : {
        "type" : "object",
        "title" : "UntagResourceRequest"
      },
      "EventSourceValues" : {
        "type" : "string",
        "enum" : [ "MANAGED_CWE" ]
      },
      "Schedule" : {
        "description" : "Specifies a backup schedule for a snapshot or AMI lifecycle policy.",
        "properties" : {
          "ShareRules" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShareRules"
            }, {
              "description" : "The rule for sharing snapshots with other Amazon Web Services accounts."
            } ]
          },
          "DeprecateRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DeprecateRule"
            }, {
              "description" : "The AMI deprecation rule for the schedule."
            } ]
          },
          "TagsToAdd" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TagsToAddList"
            }, {
              "description" : "The tags to apply to policy-created resources. These user-defined tags are in addition to the Amazon Web Services-added lifecycle tags."
            } ]
          },
          "CreateRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CreateRule"
            }, {
              "description" : "The creation rule."
            } ]
          },
          "VariableTags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/VariableTagsList"
            }, {
              "description" : "A collection of key/value pairs with values determined dynamically when the policy is executed. Keys may be any valid Amazon EC2 tag key. Values must be in one of the two following formats: <code>$(instance-id)</code> or <code>$(timestamp)</code>. Variable tags are only valid for EBS Snapshot Management ? Instance policies."
            } ]
          },
          "FastRestoreRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/FastRestoreRule"
            }, {
              "description" : "The rule for enabling fast snapshot restore."
            } ]
          },
          "RetainRule" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetainRule"
            }, {
              "description" : "The retention rule."
            } ]
          },
          "CrossRegionCopyRules" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CrossRegionCopyRules"
            }, {
              "description" : "<p>The rule for cross-Region snapshot copies.</p> <p>You can only specify cross-Region copy rules for policies that create snapshots in a Region. If the policy creates snapshots on an Outpost, then you cannot copy the snapshots to a Region or to an Outpost. If the policy creates snapshots in a Region, then snapshots can be copied to up to three Regions or Outposts.</p>"
            } ]
          },
          "Name" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ScheduleName"
            }, {
              "description" : "The name of the schedule."
            } ]
          },
          "CopyTags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CopyTags"
            }, {
              "description" : "Copy all user-defined tags on a source volume to snapshots of the volume created by this policy."
            } ]
          }
        },
        "type" : "object"
      },
      "FastRestoreRule" : {
        "description" : "Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot restore based on either a count or a time interval.",
        "properties" : {
          "IntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time for enabling fast snapshot restore."
            } ]
          },
          "AvailabilityZones" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AvailabilityZoneList"
            }, {
              "description" : "The Availability Zones in which to enable fast snapshot restore."
            } ]
          },
          "Count" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Count"
            }, {
              "description" : "The number of snapshots to be enabled with fast snapshot restore."
            } ]
          },
          "Interval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The amount of time to enable fast snapshot restore. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "AvailabilityZones" ]
      },
      "ScheduleList" : {
        "maxItems" : 4,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Schedule"
        }
      },
      "GettablePolicyStateValues" : {
        "type" : "string",
        "enum" : [ "ENABLED", "DISABLED", "ERROR" ]
      },
      "TagKeyList" : {
        "maxItems" : 200,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TagKey"
        }
      },
      "LimitExceededException" : { },
      "CmkArn" : {
        "maxLength" : 2048,
        "minLength" : 0,
        "pattern" : "arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\\d:\\d+:key/.*",
        "type" : "string"
      },
      "Tag" : {
        "description" : "Specifies a tag for a resource.",
        "properties" : {
          "Value" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/String"
            }, {
              "description" : "The tag value."
            } ]
          },
          "Key" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/String"
            }, {
              "description" : "The tag key."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "Key", "Value" ]
      },
      "TargetTagList" : {
        "maxItems" : 50,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Tag"
        }
      },
      "IntervalUnitValues" : {
        "type" : "string",
        "enum" : [ "HOURS" ]
      },
      "NoReboot" : {
        "type" : "boolean"
      },
      "PolicyId" : {
        "maxLength" : 64,
        "minLength" : 0,
        "pattern" : "policy-[A-Za-z0-9]+",
        "type" : "string"
      },
      "ShareRule" : {
        "description" : "Specifies a rule for sharing snapshots across Amazon Web Services accounts.",
        "properties" : {
          "TargetAccounts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShareTargetAccountList"
            }, {
              "description" : "The IDs of the Amazon Web Services accounts with which to share the snapshots."
            } ]
          },
          "UnshareIntervalUnit" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RetentionIntervalUnitValues"
            }, {
              "description" : "The unit of time for the automatic unsharing interval."
            } ]
          },
          "UnshareInterval" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Interval"
            }, {
              "description" : "The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared."
            } ]
          }
        },
        "type" : "object",
        "required" : [ "TargetAccounts" ]
      },
      "CopyTags" : {
        "type" : "boolean"
      }
    },
    "securitySchemes" : {
      "hmac" : {
        "type" : "apiKey",
        "description" : "Amazon Signature authorization v4",
        "name" : "Authorization",
        "in" : "header",
        "x-amazon-apigateway-authtype" : "awsSigv4"
      }
    }
  },
  "externalDocs" : {
    "description" : "Amazon Web Services documentation",
    "url" : "https://docs.aws.amazon.com/dlm/"
  },
  "security" : [ {
    "hmac" : [ ]
  } ],
  "x-hasEquivalentPaths" : true
}