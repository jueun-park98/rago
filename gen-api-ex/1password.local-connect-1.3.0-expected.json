{
  "openapi" : "3.0.2",
  "info" : {
    "contact" : {
      "email" : "support@1password.com",
      "name" : "1Password Integrations",
      "url" : "https://support.1password.com/"
    },
    "description" : "REST API interface for 1Password Connect.",
    "title" : "1Password Connect",
    "version" : "1.3.0",
    "x-providerName" : "1password.local",
    "x-logo" : {
      "url" : "https://api.apis.guru/v2/cache/logo/https_upload.wikimedia.org_wikipedia_commons_thumb_e_e3_1password-logo.svg_1280px-1password-logo.svg.png"
    },
    "x-apisguru-categories" : [ "security" ],
    "x-serviceName" : "connect",
    "x-origin" : [ {
      "format" : "openapi",
      "url" : "https://i.1password.com/media/1password-connect/1password-connect-api.yaml",
      "version" : "3.0"
    } ]
  },
  "servers" : [ {
    "url" : "http://1password.local"
  }, {
    "url" : "http://localhost:8080/v1"
  } ],
  "tags" : [ {
    "name" : "Items",
    "description" : "Access and manage items inside 1Password Vaults"
  }, {
    "name" : "Vaults",
    "description" : "Access 1Password Vaults"
  }, {
    "name" : "Activity",
    "description" : "Access API Request Activity"
  } ],
  "paths" : {
    "/activity" : {
      "get" : {
        "tags" : [ "Activity" ],
        "summary" : "Retrieve a list of API Requests that have been made.",
        "operationId" : "GetApiActivity",
        "parameters" : [ {
          "description" : "How many API Events should be retrieved in a single request.",
          "schema" : {
            "example" : 10,
            "type" : "integer",
            "default" : 50
          },
          "in" : "query",
          "name" : "limit"
        }, {
          "description" : "How far into the collection of API Events should the response start",
          "schema" : {
            "example" : 50,
            "type" : "integer",
            "default" : 0
          },
          "in" : "query",
          "name" : "offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Range" : {
                "description" : "An decription of what part of the collection has been returned as well as the total size.",
                "schema" : {
                  "example" : "1-50/1134",
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/APIRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/health" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Get state of the server and its dependencies.",
        "operationId" : "GetServerHealth",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "examples" : {
                  "WaitingForAPIRequest" : {
                    "summary" : "API server waiting for first authenticated request",
                    "value" : {
                      "dependencies" : [ {
                        "service" : "sync",
                        "status" : "TOKEN_NEEDED"
                      }, {
                        "message" : "Connected to./1password.sqlite",
                        "service" : "sqlite",
                        "status" : "ACTIVE"
                      } ],
                      "name" : "1Password Connect API",
                      "version" : "1.2.1"
                    }
                  }
                },
                "schema" : {
                  "properties" : {
                    "dependencies" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ServiceDependency"
                      }
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "version" : {
                      "description" : "The Connect server's version",
                      "type" : "string"
                    }
                  },
                  "type" : "object",
                  "required" : [ "name", "version" ]
                }
              }
            }
          }
        },
        "servers" : [ {
          "url" : "http://localhost:8080"
        } ]
      }
    },
    "/heartbeat" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Ping the server for liveness",
        "operationId" : "GetHeartbeat",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "example" : ".",
                  "type" : "string"
                }
              }
            }
          }
        },
        "servers" : [ {
          "url" : "http://localhost:8080"
        } ]
      }
    },
    "/metrics" : {
      "get" : {
        "tags" : [ "Metrics" ],
        "summary" : "Query server for exposed Prometheus metrics",
        "description" : "See Prometheus documentation for a complete data model.",
        "operationId" : "GetPrometheusMetrics",
        "responses" : {
          "200" : {
            "description" : "Successfully returned Prometheus metrics",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "example" : "# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 2.9153e-05\ngo_gc_duration_seconds{quantile=\"0.25\"} 6.2832e-05\ngo_gc_duration_seconds{quantile=\"0.5\"} 9.7187e-05\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.000112967\ngo_gc_duration_seconds{quantile=\"1\"} 0.000215819\ngo_gc_duration_seconds_sum 0.001376862\ngo_gc_duration_seconds_count 14\n",
                  "type" : "string"
                }
              }
            }
          }
        },
        "servers" : [ {
          "url" : "http://localhost:8080"
        } ]
      }
    },
    "/vaults" : {
      "get" : {
        "tags" : [ "Vaults" ],
        "summary" : "Get all Vaults",
        "operationId" : "GetVaults",
        "parameters" : [ {
          "description" : "Filter the Vault collection based on Vault name using SCIM eq filter",
          "schema" : {
            "example" : "name eq \"Some Vault Name\"",
            "type" : "string"
          },
          "in" : "query",
          "name" : "filter"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Vault"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}" : {
      "get" : {
        "tags" : [ "Vaults" ],
        "summary" : "Get Vault details and metadata",
        "operationId" : "GetVaultById",
        "parameters" : [ {
          "description" : "The UUID of the Vault to fetch Items from",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vault"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Vault not found",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {itemUuid} not found",
                  "status" : 404
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}/items" : {
      "get" : {
        "tags" : [ "Items" ],
        "summary" : "Get all items for inside a Vault",
        "operationId" : "GetVaultItems",
        "parameters" : [ {
          "description" : "The UUID of the Vault to fetch Items from",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "Filter the Item collection based on Item name using SCIM eq filter",
          "schema" : {
            "example" : "title eq \"Some Item Name\"",
            "type" : "string"
          },
          "in" : "query",
          "name" : "filter"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Vault not found",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} not found",
                  "status" : 404
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Items" ],
        "summary" : "Create a new Item",
        "operationId" : "CreateVaultItem",
        "parameters" : [ {
          "description" : "The UUID of the Vault to create an Item in",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FullItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FullItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Unable to create item due to invalid input",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid item category",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}/items/{itemUuid}" : {
      "get" : {
        "tags" : [ "Items" ],
        "summary" : "Get the details of an Item",
        "operationId" : "GetVaultItemById",
        "parameters" : [ {
          "description" : "The UUID of the Vault to fetch Item from",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to fetch",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FullItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Items" ],
        "summary" : "Update a subset of Item attributes",
        "description" : "Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.\n\nWhen modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`\n",
        "operationId" : "PatchVaultItem",
        "parameters" : [ {
          "description" : "The UUID of the Vault the item is in",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to update",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "PatchItemAttr" : {
                  "summary" : "Update specific Item attributes",
                  "value" : [ {
                    "op" : "replace",
                    "path" : "/favorite",
                    "value" : true
                  }, {
                    "op" : "remove",
                    "path" : "/tags/1"
                  } ]
                },
                "PatchItemField" : {
                  "summary" : "Add a new ItemField to the Item",
                  "value" : [ {
                    "op" : "add",
                    "path" : "/fields",
                    "value" : {
                      "label" : "New Field",
                      "type" : "string",
                      "value" : "hunter2"
                    }
                  } ]
                },
                "PatchItemFieldAttr" : {
                  "summary" : "Modify a specific ItemField attribute.",
                  "value" : [ {
                    "op" : "add",
                    "path" : "/fields/s2ju540zlna8bdj4uro7sj64rk/label",
                    "value" : "New field name"
                  }, {
                    "op" : "remove",
                    "path" : "/fields/s2ju540zlna8bdj4uro7sj64rk/value"
                  } ]
                },
                "PatchItemFieldWithID" : {
                  "summary" : "Modify or remove an ItemField.",
                  "value" : [ {
                    "op" : "replace",
                    "path" : "/fields/r9qxq7xnhfhukoxsc8ymqr0y11",
                    "value" : {
                      "label" : "Replacement Title",
                      "type" : "string",
                      "value" : "new value"
                    }
                  }, {
                    "op" : "remove",
                    "path" : "/fields/h2nl155dshi043yse7wa3u1hs7"
                  } ]
                },
                "ReplaceAllAttributes" : {
                  "summary" : "Replace an entire Item with new fields. Equivalent to a PUT request.",
                  "value" : [ {
                    "op" : "replace",
                    "path" : "/",
                    "value" : {
                      "..." : "Any attr from FullItem schema",
                      "favorite" : true,
                      "tags" : [ "tag1", "tag2" ],
                      "title" : "New Title"
                    }
                  } ]
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Patch"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - Item updated. If no Patch operations were provided, Item is unmodified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FullItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Items" ],
        "summary" : "Update an Item",
        "operationId" : "UpdateVaultItem",
        "parameters" : [ {
          "description" : "The UUID of the Item's Vault",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to update",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FullItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FullItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Unable to create item due to invalid input",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "The item doesn't have a {example field name} field.",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Items" ],
        "summary" : "Delete an Item",
        "operationId" : "DeleteVaultItem",
        "parameters" : [ {
          "description" : "The UUID of the Vault the item is in",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to update",
          "required" : true,
          "schema" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted an item"
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}/items/{itemUuid}/files" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Get all the files inside an Item",
        "operationId" : "GetItemFiles",
        "parameters" : [ {
          "description" : "The UUID of the Vault to fetch Items from",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to fetch files from",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        }, {
          "description" : "Tells server to return the base64-encoded file contents in the response.",
          "schema" : {
            "example" : true,
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "inline_files"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Item not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "File content too large to display",
            "content" : {
              "application/json" : {
                "examples" : {
                  "fileTooLarge" : {
                    "summary" : "File too large",
                    "value" : {
                      "message" : "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.",
                      "status" : 413
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Get the details of a File",
        "operationId" : "GetDetailsOfFileById",
        "parameters" : [ {
          "description" : "The UUID of the Vault to fetch Item from",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "in" : "path",
          "name" : "vaultUuid"
        }, {
          "description" : "The UUID of the Item to fetch File from",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "in" : "path",
          "name" : "itemUuid"
        }, {
          "description" : "The UUID of the File to fetch",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          },
          "in" : "path",
          "name" : "fileUuid"
        }, {
          "description" : "Tells server to return the base64-encoded file contents in the response.",
          "schema" : {
            "example" : true,
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "inline_files"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "vault {vaultUuid} is not in scope",
                  "status" : 403
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "File not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "fileNotFound" : {
                    "summary" : "File not found",
                    "value" : {
                      "message" : "file {fileUuid} not found",
                      "status" : 404
                    }
                  },
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "File content too large to display",
            "content" : {
              "application/json" : {
                "examples" : {
                  "fileTooLarge" : {
                    "summary" : "File too large",
                    "value" : {
                      "message" : "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.",
                      "status" : 413
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    },
    "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content" : {
      "parameters" : [ {
        "description" : "The UUID of the Vault the item is in",
        "required" : true,
        "schema" : {
          "format" : "uuid",
          "type" : "string"
        },
        "in" : "path",
        "name" : "vaultUuid"
      }, {
        "description" : "The UUID of the Item the File is in",
        "required" : true,
        "schema" : {
          "format" : "uuid",
          "type" : "string"
        },
        "in" : "path",
        "name" : "itemUuid"
      }, {
        "description" : "UUID of the file to get content from",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "in" : "path",
        "name" : "fileUuid"
      } ],
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Get the content of a File",
        "operationId" : "DownloadFileByID",
        "responses" : {
          "200" : {
            "description" : "Success",
            "headers" : {
              "Content-Disposition" : {
                "schema" : {
                  "example" : "attachment; filename=\"privkey.pem\"",
                  "type" : "string"
                }
              },
              "Content-Length" : {
                "schema" : {
                  "example" : "6432",
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "format" : "binary",
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid or missing token",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Invalid token signature",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "File not found",
            "content" : {
              "application/json" : {
                "examples" : {
                  "fileNotFound" : {
                    "summary" : "File not found",
                    "value" : {
                      "message" : "file {fileUuid} not found",
                      "status" : 404
                    }
                  },
                  "itemNotFound" : {
                    "summary" : "Item not found",
                    "value" : {
                      "message" : "item {itemUuid} not found",
                      "status" : 404
                    }
                  },
                  "vaultNotFound" : {
                    "summary" : "Vault not found",
                    "value" : {
                      "message" : "vault {vaultUuid} not found",
                      "status" : 404
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ConnectToken" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "APIRequest" : {
        "description" : "Represents a request that was made to the API. Including what Token was used and what resource was accessed.",
        "properties" : {
          "action" : {
            "type" : "string",
            "enum" : [ "READ", "CREATE", "UPDATE", "DELETE" ]
          },
          "actor" : {
            "properties" : {
              "account" : {
                "type" : "string"
              },
              "id" : {
                "format" : "uuid",
                "type" : "string"
              },
              "jti" : {
                "type" : "string"
              },
              "requestIp" : {
                "type" : "string"
              },
              "userAgent" : {
                "type" : "string"
              }
            },
            "type" : "object"
          },
          "requestId" : {
            "description" : "The unique id used to identify a single request.",
            "format" : "uuid",
            "type" : "string"
          },
          "resource" : {
            "properties" : {
              "item" : {
                "properties" : {
                  "id" : {
                    "pattern" : "^[\\da-z]{26}$",
                    "type" : "string"
                  }
                },
                "type" : "object"
              },
              "itemVersion" : {
                "type" : "integer"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "ITEM", "VAULT" ]
              },
              "vault" : {
                "properties" : {
                  "id" : {
                    "pattern" : "^[\\da-z]{26}$",
                    "type" : "string"
                  }
                },
                "type" : "object"
              }
            },
            "type" : "object"
          },
          "result" : {
            "type" : "string",
            "enum" : [ "SUCCESS", "DENY" ]
          },
          "timestamp" : {
            "description" : "The time at which the request was processed by the server.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ErrorResponse" : {
        "properties" : {
          "message" : {
            "description" : "A message detailing the error",
            "type" : "string"
          },
          "status" : {
            "description" : "HTTP Status Code",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "Field" : {
        "properties" : {
          "entropy" : {
            "description" : "For fields with a purpose of `PASSWORD` this is the entropy of the value",
            "readOnly" : true,
            "type" : "number"
          },
          "generate" : {
            "description" : "If value is not present then a new value should be generated for this field",
            "type" : "boolean",
            "default" : false
          },
          "id" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "purpose" : {
            "description" : "Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.",
            "type" : "string",
            "enum" : [ "", "USERNAME", "PASSWORD", "NOTES" ]
          },
          "recipe" : {
            "$ref" : "#/components/schemas/GeneratorRecipe"
          },
          "section" : {
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "type" : "object"
          },
          "type" : {
            "type" : "string",
            "default" : "STRING",
            "enum" : [ "STRING", "EMAIL", "CONCEALED", "URL", "TOTP", "DATE", "MONTH_YEAR", "MENU" ]
          },
          "value" : {
            "type" : "string"
          }
        },
        "type" : "object",
        "required" : [ "id", "type" ]
      },
      "File" : {
        "example" : {
          "content" : "VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=",
          "content_path" : "v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content",
          "id" : "6r65pjq33banznomn7q22sj44e",
          "name" : "foo.txt",
          "size" : 35
        },
        "properties" : {
          "content" : {
            "description" : "Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.",
            "format" : "byte",
            "type" : "string"
          },
          "content_path" : {
            "description" : "Path of the Connect API that can be used to download the contents of this file.",
            "readOnly" : true,
            "type" : "string"
          },
          "id" : {
            "description" : "ID of the file",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the file",
            "type" : "string"
          },
          "section" : {
            "description" : "For files that are in a section, this field describes the section.",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            },
            "type" : "object"
          },
          "size" : {
            "description" : "Size in bytes of the file",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "FullItem" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Item"
        }, {
          "properties" : {
            "fields" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Field"
              }
            },
            "files" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/File"
              }
            },
            "sections" : {
              "type" : "array",
              "items" : {
                "properties" : {
                  "id" : {
                    "type" : "string"
                  },
                  "label" : {
                    "type" : "string"
                  }
                },
                "type" : "object"
              }
            }
          },
          "type" : "object"
        } ]
      },
      "GeneratorRecipe" : {
        "description" : "The recipe is used in conjunction with the \"generate\" property to set the character set used to generate a new secure value",
        "properties" : {
          "characterSets" : {
            "maximum" : 3,
            "minimum" : 0,
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : [ "LETTERS", "DIGITS", "SYMBOLS" ]
            }
          },
          "length" : {
            "description" : "Length of the generated value",
            "maximum" : 64,
            "minimum" : 1,
            "type" : "integer",
            "default" : 32
          }
        },
        "type" : "object"
      },
      "Item" : {
        "properties" : {
          "category" : {
            "type" : "string",
            "enum" : [ "LOGIN", "PASSWORD", "API_CREDENTIAL", "SERVER", "DATABASE", "CREDIT_CARD", "MEMBERSHIP", "PASSPORT", "SOFTWARE_LICENSE", "OUTDOOR_LICENSE", "SECURE_NOTE", "WIRELESS_ROUTER", "BANK_ACCOUNT", "DRIVER_LICENSE", "IDENTITY", "REWARD_PROGRAM", "DOCUMENT", "EMAIL_ACCOUNT", "SOCIAL_SECURITY_NUMBER", "CUSTOM" ]
          },
          "createdAt" : {
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "favorite" : {
            "type" : "boolean",
            "default" : false
          },
          "id" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "lastEditedBy" : {
            "readOnly" : true,
            "type" : "string"
          },
          "state" : {
            "readOnly" : true,
            "type" : "string",
            "enum" : [ "ARCHIVED", "DELETED" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "title" : {
            "type" : "string"
          },
          "updatedAt" : {
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "urls" : {
            "example" : [ {
              "href" : "https://example.com",
              "primary" : true
            }, {
              "href" : "https://example.org"
            } ],
            "type" : "array",
            "items" : {
              "properties" : {
                "href" : {
                  "format" : "url",
                  "type" : "string"
                },
                "primary" : {
                  "type" : "boolean"
                }
              },
              "type" : "object",
              "required" : [ "href" ]
            }
          },
          "vault" : {
            "properties" : {
              "id" : {
                "pattern" : "^[\\da-z]{26}$",
                "type" : "string"
              }
            },
            "type" : "object",
            "required" : [ "id" ]
          },
          "version" : {
            "type" : "integer"
          }
        },
        "type" : "object",
        "required" : [ "vault", "category" ]
      },
      "Patch" : {
        "type" : "array",
        "items" : {
          "properties" : {
            "op" : {
              "type" : "string",
              "enum" : [ "add", "remove", "replace" ]
            },
            "path" : {
              "description" : "An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute",
              "example" : "/fields/06gnn2b95example10q91512p5/label",
              "type" : "string"
            },
            "value" : {
              "type" : "object"
            }
          },
          "type" : "object",
          "required" : [ "op", "path" ]
        }
      },
      "ServiceDependency" : {
        "description" : "The state of a registered server dependency.",
        "properties" : {
          "message" : {
            "description" : "Human-readable message for explaining the current state.",
            "type" : "string"
          },
          "service" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Vault" : {
        "properties" : {
          "attributeVersion" : {
            "description" : "The vault version",
            "type" : "integer"
          },
          "contentVersion" : {
            "description" : "The version of the vault contents",
            "type" : "integer"
          },
          "createdAt" : {
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "id" : {
            "pattern" : "^[\\da-z]{26}$",
            "type" : "string"
          },
          "items" : {
            "description" : "Number of active items in the vault",
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "USER_CREATED", "PERSONAL", "EVERYONE", "TRANSFER" ]
          },
          "updatedAt" : {
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "ConnectToken" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}