{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "mike.ralphson@gmail.com",
      "name" : "Mike Ralphson",
      "url" : "https://github.com/mermade/aws2openapi",
      "x-twitter" : "PermittedSoc"
    },
    "description" : "<p>Amazon Connect is a cloud-based contact center solution that makes it easy to set up and manage a customer contact center and provide reliable customer engagement at any scale.</p> <p>Amazon Connect enables customer contacts through voice or chat.</p> <p>The APIs described here are used by chat participants, such as agents and customers.</p>",
    "license" : {
      "name" : "Apache 2.0 License",
      "url" : "http://www.apache.org/licenses/"
    },
    "termsOfService" : "https://aws.amazon.com/service-terms/",
    "title" : "Amazon Connect Participant Service",
    "version" : "2018-09-07",
    "x-providerName" : "amazonaws.com",
    "x-logo" : {
      "url" : "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
      "backgroundColor" : "#FFFFFF"
    },
    "x-aws-signingName" : "execute-api",
    "x-apiClientRegistration" : {
      "url" : "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-preferred" : true,
    "x-release" : "v4",
    "x-apisguru-categories" : [ "cloud" ],
    "x-serviceName" : "connectparticipant",
    "x-origin" : [ {
      "contentType" : "application/json",
      "url" : "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/connectparticipant-2018-09-07.normal.json",
      "converter" : {
        "url" : "https://github.com/mermade/aws2openapi",
        "version" : "1.0.0"
      },
      "x-apisguru-driver" : "external"
    } ]
  },
  "servers" : [ {
    "url" : "http://participant.connect.{region}.amazonaws.com",
    "description" : "The Amazon Connect Participant multi-region endpoint",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "us-east-1",
        "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "us-gov-west-1", "us-gov-east-1", "ca-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-south-1", "af-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ap-east-1", "ap-south-1", "sa-east-1", "me-south-1" ]
      }
    }
  }, {
    "url" : "https://participant.connect.{region}.amazonaws.com",
    "description" : "The Amazon Connect Participant multi-region endpoint",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "us-east-1",
        "enum" : [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "us-gov-west-1", "us-gov-east-1", "ca-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-south-1", "af-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ap-east-1", "ap-south-1", "sa-east-1", "me-south-1" ]
      }
    }
  }, {
    "url" : "http://participant.connect.{region}.amazonaws.com.cn",
    "description" : "The Amazon Connect Participant endpoint for China (Beijing) and China (Ningxia)",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "cn-north-1",
        "enum" : [ "cn-north-1", "cn-northwest-1" ]
      }
    }
  }, {
    "url" : "https://participant.connect.{region}.amazonaws.com.cn",
    "description" : "The Amazon Connect Participant endpoint for China (Beijing) and China (Ningxia)",
    "variables" : {
      "region" : {
        "description" : "The AWS region",
        "default" : "cn-north-1",
        "enum" : [ "cn-north-1", "cn-northwest-1" ]
      }
    }
  } ],
  "paths" : {
    "/participant/complete-attachment-upload#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "Allows you to confirm that the attachment has been uploaded using the pre-signed URL provided in StartAttachmentUpload API. ",
        "operationId" : "CompleteAttachmentUpload",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "AttachmentIds" : {
                    "description" : "A list of unique identifiers for the attachments.",
                    "maxItems" : 1,
                    "minItems" : 1,
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ArtifactId"
                    }
                  },
                  "ClientToken" : {
                    "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                    "maxLength" : 500,
                    "minLength" : 1,
                    "type" : "string"
                  }
                },
                "type" : "object",
                "required" : [ "AttachmentIds", "ClientToken" ]
              }
            }
          }
        },
        "responses" : {
          "484" : {
            "description" : "ServiceQuotaExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceQuotaExceededException"
                }
              }
            }
          },
          "485" : {
            "description" : "ConflictException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConflictException"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompleteAttachmentUploadResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/connection#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "<p>Creates the participant's connection. Note that ParticipantToken is used for invoking this API instead of ConnectionToken.</p> <p>The participant token is valid for the lifetime of the participant ? until they are part of a contact.</p> <p>The response URL for <code>WEBSOCKET</code> Type has a connect expiry timeout of 100s. Clients must manually connect to the returned websocket URL and subscribe to the desired topic. </p> <p>For chat, you need to publish the following on the established websocket connection:</p> <p> <code>{\"topic\":\"aws/subscribe\",\"content\":{\"topics\":[\"aws/chat\"]}}</code> </p> <p>Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter, clients need to call this API again to obtain a new websocket URL and perform the same steps as before.</p> <note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p> </note>",
        "operationId" : "CreateParticipantConnection",
        "parameters" : [ {
          "description" : "<p>This is a header parameter.</p> <p>The Participant Token as obtained from <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_StartChatContact.html\">StartChatContact</a> API response.</p>",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "Type" : {
                    "description" : "Type of connection information required.",
                    "minItems" : 1,
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ConnectionType"
                    }
                  }
                },
                "type" : "object",
                "required" : [ "Type" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateParticipantConnectionResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/transcript#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "<p>Retrieves a transcript of the session, including details about any attachments. Note that ConnectionToken is used for invoking this API instead of ParticipantToken.</p> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>",
        "operationId" : "GetTranscript",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        }, {
          "description" : "Pagination limit",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "in" : "query",
          "name" : "MaxResults"
        }, {
          "description" : "Pagination token",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "in" : "query",
          "name" : "NextToken"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "NextToken" : {
                    "description" : "The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.",
                    "maxLength" : 1000,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "ScanDirection" : {
                    "description" : "The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. ",
                    "type" : "string",
                    "enum" : [ "FORWARD", "BACKWARD" ]
                  },
                  "MaxResults" : {
                    "description" : "The maximum number of results to return in the page. Default: 10. ",
                    "maximum" : 100,
                    "minimum" : 0,
                    "type" : "integer"
                  },
                  "SortOrder" : {
                    "description" : "The sort order for the records. Default: DESCENDING.",
                    "type" : "string",
                    "enum" : [ "DESCENDING", "ASCENDING" ]
                  },
                  "ContactId" : {
                    "description" : "The contactId from the current contact chain for which transcript is needed.",
                    "maxLength" : 256,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "StartPosition" : {
                    "description" : "A filtering option for where to start. For example, if you sent 100 messages, start with message 50. ",
                    "properties" : {
                      "AbsoluteTime" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/Instant"
                        }, {
                          "description" : "<p>The time in ISO format where to start.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
                        } ]
                      },
                      "MostRecent" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/MostRecent"
                        }, {
                          "description" : "The start position of the most recent message where you want to start. "
                        } ]
                      },
                      "Id" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/ChatItemId"
                        }, {
                          "description" : "The ID of the message or event where to start. "
                        } ]
                      }
                    },
                    "type" : "object"
                  }
                },
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTranscriptResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/disconnect#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "<p>Disconnects a participant. Note that ConnectionToken is used for invoking this API instead of ParticipantToken.</p> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>",
        "operationId" : "DisconnectParticipant",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "ClientToken" : {
                    "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                    "maxLength" : 500,
                    "type" : "string"
                  }
                },
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisconnectParticipantResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/event#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "<p>Sends an event. Note that ConnectionToken is used for invoking this API instead of ParticipantToken.</p> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>",
        "operationId" : "SendEvent",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "ContentType" : {
                    "description" : "<p>The content type of the request. Supported types are:</p> <ul> <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li> <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li> </ul>",
                    "maxLength" : 100,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "Content" : {
                    "description" : "The content of the event to be sent (for example, message text). This is not yet supported.",
                    "maxLength" : 1024,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "ClientToken" : {
                    "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                    "maxLength" : 500,
                    "type" : "string"
                  }
                },
                "type" : "object",
                "required" : [ "ContentType" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendEventResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/attachment#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "Provides a pre-signed URL for download of a completed attachment. This is an asynchronous API for use with active contacts.",
        "operationId" : "GetAttachment",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "AttachmentId" : {
                    "description" : "A unique identifier for the attachment.",
                    "maxLength" : 256,
                    "minLength" : 1,
                    "type" : "string"
                  }
                },
                "type" : "object",
                "required" : [ "AttachmentId" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAttachmentResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/start-attachment-upload#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "Provides a pre-signed Amazon S3 URL in response for uploading the file directly to S3.",
        "operationId" : "StartAttachmentUpload",
        "parameters" : [ {
          "description" : "The authentication token associated with the participant's connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "AttachmentSizeInBytes" : {
                    "description" : "The size of the attachment in bytes.",
                    "minimum" : 1,
                    "type" : "integer"
                  },
                  "ContentType" : {
                    "description" : "Describes the MIME file type of the attachment. For a list of supported file types, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.",
                    "maxLength" : 255,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "AttachmentName" : {
                    "description" : "A case-sensitive name of the attachment being uploaded.",
                    "maxLength" : 256,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "ClientToken" : {
                    "description" : "A unique case sensitive identifier to support idempotency of request.",
                    "maxLength" : 500,
                    "minLength" : 1,
                    "type" : "string"
                  }
                },
                "type" : "object",
                "required" : [ "ContentType", "AttachmentSizeInBytes", "AttachmentName", "ClientToken" ]
              }
            }
          }
        },
        "responses" : {
          "484" : {
            "description" : "ServiceQuotaExceededException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceQuotaExceededException"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartAttachmentUploadResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    },
    "/participant/message#X-Amz-Bearer" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/X-Amz-Content-Sha256"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Date"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Algorithm"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Credential"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Security-Token"
      }, {
        "$ref" : "#/components/parameters/X-Amz-Signature"
      }, {
        "$ref" : "#/components/parameters/X-Amz-SignedHeaders"
      } ],
      "post" : {
        "description" : "<p>Sends a message. Note that ConnectionToken is used for invoking this API instead of ParticipantToken.</p> <note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p> </note>",
        "operationId" : "SendMessage",
        "parameters" : [ {
          "description" : "The authentication token associated with the connection.",
          "required" : true,
          "schema" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string"
          },
          "in" : "header",
          "name" : "X-Amz-Bearer"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "ContentType" : {
                    "description" : "The type of the content. Supported types are text/plain.",
                    "maxLength" : 100,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "Content" : {
                    "description" : "The content of the message.",
                    "maxLength" : 1024,
                    "minLength" : 1,
                    "type" : "string"
                  },
                  "ClientToken" : {
                    "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                    "maxLength" : 500,
                    "type" : "string"
                  }
                },
                "type" : "object",
                "required" : [ "ContentType", "Content" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendMessageResponse"
                }
              }
            }
          },
          "480" : {
            "description" : "AccessDeniedException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessDeniedException"
                }
              }
            }
          },
          "481" : {
            "description" : "InternalServerException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InternalServerException"
                }
              }
            }
          },
          "482" : {
            "description" : "ThrottlingException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ThrottlingException"
                }
              }
            }
          },
          "483" : {
            "description" : "ValidationException",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationException"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "X-Amz-Date" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Date"
      },
      "X-Amz-Algorithm" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Algorithm"
      },
      "X-Amz-Signature" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-SignedHeaders"
      },
      "X-Amz-Security-Token" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Security-Token"
      },
      "X-Amz-Credential" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Credential"
      },
      "X-Amz-Content-Sha256" : {
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "in" : "header",
        "name" : "X-Amz-Content-Sha256"
      }
    },
    "schemas" : {
      "AccessDeniedException" : { },
      "AttachmentSizeInBytes" : {
        "minimum" : 1,
        "type" : "integer"
      },
      "ArtifactId" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "ContentType" : {
        "maxLength" : 255,
        "minLength" : 1,
        "type" : "string"
      },
      "ConflictException" : { },
      "AttachmentItem" : {
        "description" : "The case-insensitive input to indicate standard MIME type that describes the format of the file that will be uploaded.",
        "properties" : {
          "Status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ArtifactStatus"
            }, {
              "description" : "Status of the attachment."
            } ]
          },
          "ContentType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContentType"
            }, {
              "description" : "Describes the MIME file type of the attachment. For a list of supported file types, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>."
            } ]
          },
          "AttachmentName" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AttachmentName"
            }, {
              "description" : "A case-sensitive name of the attachment being uploaded."
            } ]
          },
          "AttachmentId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ArtifactId"
            }, {
              "description" : "A unique identifier for the attachment."
            } ]
          }
        },
        "type" : "object"
      },
      "SendMessageRequest" : {
        "properties" : {
          "ContentType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContentType"
            }, {
              "description" : "The type of the content. Supported types are text/plain."
            } ]
          },
          "Content" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContent"
            }, {
              "description" : "The content of the message."
            } ]
          },
          "ClientToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ClientToken"
            }, {
              "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            } ]
          }
        },
        "type" : "object",
        "title" : "SendMessageRequest",
        "required" : [ "ContentType", "Content" ]
      },
      "ParticipantId" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "Item" : {
        "description" : "An item - message or event - that has been sent. ",
        "properties" : {
          "ParticipantId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ParticipantId"
            }, {
              "description" : "The ID of the sender in the session."
            } ]
          },
          "Type" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatItemType"
            }, {
              "description" : "Type of the item: message or event. "
            } ]
          },
          "ContentType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContentType"
            }, {
              "description" : "The type of content of the item."
            } ]
          },
          "AbsoluteTime" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Instant"
            }, {
              "description" : "<p>The time when the message or event was sent.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "Content" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContent"
            }, {
              "description" : "The content of the message or event."
            } ]
          },
          "DisplayName" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayName"
            }, {
              "description" : "The chat display name of the sender."
            } ]
          },
          "Id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatItemId"
            }, {
              "description" : "The ID of the item."
            } ]
          },
          "Attachments" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Attachments"
            }, {
              "description" : "Provides information about the attachments."
            } ]
          },
          "ParticipantRole" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ParticipantRole"
            }, {
              "description" : "The role of the sender. For example, is it a customer, agent, or system."
            } ]
          }
        },
        "type" : "object"
      },
      "SendMessageResponse" : {
        "properties" : {
          "AbsoluteTime" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Instant"
            }, {
              "description" : "<p>The time when the message was sent.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "Id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatItemId"
            }, {
              "description" : "The ID of the message."
            } ]
          }
        },
        "type" : "object"
      },
      "ScanDirection" : {
        "type" : "string",
        "enum" : [ "FORWARD", "BACKWARD" ]
      },
      "AttachmentName" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "GetTranscriptResponse" : {
        "properties" : {
          "InitialContactId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContactId"
            }, {
              "description" : "The initial contact ID for the contact. "
            } ]
          },
          "Transcript" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Transcript"
            }, {
              "description" : "The list of messages in the session."
            } ]
          },
          "NextToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NextToken"
            }, {
              "description" : "The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results."
            } ]
          }
        },
        "type" : "object"
      },
      "ParticipantToken" : {
        "maxLength" : 1000,
        "minLength" : 1,
        "type" : "string"
      },
      "NonEmptyClientToken" : {
        "maxLength" : 500,
        "minLength" : 1,
        "type" : "string"
      },
      "CompleteAttachmentUploadRequest" : {
        "properties" : {
          "AttachmentIds" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AttachmentIdList"
            }, {
              "description" : "A list of unique identifiers for the attachments."
            } ]
          },
          "ClientToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NonEmptyClientToken"
            }, {
              "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            } ]
          }
        },
        "type" : "object",
        "title" : "CompleteAttachmentUploadRequest",
        "required" : [ "AttachmentIds", "ClientToken" ]
      },
      "ConnectionTypeList" : {
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ConnectionType"
        }
      },
      "ParticipantRole" : {
        "type" : "string",
        "enum" : [ "AGENT", "CUSTOMER", "SYSTEM" ]
      },
      "ConnectionType" : {
        "type" : "string",
        "enum" : [ "WEBSOCKET", "CONNECTION_CREDENTIALS" ]
      },
      "Instant" : {
        "maxLength" : 100,
        "minLength" : 1,
        "type" : "string"
      },
      "MaxResults" : {
        "maximum" : 100,
        "minimum" : 0,
        "type" : "integer"
      },
      "SendEventResponse" : {
        "properties" : {
          "AbsoluteTime" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Instant"
            }, {
              "description" : "<p>The time when the event was sent.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "Id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatItemId"
            }, {
              "description" : "The ID of the response."
            } ]
          }
        },
        "type" : "object"
      },
      "CreateParticipantConnectionRequest" : {
        "properties" : {
          "Type" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConnectionTypeList"
            }, {
              "description" : "Type of connection information required."
            } ]
          }
        },
        "type" : "object",
        "title" : "CreateParticipantConnectionRequest",
        "required" : [ "Type" ]
      },
      "ConnectionCredentials" : {
        "description" : "Connection credentials. ",
        "properties" : {
          "Expiry" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ISO8601Datetime"
            }, {
              "description" : "<p>The expiration of the token.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "ConnectionToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ParticipantToken"
            }, {
              "description" : "The connection token."
            } ]
          }
        },
        "type" : "object"
      },
      "MostRecent" : {
        "maximum" : 100,
        "minimum" : 0,
        "type" : "integer"
      },
      "ThrottlingException" : { },
      "AttachmentIdList" : {
        "maxItems" : 1,
        "minItems" : 1,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ArtifactId"
        }
      },
      "ClientToken" : {
        "maxLength" : 500,
        "type" : "string"
      },
      "CompleteAttachmentUploadResponse" : {
        "type" : "object"
      },
      "CreateParticipantConnectionResponse" : {
        "properties" : {
          "Websocket" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Websocket"
            }, {
              "description" : "Creates the participant's websocket connection."
            } ]
          },
          "ConnectionCredentials" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConnectionCredentials"
            }, {
              "description" : "Creates the participant's connection credentials. The authentication token associated with the participant's connection."
            } ]
          }
        },
        "type" : "object"
      },
      "GetTranscriptRequest" : {
        "properties" : {
          "NextToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NextToken"
            }, {
              "description" : "The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results."
            } ]
          },
          "ScanDirection" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ScanDirection"
            }, {
              "description" : "The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. "
            } ]
          },
          "MaxResults" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/MaxResults"
            }, {
              "description" : "The maximum number of results to return in the page. Default: 10. "
            } ]
          },
          "SortOrder" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SortKey"
            }, {
              "description" : "The sort order for the records. Default: DESCENDING."
            } ]
          },
          "ContactId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContactId"
            }, {
              "description" : "The contactId from the current contact chain for which transcript is needed."
            } ]
          },
          "StartPosition" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/StartPosition"
            }, {
              "description" : "A filtering option for where to start."
            } ]
          }
        },
        "type" : "object",
        "title" : "GetTranscriptRequest"
      },
      "ChatItemType" : {
        "type" : "string",
        "enum" : [ "TYPING", "PARTICIPANT_JOINED", "PARTICIPANT_LEFT", "CHAT_ENDED", "TRANSFER_SUCCEEDED", "TRANSFER_FAILED", "MESSAGE", "EVENT", "ATTACHMENT", "CONNECTION_ACK" ]
      },
      "ValidationException" : { },
      "ArtifactStatus" : {
        "type" : "string",
        "enum" : [ "APPROVED", "REJECTED", "IN_PROGRESS" ]
      },
      "NextToken" : {
        "maxLength" : 1000,
        "minLength" : 1,
        "type" : "string"
      },
      "UploadMetadataUrl" : {
        "maxLength" : 2000,
        "minLength" : 1,
        "type" : "string"
      },
      "UploadMetadataSignedHeaders" : {
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/UploadMetadataSignedHeadersValue"
        }
      },
      "SendEventRequest" : {
        "properties" : {
          "ContentType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContentType"
            }, {
              "description" : "<p>The content type of the request. Supported types are:</p> <ul> <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li> <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li> </ul>"
            } ]
          },
          "Content" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatContent"
            }, {
              "description" : "The content of the event to be sent (for example, message text). This is not yet supported."
            } ]
          },
          "ClientToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ClientToken"
            }, {
              "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            } ]
          }
        },
        "type" : "object",
        "title" : "SendEventRequest",
        "required" : [ "ContentType" ]
      },
      "SortKey" : {
        "type" : "string",
        "enum" : [ "DESCENDING", "ASCENDING" ]
      },
      "UploadMetadataSignedHeadersValue" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "ContactId" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "Attachments" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AttachmentItem"
        }
      },
      "StartPosition" : {
        "description" : "A filtering option for where to start. For example, if you sent 100 messages, start with message 50. ",
        "properties" : {
          "AbsoluteTime" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Instant"
            }, {
              "description" : "<p>The time in ISO format where to start.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "MostRecent" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/MostRecent"
            }, {
              "description" : "The start position of the most recent message where you want to start. "
            } ]
          },
          "Id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatItemId"
            }, {
              "description" : "The ID of the message or event where to start. "
            } ]
          }
        },
        "type" : "object"
      },
      "PreSignedAttachmentUrl" : {
        "maxLength" : 2000,
        "minLength" : 1,
        "type" : "string"
      },
      "ChatContentType" : {
        "maxLength" : 100,
        "minLength" : 1,
        "type" : "string"
      },
      "DisplayName" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "UploadMetadata" : {
        "description" : "Fields to be used while uploading the attachment.",
        "properties" : {
          "HeadersToInclude" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UploadMetadataSignedHeaders"
            }, {
              "description" : "The headers to be provided while uploading the file to the URL."
            } ]
          },
          "Url" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UploadMetadataUrl"
            }, {
              "description" : "The pre-signed URL using which file would be downloaded from Amazon S3 by the API caller."
            } ]
          },
          "UrlExpiry" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ISO8601Datetime"
            }, {
              "description" : "The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z."
            } ]
          }
        },
        "type" : "object"
      },
      "ISO8601Datetime" : {
        "type" : "string"
      },
      "GetAttachmentRequest" : {
        "properties" : {
          "AttachmentId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ArtifactId"
            }, {
              "description" : "A unique identifier for the attachment."
            } ]
          }
        },
        "type" : "object",
        "title" : "GetAttachmentRequest",
        "required" : [ "AttachmentId" ]
      },
      "ServiceQuotaExceededException" : { },
      "StartAttachmentUploadResponse" : {
        "properties" : {
          "UploadMetadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UploadMetadata"
            }, {
              "description" : "Fields to be used while uploading the attachment."
            } ]
          },
          "AttachmentId" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ArtifactId"
            }, {
              "description" : "A unique identifier for the attachment."
            } ]
          }
        },
        "type" : "object"
      },
      "DisconnectParticipantRequest" : {
        "properties" : {
          "ClientToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ClientToken"
            }, {
              "description" : "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            } ]
          }
        },
        "type" : "object",
        "title" : "DisconnectParticipantRequest"
      },
      "StartAttachmentUploadRequest" : {
        "properties" : {
          "AttachmentSizeInBytes" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AttachmentSizeInBytes"
            }, {
              "description" : "The size of the attachment in bytes."
            } ]
          },
          "ContentType" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContentType"
            }, {
              "description" : "Describes the MIME file type of the attachment. For a list of supported file types, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>."
            } ]
          },
          "AttachmentName" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AttachmentName"
            }, {
              "description" : "A case-sensitive name of the attachment being uploaded."
            } ]
          },
          "ClientToken" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/NonEmptyClientToken"
            }, {
              "description" : "A unique case sensitive identifier to support idempotency of request."
            } ]
          }
        },
        "type" : "object",
        "title" : "StartAttachmentUploadRequest",
        "required" : [ "ContentType", "AttachmentSizeInBytes", "AttachmentName", "ClientToken" ]
      },
      "Transcript" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Item"
        }
      },
      "GetAttachmentResponse" : {
        "properties" : {
          "Url" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PreSignedAttachmentUrl"
            }, {
              "description" : "The pre-signed URL using which file would be downloaded from Amazon S3 by the API caller."
            } ]
          },
          "UrlExpiry" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ISO8601Datetime"
            }, {
              "description" : "The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z."
            } ]
          }
        },
        "type" : "object"
      },
      "UploadMetadataSignedHeadersKey" : {
        "maxLength" : 128,
        "minLength" : 1,
        "type" : "string"
      },
      "DisconnectParticipantResponse" : {
        "type" : "object"
      },
      "Websocket" : {
        "description" : "The websocket for the participant's connection.",
        "properties" : {
          "ConnectionExpiry" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ISO8601Datetime"
            }, {
              "description" : "<p>The URL expiration timestamp in ISO date format.</p> <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>"
            } ]
          },
          "Url" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PreSignedConnectionUrl"
            }, {
              "description" : "The URL of the websocket."
            } ]
          }
        },
        "type" : "object"
      },
      "PreSignedConnectionUrl" : {
        "maxLength" : 2000,
        "minLength" : 1,
        "type" : "string"
      },
      "InternalServerException" : { },
      "ChatItemId" : {
        "maxLength" : 256,
        "minLength" : 1,
        "type" : "string"
      },
      "ChatContent" : {
        "maxLength" : 1024,
        "minLength" : 1,
        "type" : "string"
      }
    },
    "securitySchemes" : {
      "hmac" : {
        "type" : "apiKey",
        "description" : "Amazon Signature authorization v4",
        "name" : "Authorization",
        "in" : "header",
        "x-amazon-apigateway-authtype" : "awsSigv4"
      }
    }
  },
  "externalDocs" : {
    "description" : "Amazon Web Services documentation",
    "url" : "https://docs.aws.amazon.com/connect/"
  },
  "security" : [ {
    "hmac" : [ ]
  } ]
}