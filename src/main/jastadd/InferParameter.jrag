import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

aspect InferParameter {

    syn Set<String> OpenAPIObject.collectInferredParameters () {
        Set<String> collect = new HashSet<>();

        for( InferredParameter i : getInferredParameters() )
        collect.add(i.getParameter());

        return collect;
    }

    public void OpenAPIObject.generateRequestsWithInferredParameters () throws Exception {
        Set<String> urls = new HashSet<>();

        generateRequests();

        for( PathsObject p : getPathsObjects() )
        p.inferUrl(urls);
    }

    inh Set<String> PathsObject.inferUrl(Set<String> urls);
    eq OpenAPIObject.getPathsObject(int i).inferUrl(Set<String> urls) {
        PathItemObject p = ((PathsObject) _childNode).getPathItemObject();
        String path = getServerObject(0).getUrl();

        if( p.hasGet() )
            urls.add(p.getGet().inferRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getGet().getOperationObject()));
        else if( p.hasPost() )
            urls.add(p.getPost().inferRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getPost().getOperationObject()));

        return urls;
    }

    syn String Get.inferRandomUrl(String pathRef, OperationObject operationObject) {
        try {
        List<String> paths = new ArrayList<>();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();

        if( p.getIn().equals("path") ){
        for( String str : root().collectInferredParameters() ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);
        //System.out.println(p.getName() + " ---------- " + str.substring(0, str.indexOf("?")) + " -------- " + p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))));

        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) ){
        paths.add(pathRef.replace(pathPart, str.substring(str.indexOf("?")+1)));
        //System.out.println(pathRef.replace(pathPart, str.substring(str.indexOf("?")+1)));
        }
        }
        } else if ( p.getIn().equals("query") ){

        if( s.getType().equals("array") ){
        for( String str : root().collectInferredParameters() ){
        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) )
        pathRef = pathRef + "&" + p.getName() + "=" + str.substring(str.indexOf("?")+1);
        }
        paths.add(pathRef.replaceFirst("&", "?"));
        } else {
        for( String str : root().collectInferredParameters() ){
        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) )
        paths.add( pathRef + "?" + p.getName() + "=" + str.substring(str.indexOf("?")+1) );
        }
        }

        }
        System.out.println(paths.size() + " Paths are inferred.");

        for( String path : paths ){
            System.out.println(path);
            //connectGET(path);
        }
        }
        return pathRef;
        }catch (Exception e) {
        return "";
        }
    }

    syn String Post.inferRandomUrl(String pathRef, OperationObject operationObject) {
        try {
        List<String> paths = new ArrayList<>();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();

        if( p.getIn().equals("path") ){
        for( String str : root().collectInferredParameters() ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) )
        paths.add(pathRef.replace(pathPart, str.substring(str.indexOf("?")+1)));
        }
        } else if ( p.getIn().equals("query") ){

        if( s.getType().equals("array") ){
        for( String str : root().collectInferredParameters() ){
        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) )
        pathRef = pathRef + "&" + p.getName() + "=" + str.substring(str.indexOf("?")+1);
        }
        paths.add(pathRef.replaceFirst("&", "?"));
        } else {
        for( String str : root().collectInferredParameters() ){
        if( p.getName().equalsIgnoreCase(str.substring(0, str.indexOf("?"))) )
        paths.add( pathRef + "?" + p.getName() + "=" + str.substring(str.indexOf("?")+1) );
        }
        }

        }

        for( String path : paths ){
            System.out.println(path);
        //connectPOST(path);
        }

        }
        return pathRef;
        }catch (Exception e) {
        return "";
    }
    }

    public void OperationObject.writeDictionary (SchemaOb schema, String resp) throws Exception{
        String schemaName = schema.getClass().getName();
        ObjectMapper mapper = new ObjectMapper();
        JsonNode respNode = mapper.readTree(resp);
        String value;

        if (schemaName.substring(schemaName.lastIndexOf(".") + 1).equals("SchemaReference")) {
        for (PropertyItem p : schema.schemaObject().getPropertyItems()) {
        String infName = ((SchemaReference) schema).getRef().substring(((SchemaReference) schema).getRef().lastIndexOf("/") + 1) + p.getName();
        value = respNode.get(p.getName()).toString();
        value = value.startsWith("\"") && value.endsWith("\"") ? value.substring(1, value.length()-1) : value;

        root().addInferredParameter(new InferredParameter(infName + "?" + value));
        root().addInferredParameter(new InferredParameter(p.getName() + "?" + value));
        }
        } else {
        for (PropertyItem p : schema.schemaObject().getPropertyItems()){
            value = respNode.get(p.getName()).toString();
            value = value.startsWith("\"") && value.endsWith("\"") ? value.substring(1, value.length()-1) : value;

            root().addInferredParameter(new InferredParameter(p.getName() + "?" + respNode.get(p.getName()).textValue()));
        }
        }

    }

    public void OperationObject.writeDictionaryWithArray (SchemaOb schema, String resp) throws Exception{
        ObjectMapper mapper = new ObjectMapper();
        ArrayNode respNode = ((ArrayNode) mapper.readTree(resp));
        Iterator<JsonNode> props = respNode.elements();

        while( props.hasNext() )
        writeDictionary(schema.schemaObject().getItemsSchema().getSchemaOb(), props.next().toString());

    }

    public void Get.connectGET (String path) throws Exception{
        URL url = new URL(path);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty("User-Agent", "Mozilla/5.0"); // add request header

        con.setRequestMethod("GET"); // optional default is GET

        int responseCode = con.getResponseCode();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        // print result
        System.out.println("Inferred path : " + path);
        System.out.println("HTTP status code (GET) : " + responseCode);
    }

    public void Post.connectPOST (String path) throws Exception{
        URL url = new URL(path);
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setRequestProperty("User-Agent", "Mozilla/5.0"); // add request header
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        // print result
        System.out.println("Inferred path : " + path);
        System.out.println("HTTP status code (POST) : " + responseCode);
    }
}