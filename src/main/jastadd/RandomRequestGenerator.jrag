import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import java.util.Random;
import java.util.stream.IntStream;

aspect RandomRequestGenerator {

    public Map<ResponseObject, String> OpenAPIObject.generateRequests() throws Exception {
        Set<String> urls = new HashSet<>();
        Map<ResponseObject, String> responses = new HashMap<>();

        for( PathsObject p : this.getPathsObjects() )
            p.generateUrl(responses);

        System.out.println(responses.size());
        /*
        for( String path : urls ){
        if( path.endsWith("GET") ){
        System.out.println(this.getServerObject(0).getUrl() + path.substring(0, path.length()-3));


        URL url = new URL(this.getServerObject(0).getUrl() + path.substring(0, path.length()-3));
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("GET"); // HTTP GET
        con.setDoOutput(true); // GET

        int responseCode = con.getResponseCode();
        //System.out.println("HTTP status code (GET) : " + responseCode);
        if( responseCode < 300 && responseCode >= 200 ){
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        //System.out.println("HTTP body : " + response.toString());
        responses.add(response.toString());
        }
        } else if( path.endsWith("POST") ) {
        //System.out.println(this.getServerObject(0).getUrl() + path.substring(0, path.length()-4));


        URL url = new URL(this.getServerObject(0).getUrl() + path.substring(0, path.length()-4));
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();
        //System.out.println("HTTP status code (POST) : " + responseCode);

        if( responseCode < 300 && responseCode >= 200 ){
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();


        //System.out.println("HTTP body : " + response.toString());
        responses.add(response.toString());
        }
        }

        }*/

        //for( String s : responses )
        //    System.out.println("Response : " + s.toString());
        return responses;
    }

    inh Map<ResponseObject, String> PathsObject.generateUrl(Map<ResponseObject, String> responses);
    eq OpenAPIObject.getPathsObject(int i).generateUrl(Map<ResponseObject, String> responses) {
        PathItemObject p = ((PathsObject) _childNode).getPathItemOb().pathItemObject();
        String path = getServerObject(0).getUrl();

        if( p.hasGet() )
        p.getGet().generateRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getGet().getOperationObject(), responses);
        //urls.add(p.getGet().generateRandomUrl(((PathsObject) _childNode).getRef(), p.getGet().getOperationObject()));
        else if( p.hasPost() )
        p.getPost().generateRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getPost().getOperationObject(), responses);
        //urls.add(p.getPost().generateRandomUrl(((PathsObject) _childNode).getRef(), p.getPost().getOperationObject()));

        return responses;
        }
        syn String OperationOb.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses);
/*
        eq Get.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses) {
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?") ;
        System.out.println(pathRef);
        URL url = new URL(pathRef);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("GET"); // HTTP GET
        con.setDoOutput(true); // GET

        int responseCode = con.getResponseCode();

        // print result
        System.out.println("HTTP status code (GET) : " + responseCode);
        }
public void Post.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses) throws Exception{
        Random rand = new Random();

        System.out.println(1);
        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?") ;
        URL url = new URL(pathRef);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();

        // print result
        System.out.println("HTTP status code (POST) : " + responseCode);
        }

 */
    eq Get.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses) {
        try {
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?") ;
        System.out.println("Generated path : " + pathRef);

        URL url = new URL(pathRef);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("GET"); // optional default is GET

        int responseCode = con.getResponseCode();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        // print result
        System.out.println("HTTP status code (GET) : " + responseCode);
        for( ResponseTuple t : operationObject.getResponseTuples() ){
        if( t.getKey().equals("200") && responseCode == 200 ) {
        System.out.println("Response successfully saved!");
        responses.put(t.getResponseOb().responseObject(), response.toString());
        }
        }
        return pathRef;
        }catch (Exception e) {
        return "";
        }
        }
        eq Post.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        Random rand = new Random();

        try{
        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?");
        System.out.println("Generated path : " + pathRef);

        URL url = new URL(pathRef);
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        // print result
        System.out.println("HTTP status code (POST) : " + responseCode);
        for( ResponseTuple t : operationObject.getResponseTuples() ){
        if( t.getKey().equals("200") && responseCode == 200 ) {
        System.out.println("Response successfully saved!");
        responses.put(t.getResponseOb().responseObject(), response.toString());
        } else if ( t.getKey().equals("default") && responseCode == 200 ){
        System.out.println("Response successfully saved!");
        responses.put(t.getResponseOb().responseObject(), response.toString());
        }
        }
        return pathRef;} catch (Exception e) {
            return "";
        }
        }

        eq Put.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq Delete.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq Options.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq Head.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq Patch.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq Trace.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }
        eq OperationObject.generateRandomUrl(String pathRef, OperationObject operationObject, Map<ResponseObject, String> responses){
        return "";
        }

    public String OperationObject.generateRandomString(Random rand, JastAddList<EnumObj> objs) {
        if( objs.getNumChild() != 0 )
        return objs.getChild(rand.nextInt(objs.getNumChild())).getEnumOb().toString();

        return rand
        .ints(97, 123)
        .limit(10)
        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
        .toString();
    }

    public String OperationObject.generateRandomInt(Random rand, int minimum, int maximum){
        if( minimum > -1 && maximum > 0 )
        return String.valueOf(rand.nextInt(minimum+maximum)-minimum);
        else if( minimum > -1 )
        return String.valueOf(rand.nextInt()+minimum);
        else if( maximum > 0 )
        return String.valueOf(rand.nextInt(maximum));
        return String.valueOf(rand.nextInt());
        }
}