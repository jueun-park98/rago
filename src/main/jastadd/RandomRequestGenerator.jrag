import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import java.util.Random;
import java.util.stream.IntStream;

aspect RandomRequestGenerator {

    /*
    syn String PathObject.getRequestURI(Ramdom r);
    coll Set OpenAPI.requestURIs(Random r);
    uncache PathObject.getRequestURI();
    syn Set OpenAPI.requestURIs();

     */

    //coll Set<String> PathsObject.randomUrls() [new HashSet<>()];
    //    MappingTuple contributes this when generateRequests() to OpenAPIObject.getRandomUrl();

    //inh MappingTuple

    public String OpenAPIObject.generateRequests() throws Exception {
        String baseUrl = this.getServerObject(0).getUrl();

        for( PathsObject p : this.getPathsObjects() )
        p.sendRandomRequests(baseUrl);
        return "";
    }

    public Set<String> PathsObject.sendRandomRequests(String baseUrl) throws Exception {
        Set<String> generatedUrls = new HashSet<>();
        if( this.getPathItemOb().pathItemObject().hasGet() ){
        IntStream.range(0, 1).forEach( i -> {
        try {
        generatedUrls.add(this.getPathItemOb().pathItemObject().getGet().generateRandomUrl(this.getRef(), this.getPathItemOb().pathItemObject().getGet().getOperationObject()));
        } catch (Exception e) {
        e.printStackTrace();
        }
        });
        }
        if( this.getPathItemOb().pathItemObject().hasPost() ){
        IntStream.range(0, 1).forEach( i -> {
        try {
        generatedUrls.add(this.getPathItemOb().pathItemObject().getPost().generateRandomUrl(this.getRef(), this.getPathItemOb().pathItemObject().getPost().getOperationObject()));
        } catch (Exception e) {
        e.printStackTrace();
        }
        });}

        return generatedUrls;
    }

    syn String OperationOb.generateRandomUrl(String pathRef, OperationObject operationObject);
    eq Get.generateRandomUrl(String pathRef, OperationObject operationObject) {
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?");
        System.out.println(pathRef);

            /*
            URL url = new URL(pathRef);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("GET"); // HTTP GET
            con.setDoOutput(true); // GET

            int responseCode = con.getResponseCode();

            // print result
            System.out.println("HTTP status code (GET) : " + responseCode);*/
        return pathRef;
        }
        eq Post.generateRandomUrl(String pathRef, OperationObject operationObject){
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?");
        System.out.println(pathRef);

            /*
            URL url = new URL(pathRef);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("POST"); // HTTP POST
            con.setDoOutput(true); // POST

            int responseCode = con.getResponseCode();

            // print result
            System.out.println("HTTP status code (POST) : " + responseCode);*/
        return pathRef;
        }

        eq Put.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Delete.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Options.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Head.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Patch.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Trace.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq OperationObject.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }

/*
public void OperationObject.sendRandomGET(String targetUrl) throws Exception {
        Random rand = new Random();

        for( ParameterOb o : this.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = targetUrl.substring(targetUrl.indexOf("{") ,targetUrl.indexOf("}") + 1);

        if( s.getType().equals("string") )
        targetUrl = targetUrl.replace(pathPart, this.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        targetUrl = targetUrl.replace(pathPart, this.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        targetUrl=rand.nextDouble()< 0.5?targetUrl+"&"+p.getName()+"="+e.getEnumOb():targetUrl;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        targetUrl = targetUrl.replaceFirst("&", "?");
        System.out.println(targetUrl);

        URL url = new URL(targetUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("GET"); // optional default is GET
        int responseCode = con.getResponseCode();

        // print result
        System.out.println("HTTP status code (GET) : " + responseCode);
    }

    public void OperationObject.sendRandomPOST(String targetUrl) throws Exception {
        Random rand = new Random();

        for( ParameterOb o : this.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = targetUrl.substring(targetUrl.indexOf("{") ,targetUrl.indexOf("}") + 1);

        if( s.getType().equals("string") )
        targetUrl = targetUrl.replace(pathPart, this.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        targetUrl = targetUrl.replace(pathPart, this.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        targetUrl=rand.nextDouble()< 0.5?targetUrl+"&"+p.getName()+"="+e.getEnumOb():targetUrl;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        targetUrl = targetUrl + "&" + p.getName() + "=" + this.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        targetUrl = targetUrl.replaceFirst("&", "?");
        System.out.println(targetUrl);

        URL url = new URL(targetUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();

        // print result
        System.out.println("HTTP status code (POST) : " + responseCode);
    }

 */

    public String OperationObject.generateRandomString(Random rand, JastAddList<EnumObj> objs) {
        if( objs.getNumChild() != 0 )
        return objs.getChild(rand.nextInt(objs.getNumChild())).getEnumOb().toString();


        return rand
        .ints(97, 123)
        .limit(10)
        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
        .toString();
    }

    public String OperationObject.generateRandomInt(Random rand, int minimum, int maximum){
        if( minimum > -1 && maximum > 0 )
        return String.valueOf(rand.nextInt(minimum+maximum)-minimum);
        else if( minimum > -1 )
        return String.valueOf(rand.nextInt()+minimum);
        else if( maximum > 0 )
        return String.valueOf(rand.nextInt(maximum));
        return String.valueOf(rand.nextInt());
        }
}