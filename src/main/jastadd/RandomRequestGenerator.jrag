aspect RandomRequestGenerator{

  syn String ParameterObject.randomPathParameter(String pathRef){
    Random rand = new Random();
    SchemaObject s = getSchema().schemaObject();
    String pathPart = pathRef.substring(pathRef.indexOf("{"), pathRef.indexOf("}") + 1);

    if (s.getType().equals("string"))
      pathRef = pathRef.replace(pathPart, generateRandomString(rand, s.getEList()));
    else if (s.getType().equals("integer"))
      pathRef = pathRef.replace(pathPart, generateRandomInt(rand,
              -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
              10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
      ));
    return pathRef;
  }

  syn String ParameterObject.randomQueryParameter(String pathRef){
    Random rand = new Random();
    SchemaObject s = getSchema().schemaObject();

    if (s.getType().equals("string"))
      pathRef = pathRef + "?" + getName() + "=" + generateRandomString(rand, s.getEList());
    else if (s.getType().equals("integer"))
      pathRef = pathRef + "?" + getName() + "=" + generateRandomInt(rand,
              -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
              10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
    else if (s.getType().equals("array")) {
      if (s.getI().getSchema().schemaObject().getType().equals("string")) {
        for (EnumObj e : s.getI().getSchema().schemaObject().getEList())
          pathRef = rand.nextDouble() < 0.5 ? pathRef + "&" + getName() + "=" + e.getEnumOb() : pathRef;
      } else if (s.getI().getSchema().schemaObject().getType().equals("integer")) {
        for (int i = 0; i < 5; i++)
          pathRef = pathRef + "&" + getName() + "=" + generateRandomInt(rand,
                  -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
                  10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
      }
      pathRef = pathRef.replaceFirst("&", "?");
    }
    return pathRef;
  }

  syn List<String> OpenAPIObject.generateRequests(){
    List<String> urls = new ArrayList<>();
    try {
      for (PathsObject p : getPList())
        urls.addAll(p.generateUrl());
    } catch (Exception e) {
      System.out.println(e.toString());
      return null;
    }
    return urls;
  }

  inh List<String> PathsObject.generateUrl();
  eq OpenAPIObject.getP(int i).generateUrl(){
    List<String> urls = new ArrayList<>();
    try {
      PathItemObject p = getP(i).getP().pathItemObject();
      String path = getServ(0).getUrl();

      if (p.hasG())
        urls.add(p.getG().generateRandomUrl(path + getP(i).getRef()));
      else if (p.hasPostOb())
        urls.add(p.getPostOb().generateRandomUrl(path + getP(i).getRef()));

      return urls;
    } catch (Exception e) {
      System.out.println(e.toString());
      return null;
    }
  }

  syn String Get.generateRandomUrl(String pathRef){
    try {
      for (ParameterOb o : getO().getPList()) {
        ParameterObject p = o.parameterObject();
        if (p.getIn().equals("path"))
          pathRef = p.randomPathParameter(pathRef);
        else if (p.getIn().equals("query"))
          pathRef = p.randomQueryParameter(pathRef);
      }
      System.out.println("Generated path : " + pathRef);
      return pathRef;
    } catch (Exception e) {
      System.out.println(e.toString());
      return null;
    }
  }
  syn String Post.generateRandomUrl(String pathRef){
    try {
      for (ParameterOb o : getO().getPList()) {
        ParameterObject p = o.parameterObject();
        if (p.getIn().equals("path"))
          pathRef = p.randomPathParameter(pathRef);
        else if (p.getIn().equals("query"))
          pathRef = p.randomQueryParameter(pathRef);
      }
      System.out.println("Generated path : " + pathRef);
      return pathRef;
    } catch (Exception e) {
      System.out.println(e.toString());
      return null;
    }
  }

  syn String ParameterObject.generateRandomString(Random rand,JastAddList<EnumObj> objs){
    if (objs.getNumChild() != 0)
      return objs.getChild(rand.nextInt(objs.getNumChild())).getEnumOb().toString();

    return rand
        .ints(97, 123)
        .limit(10)
        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
        .toString();
  }

  syn String ParameterObject.generateRandomInt(Random rand,int minimum,int maximum){
    if (minimum > -1 && maximum > 0)
      return String.valueOf(rand.nextInt(minimum + maximum) - minimum);
    else if (minimum > -1)
      return String.valueOf(rand.nextInt() + minimum);
    else if (maximum > 0)
      return String.valueOf(rand.nextInt(maximum));
    return String.valueOf(rand.nextInt());
  }
}