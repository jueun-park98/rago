import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import java.util.Random;
import java.util.stream.IntStream;

aspect RandomRequestGenerator {

    /*
    syn String PathObject.getRequestURI(Ramdom r);
    coll Set OpenAPI.requestURIs(Random r);
    uncache PathObject.getRequestURI();
    syn Set OpenAPI.requestURIs();

     */

    public String OpenAPIObject.generateRequests() throws Exception {
        Set<String> urls = new HashSet<>();

        for( PathsObject p : this.getPathsObjects() )
        p.generateUrl(urls);

        for( String path : urls ){
        if( path.endsWith("GET") ){
        System.out.println(this.getServerObject(0).getUrl() + path.substring(0, path.length()-3));

        /* */
        URL url = new URL(this.getServerObject(0).getUrl() + path.substring(0, path.length()-3));
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("GET"); // HTTP GET
        con.setDoOutput(true); // GET

        int responseCode = con.getResponseCode();
        System.out.println("HTTP status code (GET) : " + responseCode);
        if( responseCode < 300 ){
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();

        System.out.println("HTTP body : " + response.toString());
        }/* */
        } else if( path.endsWith("POST") ) {
        System.out.println(this.getServerObject(0).getUrl() + path.substring(0, path.length()-4));

        /* */
        URL url = new URL(this.getServerObject(0).getUrl() + path.substring(0, path.length()-4));
        HttpURLConnection con = (HttpURLConnection) url.openConnection();

        con.setRequestMethod("POST"); // HTTP POST
        con.setDoOutput(true); // POST

        int responseCode = con.getResponseCode();
        System.out.println("HTTP status code (POST) : " + responseCode);

        if( responseCode < 300 ){
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
        }
        in.close();


        System.out.println("HTTP body : " + response.toString());
        }/* */
        }

        }

        return "";
    }

    inh Set<String> PathsObject.generateUrl(Set<String> urls);
    eq OpenAPIObject.getPathsObject(int i).generateUrl(Set<String> urls) {
        PathItemObject p = ((PathsObject) _childNode).getPathItemOb().pathItemObject();
        if( p.hasGet() )
        urls.add(p.getGet().generateRandomUrl(((PathsObject) _childNode).getRef(), p.getGet().getOperationObject()));
        else if( p.hasPost() )
        urls.add(p.getPost().generateRandomUrl(((PathsObject) _childNode).getRef(), p.getPost().getOperationObject()));

        return urls;
        }

        /*
    public Set<String> PathsObject.sendRandomRequests(Set<String> generatedUrls) throws Exception {
        if( this.getPathItemOb().pathItemObject().hasGet() ){
        IntStream.range(0, 1).forEach( i -> {
        try {
        generatedUrls.add(this.getPathItemOb().pathItemObject().getGet().generateRandomUrl(this.getRef(), this.getPathItemOb().pathItemObject().getGet().getOperationObject()));
        } catch (Exception e) {
        e.printStackTrace();
        }
        });
        }
        if( this.getPathItemOb().pathItemObject().hasPost() ){
        IntStream.range(0, 1).forEach( i -> {
        try {
        generatedUrls.add(this.getPathItemOb().pathItemObject().getPost().generateRandomUrl(this.getRef(), this.getPathItemOb().pathItemObject().getPost().getOperationObject()));
        } catch (Exception e) {
        e.printStackTrace();
        }
        });}

        return generatedUrls;
    }
         */

    syn String OperationOb.generateRandomUrl(String pathRef, OperationObject operationObject);
    eq Get.generateRandomUrl(String pathRef, OperationObject operationObject) {
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?") + "GET";

            /*
            URL url = new URL(pathRef);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("GET"); // HTTP GET
            con.setDoOutput(true); // GET

            int responseCode = con.getResponseCode();

            // print result
            System.out.println("HTTP status code (GET) : " + responseCode);*/
        return pathRef;
        }
        eq Post.generateRandomUrl(String pathRef, OperationObject operationObject){
        Random rand = new Random();

        for( ParameterOb o : operationObject.getParameterObs() ){
        ParameterObject p = o.parameterObject();
        SchemaObject s = p.getSchemaOb().schemaObject();
        if( p.getIn().equals("path") ){
        String pathPart = pathRef.substring(pathRef.indexOf("{") ,pathRef.indexOf("}") + 1);

        if( s.getType().equals("string") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomString(rand, s.getEnumObjs()));
        else if( s.getType().equals("integer") )
        pathRef = pathRef.replace(pathPart, operationObject.generateRandomInt( rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10 // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        ));
        }
        else if( p.getIn().equals("query") ){

        if( s.getType().equals("string") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomString(rand, s.getEnumObjs());
        else if( s.getType().equals("integer") )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        else if( s.getType().equals("array") ){
        if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("string") ){
        for( EnumObj e : s.getItemsSchema().getSchemaOb().schemaObject().getEnumObjs() )
        pathRef=rand.nextDouble()< 0.5?pathRef+"&"+p.getName()+"="+e.getEnumOb():pathRef;
        }
        else if( s.getItemsSchema().getSchemaOb().schemaObject().getType().equals("integer") ){
        for( int i = 0 ; i < 5 ; i++ )
        pathRef = pathRef + "&" + p.getName() + "=" + operationObject.generateRandomInt(  rand,
        -1, // s.getMinimum() != null ? s.getMinimum().intValue() : -1,
        10); // s.getMaximum() != null ? s.getMaximum().intValue() : -1
        }

        }
        }
        }
        pathRef = pathRef.replaceFirst("&", "?") + "POST";

/*
            URL url = new URL(pathRef);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("POST"); // HTTP POST
            con.setDoOutput(true); // POST

            int responseCode = con.getResponseCode();

            // print result
            System.out.println("HTTP status code (POST) : " + responseCode);*/
        return pathRef;
        }

        eq Put.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Delete.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Options.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Head.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Patch.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq Trace.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }
        eq OperationObject.generateRandomUrl(String pathRef, OperationObject operationObject){
        return "";
        }

    public String OperationObject.generateRandomString(Random rand, JastAddList<EnumObj> objs) {
        if( objs.getNumChild() != 0 )
        return objs.getChild(rand.nextInt(objs.getNumChild())).getEnumOb().toString();

        return rand
        .ints(97, 123)
        .limit(10)
        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
        .toString();
    }

    public String OperationObject.generateRandomInt(Random rand, int minimum, int maximum){
        if( minimum > -1 && maximum > 0 )
        return String.valueOf(rand.nextInt(minimum+maximum)-minimum);
        else if( minimum > -1 )
        return String.valueOf(rand.nextInt()+minimum);
        else if( maximum > 0 )
        return String.valueOf(rand.nextInt(maximum));
        return String.valueOf(rand.nextInt());
        }
}