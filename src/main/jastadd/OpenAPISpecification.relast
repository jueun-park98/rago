//OpenAPI Object
OpenAPIObject ::= <OpenAPI> <JsonSchemaDialect> [i:InfoObject] s:ServerObject* p:PathsObject* w:Webhook* [c:ComponentsObject] sr:SecurityRequirementObject* t:TagObject* [e:ExternalDocObject] ex:Extension* ;
Webhook ::= <Key> p:PathItemOb;

//Info Object
InfoObject ::= <Title> <Summary> <Description> <TermsOfService> <Version> [c:ContactObject] [l:LicenseObject] ex:Extension*;

//Contact Object
ContactObject ::= <Name> <Url> <Email> ex:Extension*;

//License Object
LicenseObject ::= <Name> <Identifier> <Url> ex:Extension*;

//Server Object
ServerObject ::= <Url> <Description> st:ServerVariablesTuple* ex:Extension*;
ServerVariablesTuple ::= <Name> s:ServerVariableObject;

//Server Variable Object
ServerVariableObject ::= <Default> <Description> e:Enum* ex:Extension*;
Enum ::= <EnumValue>;

//Components Object
ComponentsObject ::= s:SchemaTuple* r:ResponseTuple* p:ParameterTuple* e:ExampleTuple* rb:RequestBodyTuple* h:HeaderTuple* sc:SecuritySchemeObject* l:LinkTuple* c:CallbackTuple* pi:PathItemTuple* ex:Extension*;

SchemaTuple ::= <Key> o:SchemaOb;
ResponseTuple ::= <Key> o:ResponseOb;
ParameterTuple ::= <Key> o:ParameterOb;
ExampleTuple ::= <Key> o:ExampleObject;
RequestBodyTuple ::= <Key> o:RequestBodyOb;
HeaderTuple ::= <Key> o:HeaderOb;
SecuritySchemeTuple ::= <Key> o:SecuritySchemeOb;
LinkTuple ::= <Key> o:LinkOb;
CallbackTuple ::= <Key> o:CallbackOb;
PathItemTuple ::= <Key> o:PathItemOb;

//Paths Object
PathsObject ::= <Ref> p:PathItemOb;

//Path Item Object
abstract PathItemOb;
PathItemReference : PathItemOb ::= <Ref> <Summary> <Description>;
rel PathItemReference.r -> PathItemObject;
PathItemObject : PathItemOb ::= <Ref> <Summary> <Description> [g:Get] [put:Put] [post:Post] [d:Delete] [o:Options] [h:Head] [p:Patch] [t:Trace] s:ServerObject* po:ParameterOb* ex:Extension*;

//Operation Object
OperationObject ::= <Summary> <Description> <OperationID> <DeprecatedBoolean:Boolean> t:Tag* [ed:ExternalDocObject] p:ParameterOb* [rb:RequestBodyOb] r:ResponsesObject c:CallbackTuple* sr:SecurityRequirementObject* s:ServerObject* ex:Extension*;

Get ::= o:OperationObject;
Put ::= o:OperationObject;
Post ::= o:OperationObject;
Delete ::= o:OperationObject;
Options ::= o:OperationObject;
Head ::= o:OperationObject;
Patch ::= o:OperationObject;
Trace ::= o:OperationObject;
Tag ::= <Tag>;

//External Documentation Object
ExternalDocObject ::= <Description> <Url> ex:Extension*;

//Parameter Object
abstract ParameterOb;
ParameterReference : ParameterOb ::= <Ref> <Summary> <Description>;
rel ParameterReference.p -> ParameterObject;
ParameterObject : ParameterOb ::= <Name> <In> <Description> <Required:Boolean> <DeprecatedBoolean:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> <Example:Object> [s:SchemaOb] e:ExampleTuple* c:ContentTuple* ex:Extension*;
ContentTuple ::= <Key> m:MediaTypeObject;

//Request Body Object
abstract RequestBodyOb;
RequestBodyReference : RequestBodyOb ::= <Ref> <Summary> <Description>;
rel RequestBodyReference.r -> RequestBodyObject;
RequestBodyObject : RequestBodyOb ::= <Description> <Required:Boolean> c:ContentTuple* ex:Extension*;

//Media Type Object
MediaTypeObject ::= <Example:Object> [s:SchemaOb] e:ExampleTuple* en:EncodingTuple* ex:Extension*;
EncodingTuple ::= <Key> e:EncodingTuple;

//Encoding Object
EncodingObject ::= <ContentType> <Style> <Explode:Boolean> <AllowReserved:Boolean> h:HeaderTuple* ex:Extension*;

//Responses Object (ResponseTuple is used for HTTPStatusCode)
ResponsesObject ::= r:ResponseTuple*;

//Response Object
abstract ResponseOb;
ResponseReference : ResponseOb ::= <Ref> <Summary> <Description>;
rel ResponseReference.r -> ResponseObject;
ResponseObject : ResponseOb ::= <Description> h:HeaderTuple* c:ContentTuple* l:LinkTuple* ex:Extension*;

//Callback Object
abstract CallbackOb;
CallbackReference : CallbackOb ::= <Ref> <Summary> <Description>;
rel CallbackReference.r -> CallbackObject;
CallbackObject : CallbackOb ::= e:Expression* ex:Extension*;

Extension ::= <Key> <Value:Object>;
Expression ::= <Name> p:PathItemOb;

//Example Object
ExampleObject ::= <Summary> <Description> <Value:Object> <ExternalValue> ex:Extension*;

//Link Object
abstract LinkOb;
LinkReference : LinkOb ::= <Ref> <Summary> <Description>;
rel LinkReference.r -> LinkObject;
LinkObject : LinkOb ::= <OperationRef> <OperationID> <LinkRequestBody:Object> <Description> l:LinkParameterTuple* [s:ServerObject] ex:Extension*;

LinkParameterTuple ::= <Key> <Value>;

//Header Object
abstract HeaderOb;
HeaderReference : HeaderOb ::= <Ref> <Summary> <Description>;
rel HeaderReference.r -> HeaderObject;
HeaderObject : HeaderOb ::= <Description> <Required:Boolean> <DeprecatedBoolean:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> <Example:Object> [s:SchemaOb] e:ExampleTuple* c:ContentTuple* ex:Extension*;

//Tag Object
TagObject ::= <Name> <Description> [e:ExternalDocObject] ex:Extension*;

//Schema Object
abstract SchemaOb;
SchemaReference : SchemaOb ::= <Ref> <Summary> <Description>;
rel SchemaReference.r -> SchemaObject;
SchemaObject : SchemaOb ::= <AdditionalProperties:Object> <DefaultValue:Object> <Description> <DeprecatedBoolean:Boolean> <ExclusiveMaximum:Number> <ExclusiveMinimum:Number> <Format> <Maximum:Number> <Minimum:Number> <MaxItems:Integer> <MinItems:Integer> <MaxLength:Integer> <MinLength:Integer> <MaxProperties:Integer> <MinProperties:Integer> <MultipleOf:Number> <Pattern> <ReadOnly:Boolean> <WriteOnly:Boolean> <Type> <Title> <UniqueItems:Boolean> <MaxContains:Integer> <MinContains:Integer> <DependentRequired:Object> <DependentSchema:SchemaOb> <Const:Object> [d:DiscriminatorObject] e:EnumObj* el:ExampleElement* [ext:ExternalDocObject] [i:ItemsSchema] [n:NotSchema] p:PropertyItem* r:RequiredField* all:AllOfSchema* any:AnyOfSchema* one:OneOfSchema* t:TypeArray* [x:XmlObject] ex:Extension*;

ItemsSchema ::= s:SchemaOb;
NotSchema ::= s:SchemaOb;
PropertyItem ::= <Name> s:SchemaOb;
AllOfSchema ::= s:SchemaOb;
AnyOfSchema ::= s:SchemaOb;
OneOfSchema ::= s:SchemaOb;
ExampleElement ::= <Example:Object>;
TypeArray ::= <TypeElements:Object>;
EnumObj ::= <EnumOb:Object>;
RequiredField ::= <Value>;

//Discriminator Object
DiscriminatorObject ::= <PropertyName> m:MappingTuple* ex:Extension*;
MappingTuple ::= <Key> <Value>;

//XML Object
XmlObject ::= <Name> <Namespace> <Prefix> <Attribute:Boolean> <Wrapped:Boolean> ex:Extension*;

//Security Scheme Object
abstract SecuritySchemeOb;
SecuritySchemeReference : SecuritySchemeOb ::= <Ref> <Summary> <Description>;
rel SecuritySchemeReference.r -> SecuritySchemeObject;
SecuritySchemeObject : SecuritySchemeOb ::= <Type> <Description> <Name> <In> <Scheme> <BearerFormat> <OpenIdConnectUrl> [o:OAuthFlowsObject] ex:Extension*;

//OAuth Flows Object
OAuthFlowsObject ::= [i:Implicit] [p:Password] [c:ClientCredentials] [a:AuthorizationCode] ex:Extension*;

Implicit ::= o:OAuthFlowObject;
Password ::= o:OAuthFlowObject;
ClientCredentials ::= o:OAuthFlowObject;
AuthorizationCode ::= o:OAuthFlowObject;

//OAuth Flow Object
OAuthFlowObject ::= <AuthorizationUrl> <TokenUrl> <RefreshUrl> s:ScopesTuple* ex:Extension*;
ScopesTuple ::= <ScopesKey> <ScopesValue>;

//Security Requirement Object
SecurityRequirementObject ::= t:SecurityRequirementTuple*;

SecurityRequirementTuple ::= <Name> v:SecurityRequirementValue*;
SecurityRequirementValue ::= <Value>;