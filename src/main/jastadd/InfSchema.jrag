aspect InfSchema {

    // syn Set<SchemaObject> ResponseObject.schemaObject () = for( ContentTuple c : getContentTuples() ) add.SchemaObject();


        /*
    coll Set<SchemaOb> OpenAPIObject.collectSchemaObs() [new HashSet<>()] root OpenAPIObject;
    SchemaOb contributes this
      when schemaObject()
      to OpenAPIObject.collectSchemaObs();
    */

    inh OpenAPIObject ASTNode.root();
    eq OpenAPIObject.getChild().root() = this;

    coll Set<SchemaTuple> OpenAPIObject.schemaTuples() [new HashSet<>()] root OpenAPIObject;
        SchemaTuple contributes this
        to OpenAPIObject.schemaTuples();

    inh Set<String> PathsObject.inferUrl(Set<String> urls);
    eq OpenAPIObject.getPathsObject(int i).inferUrl(Set<String> urls) {
        PathItemObject p = ((PathsObject) _childNode).getPathItemOb().pathItemObject();
        String path = ((OpenAPIObject) getParent()).getServerObject(0).getUrl();

        if( p.hasGet() )
            urls.add(p.getGet().inferRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getGet().getOperationObject()));
        else if( p.hasPost() )
            urls.add(p.getPost().inferRandomUrl(path + ((PathsObject) _childNode).getRef(), p.getPost().getOperationObject()));

        return urls;
    }

    syn String OperationOb.inferRandomUrl(String pathRef, OperationObject operationObject);
    eq Get.inferRandomUrl(String pathRef, OperationObject operationObject) {

        return "";
    }
    eq Post.inferRandomUrl(String pathRef, OperationObject operationObject) {

        return "";
    }
    eq Put.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq Delete.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq Options.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq Head.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq Patch.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq Trace.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }
    eq OperationObject.inferRandomUrl(String pathRef, OperationObject operationObject){
        return "";
    }

    syn Map<String, List<String>> OperationObject.addDict (Map<ResponseObject, String> responses){
        Map<String, List<String>> map = new HashMap<>();

        return map;
    }
}