import java.util.*;
aspect ReverseParser {

  public static OpenAPI OpenAPIObject.reverseOpenAPI (OpenAPIObject openapi){
        OpenAPI api = new OpenAPI();

        if (!openapi.getOpenAPI().isEmpty())
        api.setOpenapi(openapi.getOpenAPI());
        if (openapi.hasI())
        api.setInfo(InfoObject.reverseInfo(openapi.get_impl_i()));
        if (openapi.get_impl_s().size() != 0) {
        List<Server> servers = new ArrayList<>();
        for (ServerObject s : openapi.get_impl_s())
        servers.add(ServerObject.reverseServer(s));
        api.setServers(servers);
        }
        if (openapi.get_impl_p().size() != 0) {
        Paths paths = new Paths();
        for (PathsObject p : openapi.getPList()){
        //if (p.get_impl_p() instanceof PathItemObject)
        //paths.addPathItem(p.getRef(), PathIte)
        }
        api.setPaths(paths);
        }
        if (openapi.hasC())
        api.setComponents(ComponentsObject.reverseComponents(openapi.get_impl_c()));
        if (openapi.getSrList().size() != 0) {
        List<io.swagger.v3.oas.models.security.SecurityRequirement> securityRequirements = new ArrayList<>();
        for (SecurityRequirementObject s : openapi.getSrList())
        securityRequirements.add(SecurityRequirementObject.reverseSecurityRequirement(s));
        api.setSecurity(securityRequirements);
        }
        if (openapi.getTList().size() != 0) {
        List<io.swagger.v3.oas.models.tags.Tag> tags = new ArrayList<>();
        for (TagObject t : openapi.getTList())
        tags.add(TagObject.reverseTag(t));
        api.setTags(tags);
        }
        if (openapi.hasE())
        api.setExternalDocs(ExternalDocObject.reverseExternalDocs(openapi.getE()));
        if (openapi.getExList().size() != 0) {
        Map<String, Object> extensionMap = new HashMap<>();
        for (Extension e : openapi.getExList())
        extensionMap.put(e.getKey(), e.getValue());
        api.setExtensions(extensionMap);
        }

        /* 3.1.0 features
    if (openapi.getWebhook != null) ...
    if (openapi.getJsonSchemaDialect != null) ...
     */

        return api;
  }

  public static io.swagger.v3.oas.models.info.Info InfoObject.reverseInfo (InfoObject infoObject){
        io.swagger.v3.oas.models.info.Info info = new Info();

        if (!infoObject.getTitle().isEmpty())
        info.setTitle(infoObject.getTitle());
        if (!infoObject.getVersion().isEmpty())
        info.setVersion(infoObject.getVersion());
        if (!infoObject.getDescription().isEmpty())
        info.setDescription(infoObject.getDescription());
        if (!infoObject.getTermsOfService().isEmpty())
        info.setTermsOfService(infoObject.getTermsOfService());
        if (infoObject.hasC())
        info.setContact(ContactObject.reverseContact(infoObject.get_impl_c()));
        if (infoObject.hasL())
        info.setLicense(LicenseObject.reverseLicense(infoObject.get_impl_l()));
        if (infoObject.getExList().size() != 0) {
        Map<String, Object> extension = new HashMap<>();
        for (Extension e : infoObject.getExList())
        extension.put(e.getKey(), e.getValue());
        info.setExtensions(extension);
        }

        return info;
  }

  public static io.swagger.v3.oas.models.info.Contact ContactObject.reverseContact (ContactObject contactObject){
        io.swagger.v3.oas.models.info.Contact contact = new Contact();

        if (!contactObject.getName().isEmpty())
        contact.setName(contactObject.getName());
        if (!contactObject.getUrl().isEmpty())
        contact.setUrl(contactObject.getUrl());
        if (!contactObject.getEmail().isEmpty())
        contact.setEmail(contactObject.getEmail());
        if (contactObject.getExList().size() != 0) {
        Map<String, Object> extensions = new HashMap<>();
        for (Extension e : contactObject.getExList())
        extensions.put(e.getKey(), e.getValue());
        contact.setExtensions(extensions);
        }

        return contact;
  }

  public static io.swagger.v3.oas.models.info.License LicenseObject.reverseLicense (LicenseObject licenseObject){
        io.swagger.v3.oas.models.info.License license = new License();

        if (!licenseObject.getName().isEmpty())
        license.setName(licenseObject.getName());
        if (!licenseObject.getUrl().isEmpty())
        license.setUrl(licenseObject.getUrl());
        if (licenseObject.getExList().size() != 0) {
        Map<String, Object> extensions = new HashMap<>();
        for (Extension e : licenseObject.getExList())
        extensions.put(e.getKey(), e.getValue());
        license.setExtensions(extensions);
        }

        return license;
  }

  public static Server ServerObject.reverseServer (ServerObject serverObject){
    Server server = new Server();

    if (!serverObject.getUrl().isEmpty())
      server.setUrl(serverObject.getUrl());
    if (!serverObject.getDescription().isEmpty())
      server.setDescription(serverObject.getDescription());
    if (serverObject.hasServerVariablesTuple()) {
      Map<String, ServerVariable> serverVariables = new HashMap<>();
      for (ServerVariablesTuple s : serverObject.getServerVariablesTuples())
        serverVariables.put(s.getName(), ServerVariableObject.reverseServerVariable(s.getServerVariableObject(), map));
      server.setVariables(serverVariables);
    }
    if (serverObject.getNumExtension() != 0) {
      Map<String, Object> extensions = new HashMap<>();
      for (Extension e : serverObject.getExtensions())
        extensions.put(e.getKey(), e.getValue());
      server.setExtensions(extensions);
    }

    map.put(server, serverObject);
    return server;
  }

  public static ServerVariable ServerVariableObject.reverseServerVariable (ServerVariableObject serverVariableObject){
    ServerVariable serverVariable = new ServerVariable();

    if (!serverVariableObject.getDefault().isEmpty())
      serverVariable.setDefault(serverVariableObject.getDefault());
    if (!serverVariableObject.getDescription().isEmpty())
      serverVariable.setDescription(serverVariableObject.getDescription());
    if (serverVariableObject.getNumEnum() != 0) {
      List<String> enums = new ArrayList<>();
      for (Enum e : serverVariableObject.getEnums())
        enums.add(e.getEnumValue());
      serverVariable.setEnums(enums);
    }
    if (serverVariableObject.getNumExtension() != 0) {
      Map<String, Object> extensions = new HashMap<>();
      for (Extension e : serverVariableObject.getExtensions())
        extensions.put(e.getKey(), e.getValue());
      serverVariable.setExtensions(extensions);
    }

    map.put(serverVariable, serverVariableObject);
    return serverVariable;
  }

  public static Components ComponentsObject.reverseComponents (ComponentsObject componentsObject){
    Components components = new Components();

    if (componentsObject.getNumSchemaTuple() != 0) {
      Map<String, org.openapi4j.parser.model.v3.Schema> schemaMap = new HashMap<>();
      SchemaOb s;
      for (SchemaTuple t : componentsObject.getSchemaTuples()) {
        s = t.getSchemaOb();
        if (s instanceof SchemaObject)
          schemaMap.put(t.getKey(), ((SchemaObject) s).reverseSchema(s, map));
        else
          schemaMap.put(t.getKey(), ((SchemaReference) s).reverseSchema(s, map));
      }
      components.setSchemas(schemaMap);
    }
    if (componentsObject.getNumResponseTuple() != 0) {
      Map<String, Response> responseMap = new HashMap<>();
      ResponseOb r;
      for (ResponseTuple t : componentsObject.getResponseTuples()) {
        r = t.getResponseOb();
        responseMap.put(t.getKey(), r.reverseResponse(r, map));
      }
      components.setResponses(responseMap);
    }
    if (componentsObject.getNumParameterTuple() != 0) {
      Map<String, Parameter> parameterMap = new HashMap<>();
      ParameterOb p;
      for (ParameterTuple t : componentsObject.getParameterTuples()) {
        p = t.getParameterOb();
        parameterMap.put(t.getKey(), p.reverseParameter(p, map));
      }
      components.setParameters(parameterMap);
    }
    if (componentsObject.getNumExampleTuple() != 0) {
      Map<String, Example> exampleMap = new HashMap<>();
      for (ExampleTuple t : componentsObject.getExampleTuples())
        exampleMap.put(t.getKey(), ExampleObject.reverseExample(t.getExampleObject(), map));
      components.setExamples(exampleMap);
    }
    if (componentsObject.getNumRequestBodyTuple() != 0) {
      Map<String, RequestBody> requestBodyMap = new HashMap<>();
      RequestBodyOb r;
      for (RequestBodyTuple t : componentsObject.getRequestBodyTuples()) {
        r = t.getRequestBodyOb();
        requestBodyMap.put(t.getKey(), r.reverseRequestBody(r, map));
      }
      components.setRequestBodies(requestBodyMap);
    }
    if (componentsObject.getNumHeaderTuple() != 0) {
      Map<String, Header> headerMap = new HashMap<>();
      HeaderOb h;
      for (HeaderTuple t : componentsObject.getHeaderTuples()) {
        h = t.getHeaderOb();
        headerMap.put(t.getKey(), h.reverseHeader(h, map));
      }
      components.setHeaders(headerMap);
    }
    if (componentsObject.getNumSecuritySchemeTuple() != 0) {
      Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();
      SecuritySchemeOb s;
      for (SecuritySchemeTuple t : componentsObject.getSecuritySchemeTuples()) {
        s = t.getSecuritySchemeOb();
        securitySchemeMap.put(t.getKey(), s.reverseSecurityScheme(s, map));
      }
      components.setSecuritySchemes(securitySchemeMap);
    }
    if (componentsObject.getNumLinkTuple() != 0) {
      Map<String, Link> linkMap = new HashMap<>();
      LinkOb l;
      for (LinkTuple t : componentsObject.getLinkTuples()) {
        l = t.getLinkOb();
        linkMap.put(t.getKey(), l.reverseLink(l, map));
      }
      components.setLinks(linkMap);
    }
    if (componentsObject.getNumCallbackTuple() != 0) {
      Map<String, Callback> callbackMap = new HashMap<>();
      CallbackOb c;
      for (CallbackTuple t : componentsObject.getCallbackTuples()) {
        c = t.getCallbackOb();
        callbackMap.put(t.getKey(), c.reverseCallback(c, map));
      }
      components.setCallbacks(callbackMap);
    }
    if (componentsObject.getNumExtension() != 0) {
      Map<String, Object> extensions = new HashMap<>();
      for (Extension e : componentsObject.getExtensions())
        extensions.put(e.getKey(), e.getValue());
      components.setExtensions(extensions);
    }

    return components;
  }

        syn PathItem PathItemOb.reversePath (PathItemOb pathItemOb);
        eq PathItemReference.reversePath (PathItemOb pathItemOb) {
        PathItem pathItem = new PathItem();
        PathItemReference p = (PathItemReference) pathItemOb;

        /* implement after reference implementation
        if (!p.getRef().isEmpty()) {
        try {
        parameter.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), p.getRef());
        } catch (Exception e) {
        e.printStackTrace();
        }
        }
         */

        return pathItem;
        }
        eq PathItemObject.reversePath (PathItemOb pathItemOb) {
        Path path = new Path();
        PathItemObject p = (PathItemObject) pathItem;

        if (!p.getSummary().isEmpty())
        path.setSummary(p.getSummary());
        if (!p.getDescription().isEmpty())
        path.setDescription(p.getDescription());
        if (p.hasGet())
        path.setGet(OperationObject.reverseOperation(p.getGet().getOperationObject(), map));
        if (p.hasPut())
        path.setPut(OperationObject.reverseOperation(p.getPut().getOperationObject(), map));
        if (p.hasPost())
        path.setPost(OperationObject.reverseOperation(p.getPost().getOperationObject(), map));
        if (p.hasDelete())
        path.setDelete(OperationObject.reverseOperation(p.getDelete().getOperationObject(), map));
        if (p.hasOptions())
        path.setOptions(OperationObject.reverseOperation(p.getOptions().getOperationObject(), map));
        if (p.hasHead())
        path.setHead(OperationObject.reverseOperation(p.getHead().getOperationObject(), map));
        if (p.hasPatch())
        path.setPatch(OperationObject.reverseOperation(p.getPatch().getOperationObject(), map));
        if (p.getNumServerObject() != 0) {
        for (ServerObject s : p.getServerObjects())
        path.addServer(ServerObject.reverseServer(s, map));
        }
        if (p.getNumParameterOb() != 0) {
        for (ParameterOb e : p.getParameterObs())
        path.addParameter(e.reverseParameter(e, map));
        }
        if (p.getNumExtension() != 0) {
        Map<String, Object> extensionMap = new HashMap<>();
        for (Extension e : p.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
        path.setExtensions(extensionMap);
        }

        return path;
        }

  public static Operation OperationObject.reverseOperation (OperationObject operationObject){
    Operation operation = new Operation();

    if (operationObject.getNumTag() != 0) {
      for (de.tudresden.inf.st.openapi.ast.Tag t : operationObject.getTags())
        operation.addTag(t.getTag());
    }
    if (!operationObject.getSummary().isEmpty())
      operation.setSummary(operationObject.getSummary());
    if (!operationObject.getDescription().isEmpty())
      operation.setDescription(operationObject.getDescription());
    if (operationObject.hasExternalDocObject())
      operation.setExternalDocs(ExternalDocObject.reverseExternalDocs(operationObject.getExternalDocObject(), map));
    if (!operationObject.getOperationID().isEmpty())
      operation.setOperationId(operationObject.getOperationID());
    if (operationObject.getNumParameterOb() != 0) {
      for (ParameterOb p : operationObject.getParameterObs())
        operation.addParameter(p.reverseParameter(p, map));
    }
    if (operationObject.hasRequestBodyOb())
      operation.setRequestBody(operationObject.getRequestBodyOb().reverseRequestBody(operationObject.getRequestBodyOb(), map));
    if (operationObject.getNumResponseTuple() != 0) {
      Map<String, Response> responseMap = new HashMap<>();
      for (ResponseTuple t : operationObject.getResponseTuples())
        responseMap.put(t.getKey(), t.getResponseOb().reverseResponse(t.getResponseOb(), map));
      operation.setResponses(responseMap);
    }
    if (operationObject.getNumCallbackTuple() != 0) {
      Map<String, Callback> callbacks = new HashMap<>();
      for (CallbackTuple t : operationObject.getCallbackTuples())
        callbacks.put(t.getKey(), t.getCallbackOb().reverseCallback(t.getCallbackOb(), map));
      operation.setCallbacks(callbacks);
    }
    if (operationObject.getDeprecatedBoolean() != null)
      operation.setDeprecated(operationObject.getDeprecatedBoolean());
    if (operationObject.getSecurityRequirementObjects() != null) {
      for (SecurityRequirementObject s : operationObject.getSecurityRequirementObjects())
        operation.addSecurityRequirement(SecurityRequirementObject.reverseSecurityRequirement(s, map));
    }
    if (operationObject.getNumServerObject() != 0) {
      for (ServerObject s : operationObject.getServerObjects())
        operation.addServer(ServerObject.reverseServer(s, map));
    }
    if (operationObject.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : operationObject.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      operation.setExtensions(extensionMap);
    }

    return operation;
  }

  public static ExternalDocs ExternalDocObject.reverseExternalDocs (ExternalDocObject externalDocObject){
    ExternalDocs externalDocs = new ExternalDocs();

    if (!externalDocObject.getDescription().isEmpty())
      externalDocs.setDescription(externalDocObject.getDescription());
    if (!externalDocObject.getUrl().isEmpty())
      externalDocs.setUrl(externalDocObject.getUrl());
    if (externalDocObject.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : externalDocObject.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      externalDocs.setExtensions(extensionMap);
    }

    return externalDocs;
  }

  syn Parameter ParameterOb.reverseParameter (ParameterOb parameterOb);
  eq ParameterReference.reverseParameter (ParameterOb parameterOb) {
    Parameter parameter = new Parameter();
    ParameterReference p = (ParameterReference) parameterOb;

    if (!p.getRef().isEmpty()) {
      try {
        parameter.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), p.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return parameter;
  }
  eq ParameterObject.reverseParameter (ParameterOb parameterOb) {
    Parameter parameter = new Parameter();
    ParameterObject p = (ParameterObject) parameterOb;

    if (!p.getName().isEmpty())
      parameter.setName(p.getName());
    if (!p.getIn().isEmpty())
      parameter.setIn(p.getIn());
    if (p.getRequired() != null)
      parameter.setRequired(p.getRequired());
    if (!p.getDescription().isEmpty())
      parameter.setDescription(p.getDescription());
    if (p.getDeprecatedBoolean() != null)
      parameter.setDeprecated(p.getDeprecatedBoolean());
    if (!p.getStyle().isEmpty())
      parameter.setStyle(p.getStyle());
    if (p.getAllowReserved() != null)
      parameter.setAllowReserved(p.getAllowReserved());
    if (p.getExplode() != null)
      parameter.setExplode(p.getExplode());
    if (p.getSchemaOb() != null)
      parameter.setSchema(p.getSchemaOb().reverseSchema(p.getSchemaOb(), map));
    if (p.getExample() != null)
      parameter.setExample(p.getExample());
    if (p.getNumExampleTuple() != 0) {
      Map<String, Example> exampleMap = new HashMap<>();
      for (ExampleTuple t : p.getExampleTuples())
        exampleMap.put(t.getKey(), ExampleObject.reverseExample(t.getExampleObject(), map));
      parameter.setExamples(exampleMap);
    }
    if (p.getNumContentTuple() != 0) {
      Map<String, MediaType> contentMap = new HashMap<>();
      for (ContentTuple t : p.getContentTuples())
        contentMap.put(t.getKey(), MediaTypeObject.reverseMediaType(t.getMediaTypeObject(), map));
      parameter.setContentMediaTypes(contentMap);
    }
    if (p.getRequired() != null)
      parameter.setRequired(p.getRequired());
    if (p.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : p.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      parameter.setExtensions(extensionMap);
    }

    return parameter;
  }

  syn RequestBody RequestBodyOb.reverseRequestBody (RequestBodyOb requestBodyOb);
  eq RequestBodyReference.reverseRequestBody (RequestBodyOb requestBodyOb) {
    RequestBody requestBody = new RequestBody();
    RequestBodyReference r = (RequestBodyReference) requestBodyOb;

    if (!r.getRef().isEmpty()) {
      try {
        requestBody.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), r.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return requestBody;
  }
  eq RequestBodyObject.reverseRequestBody (RequestBodyOb requestBodyOb) {
    RequestBody requestBody = new RequestBody();
    RequestBodyObject r = (RequestBodyObject) requestBodyOb;

    if (r.getNumContentTuple() != 0) {
      Map<String, MediaType> contents = new HashMap<>();
      for (ContentTuple t : r.getContentTuples())
        contents.put(t.getKey(), MediaTypeObject.reverseMediaType(t.getMediaTypeObject(), map));
      requestBody.setContentMediaTypes(contents);
    }
    if (!r.getDescription().isEmpty())
      requestBody.setDescription(r.getDescription());
    if (r.getRequired() != null)
      requestBody.setRequired(r.getRequired());

    return requestBody;
  }

  public static MediaType MediaTypeObject.reverseMediaType (MediaTypeObject mediaTypeObject){
    MediaType mediaType = new MediaType();
    SchemaOb s;

    if (mediaTypeObject.getSchemaOb() != null) {
      s = mediaTypeObject.getSchemaOb();
      mediaType.setSchema(s.reverseSchema(s, map));
    }
    if (mediaTypeObject.getExample() != null)
      mediaType.setExample(mediaTypeObject.getExample());
    if (mediaTypeObject.getNumExampleTuple() != 0) {
      Map<String, Example> exampleMap = new HashMap<>();
      for (ExampleTuple t : mediaTypeObject.getExampleTuples())
        exampleMap.put(t.getKey(), ExampleObject.reverseExample(t.getExampleObject(), map));
      mediaType.setExamples(exampleMap);
    }
    if (mediaTypeObject.getNumEncodingTuple() != 0) {
      Map<String, EncodingProperty> encodingMap = new HashMap<>();
      for (EncodingTuple t : mediaTypeObject.getEncodingTuples())
        encodingMap.put(t.getKey(), EncodingObject.reverseEncodingProperty(t.getEncodingObject(), map));
      mediaType.setEncodings(encodingMap);
    }

    return mediaType;
  }

  public static EncodingProperty EncodingObject.reverseEncodingProperty (EncodingObject encodingObject){
    EncodingProperty encodingProperty = new EncodingProperty();
    HeaderOb h;

    if (!encodingObject.getContentType().isEmpty())
      encodingProperty.setContentType(encodingObject.getContentType());
    if (encodingObject.getNumHeaderTuple() != 0) {
      Map<String, Header> headers = new HashMap<>();
      for (HeaderTuple t : encodingObject.getHeaderTuples()) {
        h = t.getHeaderOb();
        headers.put(t.getKey(), h.reverseHeader(h, map));
      }
      encodingProperty.setHeaders(headers);
    }
    if (!encodingObject.getStyle().isEmpty())
      encodingProperty.setStyle(encodingObject.getStyle());
    if (encodingObject.getExplode() != null)
      encodingProperty.setExplode(encodingObject.getExplode());
    if (encodingObject.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : encodingObject.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      encodingProperty.setExtensions(extensionMap);
    }

    return encodingProperty;
  }

  syn Response ResponseOb.reverseResponse (ResponseOb responseOb);
  eq ResponseReference.reverseResponse (ResponseOb responseOb){
    Response response = new Response();
    ResponseReference r = (ResponseReference) responseOb;

    if (!r.getRef().isEmpty()) {
      try {
        response.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), r.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return response;
  }
  eq ResponseObject.reverseResponse (ResponseOb responseOb){
    Response response = new Response();
    ResponseObject r = (ResponseObject) responseOb;

    if (!r.getDescription().isEmpty())
      response.setDescription(r.getDescription());
    if (r.getNumHeaderTuple() != 0) {
      Map<String, Header> headers = new HashMap<>();
      for (HeaderTuple t : r.getHeaderTuples())
        headers.put(t.getKey(), t.getHeaderOb().reverseHeader(t.getHeaderOb(), map));
      response.setHeaders(headers);
    }
    if (r.getNumContentTuple() != 0) {
      Map<String, MediaType> contents = new HashMap<>();
      for (ContentTuple t : r.getContentTuples())
        contents.put(t.getKey(), MediaTypeObject.reverseMediaType(t.getMediaTypeObject(), map));
      response.setContentMediaTypes(contents);
    }
    if (r.getNumLinkTuple() != 0) {
      Map<String, Link> links = new HashMap<>();
      for (LinkTuple t : r.getLinkTuples())
        links.put(t.getKey(), t.getLinkOb().reverseLink(t.getLinkOb(), map));
      response.setLinks(links);
    }

    return response;
  }

  syn Callback CallbackOb.reverseCallback (CallbackOb callbackOb);
  eq CallbackReference.reverseCallback (CallbackOb callbackOb) {
    Callback callback = new Callback();
    CallbackReference c = (CallbackReference) callbackOb;

    if (!c.getRef().isEmpty()) {
      try {
        callback.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), c.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return callback;
  }
  eq CallbackObject.reverseCallback (CallbackOb callbackOb) {
    Callback callback = new Callback();
    CallbackObject c = (CallbackObject) callbackOb;

    if (c.getNumExpression() != 0) {
      Map<String, Path> paths = new HashMap<>();
      PathItemObject p;
      for (Expression e : c.getExpressions()) {
        p = e.getPathItemObject();
        paths.put(e.getName(), p.reversePath(p, map));
      }
      callback.setCallbackPaths(paths);
    }

    return callback;
  }

  public static Example ExampleObject.reverseExample (ExampleObject exampleObject){
    Example example = new Example();

    if (!exampleObject.getSummary().isEmpty())
      example.setSummary(exampleObject.getSummary());
    if (!exampleObject.getDescription().isEmpty())
      example.setDescription(exampleObject.getDescription());
    if (exampleObject.getValue() != null)
      example.setValue(exampleObject.getValue());
    if (!exampleObject.getExternalValue().isEmpty())
      example.setExternalValue(exampleObject.getExternalValue());
    if (exampleObject.getNumExtension() != 0) {
      Map<String, Object> extension = new HashMap<>();
      for (Extension e : exampleObject.getExtensions())
        extension.put(e.getKey(), e.getValue());
      example.setExtensions(extension);
    }

    return example;
  }

  syn Link LinkOb.reverseLink (LinkOb linkOb);
  eq LinkReference.reverseLink (LinkOb linkOb){
    Link link = new Link();
    LinkReference l = (LinkReference) linkOb;

    if (!l.getRef().isEmpty()) {
      try {
        link.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), l.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return link;
  }
  eq LinkObject.reverseLink (LinkOb linkOb){
    Link link = new Link();
    LinkObject l = (LinkObject) linkOb;

    if (!l.getOperationRef().isEmpty())
      link.setOperationRef(l.getOperationRef());
    if (!l.getOperationID().isEmpty())
      link.setOperationId(l.getOperationID());
    if (l.getNumLinkParameterTuple() != 0) {
      Map<String, String> parameters = new HashMap<>();
      for (LinkParameterTuple t : l.getLinkParameterTuples())
        parameters.put(t.getLinkParameterKey(), t.getLinkParameterValue());
      link.setParameters(parameters);
    }
    if (!l.getDescription().isEmpty())
      link.setDescription(l.getDescription());
    if (l.hasServerObject())
      link.setServer(ServerObject.reverseServer(l.getServerObject(), map));

    return link;
  }

  syn Header HeaderOb.reverseHeader (HeaderOb headerOb);
  eq HeaderReference.reverseHeader (HeaderOb headerOb) {
    Header header = new Header();
    HeaderReference h = new HeaderReference();

    if (!h.getRef().isEmpty()) {
      try {
        header.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), h.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return header;
  }
  eq HeaderObject.reverseHeader (HeaderOb headerOb) {
    Header header = new Header();
    HeaderObject h = (HeaderObject) headerOb;

    if (h.getRequired() != null)
      header.setRequired(h.getRequired());
    if (!h.getDescription().isEmpty())
      header.setDescription(h.getDescription());
    if (!h.getStyle().isEmpty())
      header.setStyle(h.getStyle());
    if (h.getExplode() != null)
      header.setExplode(h.getExplode());
    if (h.getAllowReserved() != null)
      header.setAllowReserved(h.getAllowReserved());
    if (h.getExample() != null)
      header.setExample(h.getExample());
    if (h.getNumExampleTuple() != 0) {
      Map<String, Example> examples = new HashMap<>();
      for (ExampleTuple t : h.getExampleTuples())
        examples.put(t.getKey(), ExampleObject.reverseExample(t.getExampleObject(), map));
      header.setExample(examples);
    }
    if (h.getNumContentTuple() != 0) {
      Map<String, MediaType> contents = new HashMap<>();
      for (ContentTuple t : h.getContentTuples())
        contents.put(t.getKey(), MediaTypeObject.reverseMediaType(t.getMediaTypeObject(), map));
      header.setContentMediaTypes(contents);
    }
    if (h.hasSchemaOb())
      header.setSchema(h.getSchemaOb().reverseSchema(h.getSchemaOb(), map));

    return header;
  }

  public static org.openapi4j.parser.model.v3.Tag TagObject.reverseTag (TagObject tagObject){
    org.openapi4j.parser.model.v3.Tag tag = new org.openapi4j.parser.model.v3.Tag();

    tag.setName(tagObject.getName());

    if (!tagObject.getDescription().isEmpty())
      tag.setDescription(tagObject.getDescription());
    if (tagObject.hasExternalDocObject())
      tag.setExternalDocs(ExternalDocObject.reverseExternalDocs(tagObject.getExternalDocObject(), map));
    if (tagObject.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : tagObject.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      tag.setExtensions(extensionMap);
    }

    return tag;
  }

  syn org.openapi4j.parser.model.v3.Schema SchemaOb.reverseSchema (SchemaOb schemaOb);
  eq SchemaReference.reverseSchema (SchemaOb schemaOb){
    org.openapi4j.parser.model.v3.Schema schema = new org.openapi4j.parser.model.v3.Schema();
    SchemaReference s = (SchemaReference) schemaOb;

    if (!s.getRef().isEmpty()) {
      try {
        schema.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), s.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return schema;
  }
  eq SchemaObject.reverseSchema (SchemaOb schemaOb){
    org.openapi4j.parser.model.v3.Schema schema = new org.openapi4j.parser.model.v3.Schema();
    SchemaObject s = (SchemaObject) schemaOb;

    if (s.hasAdditionalProperties()) {
      SchemaOb o = s.getAdditionalProperties().getSchemaOb();
      if (o instanceof SchemaObject)
        schema.setAdditionalProperties(((SchemaObject) o).reverseSchema(o, map));
      else
        schema.setAdditionalProperties(((SchemaReference) o).reverseSchema(o, map));
    }
    if (s.getAdditionalPropertiesAllowed() != null)
      schema.setAdditionalPropertiesAllowed(s.getAdditionalPropertiesAllowed());
    if (s.getDefaultValue() != null)
      schema.setDefault(s.getDefaultValue());
    if (!s.getDescription().isEmpty())
      schema.setDescription(s.getDescription());
    if (s.getDeprecatedBoolean() != null)
      schema.setDeprecated(s.getDeprecatedBoolean());
    if (s.hasDiscriminatorObject())
      schema.setDiscriminator(DiscriminatorObject.reverseDiscriminator(s.getDiscriminatorObject(), map));
    if (s.getNumEnumObj() != 0) {
      for (EnumObj e : s.getEnumObjs())
        schema.addEnum(e.getEnumOb());
    }

    if (s.getExample() != null)
      schema.setExample(s.getExample());
    if (s.getExclusiveMaximum() != null)
      schema.setExclusiveMaximum(s.getExclusiveMaximum());
    if (s.getExclusiveMinimum() != null)
      schema.setExclusiveMinimum(s.getExclusiveMinimum());
    if (s.hasExternalDocObject())
      schema.setExternalDocs(ExternalDocObject.reverseExternalDocs(s.getExternalDocObject(), map));
    if (!s.getFormat().isEmpty())
      schema.setFormat(s.getFormat());
    if (s.hasItemsSchema()) {
      if (s.getItemsSchema().getSchemaOb() instanceof SchemaObject)
        schema.setItemsSchema(((SchemaObject) s.getItemsSchema().getSchemaOb()).reverseSchema(s.getItemsSchema().getSchemaOb(), map));
      else
        schema.setItemsSchema(((SchemaReference) s.getItemsSchema().getSchemaOb()).reverseSchema(s.getItemsSchema().getSchemaOb(), map));
    }
    if (s.getMaximum() != null)
      schema.setMaximum(s.getMaximum());
    if (s.getMinimum() != null)
      schema.setMinimum(s.getMinimum());
    if (s.getMaxItems() != null)
      schema.setMaxItems(s.getMaxItems());
    if (s.getMinItems() != null)
      schema.setMinItems(s.getMinItems());
    if (s.getMaxLength() != null)
      schema.setMaxLength(s.getMaxLength());
    if (s.getMinLength() != null)
      schema.setMinLength(s.getMinLength());
    if (s.getMaxProperties() != null)
      schema.setMaxProperties(s.getMaxProperties());
    if (s.getMinProperties() != null)
      schema.setMinProperties(s.getMinProperties());
    if (s.getMultipleOf() != null)
      schema.setMultipleOf(s.getMultipleOf());
    if (s.hasNotSchema()) {
      if (s.getNotSchema().getSchemaOb() instanceof SchemaObject)
        schema.setNotSchema(((SchemaObject) s.getNotSchema().getSchemaOb()).reverseSchema(s.getNotSchema().getSchemaOb(), map));
      else
        schema.setNotSchema(((SchemaReference) s.getNotSchema().getSchemaOb()).reverseSchema(s.getNotSchema().getSchemaOb(), map));
    }
    if (s.getNullable() != null)
      schema.setNullable(s.getNullable());
    if (!s.getPattern().isEmpty())
      schema.setPattern(s.getPattern());
    if (s.getNumPropertyItem() != 0) {
      Map<String, org.openapi4j.parser.model.v3.Schema> properties = new HashMap<>();
      for (PropertyItem p : s.getPropertyItemList()) {
        if (p.getSchemaOb() instanceof SchemaObject)
          properties.put(p.getName(), ((SchemaObject) p.getSchemaOb()).reverseSchema(p.getSchemaOb(), map));
        else
          properties.put(p.getName(), ((SchemaReference) p.getSchemaOb()).reverseSchema(p.getSchemaOb(), map));
      }
      schema.setProperties(properties);
    }
    if (s.getNumRequiredField() != 0) {
      for (RequiredField r : s.getRequiredFields())
        schema.addRequiredField(r.getValue());
    }
    if (s.getNumAllOfSchema() != 0) {
      for (AllOfSchema a : s.getAllOfSchemas()) {
        if (a.getSchemaOb() instanceof SchemaObject)
          schema.addAllOfSchema(((SchemaObject) a.getSchemaOb()).reverseSchema(a.getSchemaOb(), map));
        else
          schema.addAllOfSchema(((SchemaReference) a.getSchemaOb()).reverseSchema(a.getSchemaOb(), map));
      }
    }
    if (s.getNumAnyOfSchema() != 0) {
      for (AnyOfSchema a : s.getAnyOfSchemas()) {
        if (a.getSchemaOb() instanceof SchemaObject)
          schema.addAnyOfSchema(((SchemaObject) a.getSchemaOb()).reverseSchema(a.getSchemaOb(), map));
        else
          schema.addAnyOfSchema(((SchemaReference) a.getSchemaOb()).reverseSchema(a.getSchemaOb(), map));
      }
    }
    if (s.getNumOneOfSchema() != 0) {
      for (OneOfSchema o : s.getOneOfSchemas()) {
        if (o.getSchemaOb() instanceof SchemaObject)
          schema.addOneOfSchema(((SchemaObject) o.getSchemaOb()).reverseSchema(o.getSchemaOb(), map));
        else
          schema.addOneOfSchema(((SchemaReference) o.getSchemaOb()).reverseSchema(o.getSchemaOb(), map));
      }
    }
    if (s.getReadOnly() != null)
      schema.setReadOnly(s.getReadOnly());
    if (s.getWriteOnly() != null)
      schema.setWriteOnly(s.getWriteOnly());
    if (!s.getType().isEmpty())
      schema.setType(s.getType());
    if (!s.getTitle().isEmpty())
      schema.setTitle(s.getTitle());
    if (s.getUniqueItems() != null)
      schema.setUniqueItems(s.getUniqueItems());
    if (s.hasXmlObject())
      schema.setXml(XmlObject.reverseXml(s.getXmlObject(), map));
    if (s.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : s.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      schema.setExtensions(extensionMap);
    }

    return schema;
  }

  public static Discriminator DiscriminatorObject.reverseDiscriminator (DiscriminatorObject discriminatorObject) {
    Discriminator discriminator = new Discriminator();

    if (!discriminatorObject.getPropertyName().isEmpty())
      discriminator.setPropertyName(discriminatorObject.getPropertyName());
    if (discriminatorObject.getNumMappingTuple() != 0) {
      Map<String, String> mapping = new HashMap<>();
      for (MappingTuple m : discriminatorObject.getMappingTuples())
        mapping.put(m.getKey(), m.getValue());
      discriminator.setMapping(mapping);
    }

    return discriminator;
  }

  public static Xml XmlObject.reverseXml (XmlObject xmlObject) {
    Xml xml = new Xml();

    if (!xmlObject.getName().isEmpty())
      xml.setName(xmlObject.getName());
    if (!xmlObject.getNamespace().isEmpty())
      xml.setNamespace(xmlObject.getNamespace());
    if (!xmlObject.getPrefix().isEmpty())
      xml.setPrefix(xmlObject.getPrefix());
    if (xmlObject.getAttribute() != null)
      xml.setAttribute((boolean) xmlObject.getAttribute());
    if (xmlObject.getWrapped() != null)
      xml.setWrapped((boolean) xmlObject.getWrapped());

    return xml;
  }

  syn SecurityScheme SecuritySchemeOb.reverseSecurityScheme (SecuritySchemeOb securitySchemeOb);
  eq SecuritySchemeReference.reverseSecurityScheme (SecuritySchemeOb securitySchemeOb){
    SecurityScheme securityScheme = new SecurityScheme();
    SecuritySchemeReference s = (SecuritySchemeReference) securitySchemeOb;

    if (!s.getRef().isEmpty()) {
      try {
        securityScheme.setReference(new org.openapi4j.core.model.v3.OAI3Context(new URL("")), new URL(""), s.getRef());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return securityScheme;
  }
  eq SecuritySchemeObject.reverseSecurityScheme (SecuritySchemeOb securitySchemeOb){
    SecurityScheme securityScheme = new SecurityScheme();
    SecuritySchemeObject s = (SecuritySchemeObject) securitySchemeOb;

    if (!s.getType().isEmpty())
      securityScheme.setType(s.getType());
    if (!s.getName().isEmpty())
      securityScheme.setName(s.getName());
    if (!s.getIn().isEmpty())
      securityScheme.setIn(s.getIn());
    if (!s.getScheme().isEmpty())
      securityScheme.setScheme(s.getScheme());
    if (!s.getOpenIdConnectUrl().isEmpty())
      securityScheme.setOpenIdConnectUrl(s.getOpenIdConnectUrl());
    if (s.getOAuthFlowsObject() != null)
      securityScheme.setFlows(OAuthFlowsObject.reverseOAuthFlows(s.getOAuthFlowsObject(), map));
    if (!s.getDescription().isEmpty())
      securityScheme.setDescription(s.getDescription());
    if (!s.getBearerFormat().isEmpty())
      securityScheme.setBearerFormat(s.getBearerFormat());
    if (s.getNumExtension() != 0) {
      Map<String, Object> extensionMap = new HashMap<>();
      for (Extension e : s.getExtensions())
        extensionMap.put(e.getKey(), e.getValue());
      securityScheme.setExtensions(extensionMap);
    }

    return securityScheme;
  }

  public static OAuthFlows OAuthFlowsObject.reverseOAuthFlows (OAuthFlowsObject oAuthFlowsObject){
    OAuthFlows oAuthFlows = new OAuthFlows();

    if (oAuthFlowsObject.hasImplicit())
      oAuthFlows.setImplicit(OAuthFlowObject.reverseOAuthFlow(oAuthFlowsObject.getImplicit().getOAuthFlowObject(), map));
    if (oAuthFlowsObject.hasPassword())
      oAuthFlows.setPassword(OAuthFlowObject.reverseOAuthFlow(oAuthFlowsObject.getPassword().getOAuthFlowObject(), map));
    if (oAuthFlowsObject.hasClientCredentials())
      oAuthFlows.setClientCredentials(OAuthFlowObject.reverseOAuthFlow(oAuthFlowsObject.getClientCredentials().getOAuthFlowObject(), map));
    if (oAuthFlowsObject.hasAuthorizationCode())
      oAuthFlows.setAuthorizationCode(OAuthFlowObject.reverseOAuthFlow(oAuthFlowsObject.getAuthorizationCode().getOAuthFlowObject(), map));

    return oAuthFlows;
  }

  public static OAuthFlow OAuthFlowObject.reverseOAuthFlow (OAuthFlowObject oAuthFlowObject){
    OAuthFlow oAuthFlow = new OAuthFlow();
    Map<String, String> scopes = new HashMap<>();

    if (oAuthFlowObject.getAuthorizationUrl() != null)
      oAuthFlow.setAuthorizationUrl(oAuthFlowObject.getAuthorizationUrl());
    if (oAuthFlowObject.getTokenUrl() != null)
      oAuthFlow.setTokenUrl(oAuthFlowObject.getTokenUrl());
    for (ScopesTuple t : oAuthFlowObject.getScopesTuples())
      scopes.put(t.getScopesKey(), t.getScopesValue());
    oAuthFlow.setScopes(scopes);

    if (oAuthFlowObject.getRefreshUrl() != null)
      oAuthFlow.setRefreshUrl(oAuthFlowObject.getRefreshUrl());

    return oAuthFlow;
  }

  public static SecurityRequirement SecurityRequirementObject.reverseSecurityRequirement (SecurityRequirementObject securityRequirementObject){
    SecurityRequirement securityRequirement = new SecurityRequirement();

    if (securityRequirementObject.getNumSecurityRequirementTuple() != 0) {
      Map<String, List<String>> requirements = new HashMap<>();
      for (SecurityRequirementTuple t : securityRequirementObject.getSecurityRequirementTuples()) {
        List<String> values = new ArrayList<>();
        for (SecurityRequirementValue v : t.getSecurityRequirementValues())
          values.add(v.getValue());
        requirements.put(t.getName(), values);
      }
      securityRequirement.setRequirements(requirements);
    }

    return securityRequirement;
  }
}