import org.openapi4j.core.exception.ResolutionException;
import org.openapi4j.core.validation.ValidationException;
import org.openapi4j.parser.model.v3.*;
import org.openapi4j.core.model.reference.Reference;
import org.openapi4j.core.model.OAIContext;

import java.io.IOException;
import java.util.*;
import java.net.URL;

aspect Composer {

    public static OpenApi3 OpenAPIObject.composeOpenAPI (OpenAPIObject openapi){
        OpenApi3 api3 = new OpenApi3();
        Map<Object, ASTNode> map = new HashMap<>();

        if( !openapi.getOpenAPI().isEmpty() )
        api3.setOpenapi(openapi.getOpenAPI());
        if( openapi.hasInfoObject() )
        api3.setInfo(InfoObject.composeInfo(openapi.getInfoObject(), map));
        if( openapi.getNumServerObject() != 0 ){
        List<org.openapi4j.parser.model.v3.Server> servers = new ArrayList<>();
        for( ServerObject s : openapi.getServerObjects() )
        servers.add(ServerObject.composeServer(s, map));
        api3.setServers(servers);
        }
        if( openapi.getNumPathsObject() != 0 ){
        Map<String, Path> paths = new HashMap<>();
        for( PathsObject p : openapi.getPathsObjects() )
        paths.put( p.getRef(), PathItemOb.composePath(p.getPathItemOb(), map) );
        api3.setPaths(paths);
        }
        if( openapi.hasComponentsObject() )
        api3.setComponents( ComponentsObject.composeComponents(openapi.getComponentsObject(), map) );
        if( openapi.getNumSecurityRequirementObject() != 0 ){
        List<SecurityRequirement> securityRequirements = new ArrayList<>();
        for( SecurityRequirementObject s : openapi.getSecurityRequirementObjects() )
        securityRequirements.add( SecurityRequirementObject.composeSecurityRequirement(s, map) );
        api3.setSecurityRequirements(securityRequirements);
        }
        if( openapi.getNumTagObject() != 0 ){
        List<org.openapi4j.parser.model.v3.Tag> tags = new ArrayList<>();
        for( TagObject t : openapi.getTagObjects() )
        tags.add( TagObject.composeTag(t, map) );
        api3.setTags( tags );
        }
        if( openapi.hasExternalDocObject() )
        api3.setExternalDocs(ExternalDocObject.composeExternalDocs(openapi.getExternalDocObject(), map));
        if( openapi.getContext() != null )
        api3.setContext(openapi.getContext());
        if( openapi.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : openapi.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        api3.setExtensions(extensionMap);
        }

        return api3;
        }

public static Info InfoObject.composeInfo (InfoObject infoObject, Map<Object, ASTNode> map){
        Info info = new Info();

        if( !infoObject.getTitle().isEmpty() )
            info.setTitle(infoObject.getTitle());
        if( !infoObject.getVersion().isEmpty() )
            info.setVersion(infoObject.getVersion());
        if( !infoObject.getDescription().isEmpty() )
        info.setDescription(infoObject.getDescription());
        if( !infoObject.getTermsOfService().isEmpty() )
        info.setTermsOfService(infoObject.getTermsOfService());
        if( infoObject.hasContactObject() )
        info.setContact(ContactObject.composeContact(infoObject.getContactObject()));
        if( infoObject.hasLicenseObject() )
        info.setLicense(LicenseObject.composeLicense(infoObject.getLicenseObject()));
        if( infoObject.getNumExtension() != 0 ){
        Map<String, Object> extension = new HashMap<>();
        for( Extension e : infoObject.getExtensions() )
        extension.put(e.getKey(), e.getValue());
        info.setExtensions(extension);
        }

        map.put(info, infoObject);
        return info;
        }

public static Contact ContactObject.composeContact (ContactObject contactObject, Map<Object, ASTNode> map){
        Contact contact = new Contact();

        if( !contactObject.getName().isEmpty() )
        contact.setName( contactObject.getName() );
        if( !contactObject.getUrl().isEmpty() )
        contact.setUrl( contactObject.getUrl() );
        if( !contactObject.getEmail().isEmpty() )
        contact.setEmail( contactObject.getEmail() );
        if( contactObject.getNumExtension() != 0 ){
        Map<String, Object> extensions = new HashMap<>();
        for( Extension e : contactObject.getExtensions() )
        extensions.put(e.getKey(), e.getValue());
        contact.setExtensions(extensions);
        }

        map.put(contact, contactObject);
        return contact;
        }

public static License LicenseObject.composeLicense (LicenseObject licenseObject, Map<Object, ASTNode> map){
        License license = new License();

        if( !licenseObject.getName().isEmpty() )
        license.setName( licenseObject.getName() );
        if( !licenseObject.getUrl().isEmpty() )
        license.setUrl( licenseObject.getUrl() );
        if( licenseObject.getNumExtension() != 0 ){
        Map<String, Object> extensions = new HashMap<>();
        for( Extension e : licenseObject.getExtensions() )
        extensions.put(e.getKey(), e.getValue());
        license.setExtensions(extensions);
        }

        map.put(license, licenseObject);
        return license;
        }

public static Server ServerObject.composeServer (ServerObject serverObject, Map<Object, ASTNode> map){
        Server server = new Server();

        if( !serverObject.getUrl().isEmpty() )
        server.setUrl(serverObject.getUrl());
        if( !serverObject.getDescription().isEmpty() )
        server.setDescription( serverObject.getDescription() );
        if( serverObject.hasServerVariablesTuple() ){
        Map<String, ServerVariable> serverVariables = new HashMap<>();
        for( ServerVariablesTuple s : serverObject.getServerVariablesTuples() )
        serverVariables.put( s.getName(), ServerVariableObject.composeServerVariable(s.getServerVariableObject(), map) );
        server.setVariables(serverVariables);
        }
        if( serverObject.getNumExtension() != 0 ){
        Map<String, Object> extensions = new HashMap<>();
        for( Extension e : serverObject.getExtensions() )
        extensions.put(e.getKey(), e.getValue());
        server.setExtensions(extensions);
        }

        map.put(server, serverObject);
        return server;
        }

public static ServerVariable ServerVariableObject.composeServerVariable (ServerVariableObject serverVariableObject, Map<Object, ASTNode> map){
        ServerVariable serverVariable = new ServerVariable();

        if( !serverVariableObject.getDefault().isEmpty() )
        serverVariable.setDefault(serverVariableObject.getDefault());
        if( !serverVariableObject.getDescription().isEmpty() )
        serverVariable.setDescription(serverVariableObject.getDescription());
        if( serverVariableObject.getNumEnum() != 0 ){
        List<String> enums = new ArrayList<>();
        for( Enum e : serverVariableObject.getEnums() )
        enums.add( e.getEnumValue() );
        serverVariable.setEnums( enums );
        }
        if( serverVariableObject.getNumExtension() != 0 ){
        Map<String, Object> extensions = new HashMap<>();
        for( Extension e : serverVariableObject.getExtensions() )
        extensions.put(e.getKey(), e.getValue());
        serverVariable.setExtensions(extensions);
        }

        map.put(serverVariable, serverVariableObject);
        return serverVariable;
        }

public static Components ComponentsObject.composeComponents (ComponentsObject componentsObject, Map<Object, ASTNode> map){
        Components components = new Components();

        if( componentsObject.getNumSchemaTuple() != 0 ){
        Map<String, org.openapi4j.parser.model.v3.Schema> schemaMap = new HashMap<>();
        for( SchemaTuple t : componentsObject.getSchemaTuples() )
        schemaMap.put(t.getKey(), SchemaOb.composeSchema(t.getSchemaOb(), map));
        components.setSchemas(schemaMap);
        }
        if( componentsObject.getNumResponseTuple() != 0 ){
        Map<String, Response> responseMap = new HashMap<>();
        for( ResponseTuple t : componentsObject.getResponseTuples() )
        responseMap.put(t.getKey(), ResponseOb.composeResponse(t.getResponseOb(), map));
        components.setResponses(responseMap);
        }
        if( componentsObject.getNumParameterTuple() != 0 ){
        Map<String, Parameter> parameterMap = new HashMap<>();
        for( ParameterTuple t : componentsObject.getParameterTuples() )
        parameterMap.put(t.getKey(), ParameterOb.composeParameter(t.getParameterOb(), map));
        components.setParameters(parameterMap);
        }
        if( componentsObject.getNumExampleTuple() != 0 ){
        Map<String, Example> exampleMap = new HashMap<>();
        for( ExampleTuple t : componentsObject.getExampleTuples() )
        exampleMap.put(t.getKey(), ExampleObject.composeExample(t.getExampleObject(), map));
        components.setExamples(exampleMap);
        }
        if( componentsObject.getNumRequestBodyTuple() != 0 ){
        Map<String, RequestBody> requestBodyMap = new HashMap<>();
        for( RequestBodyTuple t : componentsObject.getRequestBodyTuples() )
        requestBodyMap.put(t.getKey(), RequestBodyOb.composeRequestBody(t.getRequestBodyOb(), map));
        components.setRequestBodies(requestBodyMap);
        }
        if( componentsObject.getNumHeaderTuple() != 0 ){
        Map<String, Header> headerMap = new HashMap<>();
        for( HeaderTuple t : componentsObject.getHeaderTuples() )
        headerMap.put(t.getKey(), HeaderOb.composeHeader(t.getHeaderOb(), map));
        components.setHeaders(headerMap);
        }
        if( componentsObject.getNumSecuritySchemeTuple() != 0 ){
        Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();
        for( SecuritySchemeTuple t : componentsObject.getSecuritySchemeTuples() )
        securitySchemeMap.put(t.getKey(), SecuritySchemeOb.composeSecurityScheme(t.getSecuritySchemeOb(), map));
        components.setSecuritySchemes(securitySchemeMap);
        }
        if( componentsObject.getNumLinkTuple() != 0 ){
        Map<String, Link> linkMap = new HashMap<>();
        for( LinkTuple t : componentsObject.getLinkTuples() )
        linkMap.put(t.getKey(), LinkOb.composeLink(t.getLinkOb(), map));
        components.setLinks(linkMap);
        }
        if( componentsObject.getNumCallbackTuple() != 0 ){
        Map<String, Callback> callbackMap = new HashMap<>();
        for( CallbackTuple t : componentsObject.getCallbackTuples() )
        callbackMap.put(t.getKey(), CallbackOb.composeCallback(t.getCallbackOb(), map));
        components.setCallbacks(callbackMap);
        }
        if( componentsObject.getNumExtension() != 0 ){
        Map<String, Object> extensions = new HashMap<>();
        for( Extension e : componentsObject.getExtensions() )
        extensions.put(e.getKey(), e.getValue());
        components.setExtensions(extensions);
        }

        return components;
        }

public static Path PathItemOb.composePath (PathItemOb pathItem, Map<Object, ASTNode> map){
        Path path = new Path();

        if( !pathItem.getRef().isEmpty() )
        path.setRef(pathItem.getRef());
        if( !pathItem.getSummary().isEmpty())
        path.setSummary(pathItem.getSummary());
        if( !pathItem.getDescription().isEmpty() )
        path.setDescription(pathItem.getDescription());
        if( pathItem.hasGet() )
        path.setGet( OperationObject.composeOperation(pathItem.getGet().getOperationObject()) );
        if( pathItem.hasPut() )
        path.setPut( OperationObject.composeOperation(pathItem.getPut().getOperationObject()) );
        if( pathItem.hasPost() )
        path.setPost( OperationObject.composeOperation(pathItem.getPost().getOperationObject()) );
        if( pathItem.hasDelete() )
        path.setDelete( OperationObject.composeOperation(pathItem.getDelete().getOperationObject()) );
        if( pathItem.hasOptions() )
        path.setOptions( OperationObject.composeOperation(pathItem.getOptions().getOperationObject()) );
        if( pathItem.hasHead() )
        path.setHead( OperationObject.composeOperation(pathItem.getHead().getOperationObject()) );
        if( pathItem.hasPatch() )
        path.setPatch( OperationObject.composeOperation(pathItem.getPatch().getOperationObject()) );
        if( pathItem.getNumServerObject() != 0 ){
        for( ServerObject s : pathItem.getServerObjects() )
        path.addServer( ServerObject.composeServer(s) );
        }
        if( pathItem.getNumParameterObject() != 0 ){
        for( ParameterObject p : pathItem.getParameterObjects() )
        path.addParameter( ParameterObject.composeParameter(p) );
        }
        if( pathItem.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : pathItem.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        path.setExtensions(extensionMap);
        }

        return path;
        }

public static Operation OperationObject.composeOperation (OperationObject operationObject, Map<Object, ASTNode> map){
        Operation operation = new Operation();


        if( operationObject.getNumTag() != 0 ){
        for( de.tudresden.inf.st.openapi.ast.Tag t : operationObject.getTags() )
        operation.addTag(t.getTag());
        }
        if( !operationObject.getSummary().isEmpty() )
        operation.setSummary( operationObject.getSummary() );
        if( !operationObject.getDescription().isEmpty() )
        operation.setDescription( operationObject.getDescription() );
        if( operationObject.hasExternalDocObject() )
        operation.setExternalDocs( ExternalDocObject.composeExternalDocs(operationObject.getExternalDocObject()) );
        if( !operationObject.getOperationID().isEmpty() )
        operation.setOperationId( operationObject.getOperationID() );
        if( operationObject.getNumParameterObject() != 0 ){
        for( ParameterObject p : operationObject.getParameterObjects() )
        operation.addParameter( ParameterObject.composeParameter(p) );
        }
        if( operationObject.hasRequestBodyObject() )
        operation.setRequestBody( RequestBodyObject.composeRequestBody(operationObject.getRequestBodyObject()));
        if( operationObject.getNumResponseTuple() != 0){
        Map<String, Response> responseMap = new HashMap<>();
        for( ResponseTuple t : operationObject.getResponseTuples() )
        responseMap.put(t.getKey(), ResponseObject.composeResponse(t.getResponseObject()));
        operation.setResponses(responseMap);
        }
        if( operationObject.getNumCallbackTuple() != 0 ){
        Map<String, Callback> callbacks = new HashMap<>();
        for( CallbackTuple t : operationObject.getCallbackTuples() ) {
        if( !t.getCallbackObject().getRef().isEmpty() ){
        Callback callback = new Callback();
        callback.setRef(t.getCallbackObject().getRef());
        callbacks.put(t.getKey(), callback);
        }
        else
        callbacks.put(t.getKey(), CallbackObject.composeCallback(t.getCallbackObject()));
        operation.setCallbacks(callbacks);
        }
        }
        if( operationObject.getDeprecatedBoolean() != null )
        operation.setDeprecated(operationObject.getDeprecatedBoolean());
        if( operationObject.getSecurityRequirementObjects() != null ){
        for( SecurityRequirementObject s : operationObject.getSecurityRequirementObjects() )
        operation.addSecurityRequirement( SecurityRequirementObject.composeSecurityRequirement(s) );
        }
        if( operationObject.getNumServerObject() != 0 ){
        for( ServerObject s : operationObject.getServerObjects() )
        operation.addServer( ServerObject.composeServer(s) );
        }
        if( operationObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : operationObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        operation.setExtensions(extensionMap);
        }

        return operation;
        }

public static ExternalDocs ExternalDocObject.composeExternalDocs (ExternalDocObject externalDocObject, Map<Object, ASTNode> map){
        ExternalDocs externalDocs = new ExternalDocs();

        if( !externalDocObject.getDescription().isEmpty() )
        externalDocs.setDescription(externalDocObject.getDescription());
        if( !externalDocObject.getUrl().isEmpty() )
        externalDocs.setUrl(externalDocObject.getUrl());
        if( externalDocObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : externalDocObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        externalDocs.setExtensions(extensionMap);
        }

        return externalDocs;
        }

public static Parameter ParameterOb.composeParameter (ParameterOb parameterObject, Map<Object, ASTNode> map){
        Parameter parameter = new Parameter();

        if( !parameterObject.getRef().isEmpty() )
        parameter.setRef(parameterObject.getRef());
        if( !parameterObject.getName().isEmpty() )
        parameter.setName(parameterObject.getName());
        if( !parameterObject.getIn().isEmpty() )
        parameter.setIn(parameterObject.getIn());
        if( parameterObject.getRequired() != null )
        parameter.setRequired(parameterObject.getRequired());
        if( !parameterObject.getDescription().isEmpty() )
        parameter.setDescription(parameterObject.getDescription());
        if( parameterObject.getDeprecatedBoolean() != null )
        parameter.setDeprecated(parameterObject.getDeprecatedBoolean());
        if( !parameterObject.getStyle().isEmpty() )
        parameter.setStyle(parameterObject.getStyle());
        if( parameterObject.getAllowReserved() != null )
        parameter.setAllowReserved(parameterObject.getAllowReserved());
        if( parameterObject.getExplode() != null )
        parameter.setExplode(parameterObject.getExplode());
        if( parameterObject.getSchemaObject() != null )
        parameter.setSchema(SchemaObject.composeSchema(parameterObject.getSchemaObject()));
        if( parameterObject.getExample() != null )
        parameter.setExample(parameterObject.getExample());
        if( parameterObject.getNumExampleTuple() != 0 ){
        Map<String, Example> exampleMap = new HashMap<>();
        for( ExampleTuple t : parameterObject.getExampleTuples() )
        exampleMap.put(t.getKey(), ExampleObject.composeExample(t.getExampleObject()));
        parameter.setExamples(exampleMap);
        }
        if( parameterObject.getNumContentTuple() != 0 ){
        Map<String, MediaType> contentMap = new HashMap<>();
        for( ContentTuple t : parameterObject.getContentTuples() )
        contentMap.put(t.getKey(), MediaTypeObject.composeMediaType(t.getMediaTypeObject()));
        parameter.setContentMediaTypes(contentMap);
        }
        if( parameterObject.getRequired() != null )
            parameter.setRequired(parameterObject.getRequired());
        if( parameterObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : parameterObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        parameter.setExtensions(extensionMap);
        }

        return parameter;
        }

public static org.openapi4j.parser.model.v3.RequestBody RequestBodyOb.composeRequestBody (RequestBodyOb requestBodyObject, Map<Object, ASTNode> map){
        org.openapi4j.parser.model.v3.RequestBody requestBody = new org.openapi4j.parser.model.v3.RequestBody();

        if( requestBodyObject.getNumContentTuple() != 0 ){
        Map<String, MediaType> contents = new HashMap<>();
        for( ContentTuple t : requestBodyObject.getContentTuples())
        contents.put(t.getKey(), MediaTypeObject.composeMediaType(t.getMediaTypeObject()));
        requestBody.setContentMediaTypes(contents);
        }
        if( !requestBodyObject.getDescription().isEmpty() )
        requestBody.setDescription(requestBodyObject.getDescription());
        if( requestBodyObject.getRequired() != null )
        requestBody.setRequired(requestBodyObject.getRequired());
        if( !requestBodyObject.getRef().isEmpty() )
        requestBody.setRef(requestBodyObject.getRef());

        return requestBody;
        }

public static MediaType MediaTypeObject.composeMediaType (MediaTypeObject mediaTypeObject, Map<Object, ASTNode> map){
        MediaType mediaType = new MediaType();

        if( mediaTypeObject.getSchemaObject() != null )
        mediaType.setSchema(SchemaObject.composeSchema(mediaTypeObject.getSchemaObject()));
        if( mediaTypeObject.getExample() != null )
        mediaType.setExample(mediaTypeObject.getExample());
        if( mediaTypeObject.getNumExampleTuple() != 0 ){
        Map<String, Example> exampleMap = new HashMap<>();
        for( ExampleTuple t : mediaTypeObject.getExampleTuples() )
        exampleMap.put(t.getKey(), ExampleObject.composeExample(t.getExampleObject()));
        mediaType.setExamples(exampleMap);
        }
        if( mediaTypeObject.getNumEncodingTuple() != 0 ){
        Map<String, EncodingProperty> encodingMap = new HashMap<>();
        for( EncodingTuple t : mediaTypeObject.getEncodingTuples() )
        encodingMap.put(t.getKey(), EncodingObject.composeEncodingProperty(t.getEncodingObject()));
        mediaType.setEncodings(encodingMap);
        }

        return mediaType;
        }

public static EncodingProperty EncodingObject.composeEncodingProperty (EncodingObject encodingObject, Map<Object, ASTNode> map){
        EncodingProperty encodingProperty = new EncodingProperty();

        if( !encodingObject.getContentType().isEmpty() )
        encodingProperty.setContentType( encodingObject.getContentType() );
        if( encodingObject.getNumHeaderTuple() != 0 ){
        Map<String, Header> headers = new HashMap<>();
        for( HeaderTuple t : encodingObject.getHeaderTuples() )
        headers.put(t.getKey(), HeaderObject.composeHeader(t.getHeaderObject()));
        encodingProperty.setHeaders(headers);
        }
        if( !encodingObject.getStyle().isEmpty() )
        encodingProperty.setStyle(encodingObject.getStyle());
        if( encodingObject.getExplode() != null )
        encodingProperty.setExplode(encodingObject.getExplode());
        if( encodingObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : encodingObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        encodingProperty.setExtensions(extensionMap);
        }

        return encodingProperty;
        }

public static Response ResponseOb.composeResponse (ResponseObject responseObject, Map<Object, ASTNode> map){
        Response response = new Response();

        if( !responseObject.getRef().isEmpty() )
        response.setRef(responseObject.getRef());
        if( !responseObject.getDescription().isEmpty() )
        response.setDescription(responseObject.getDescription());
        if( responseObject.getNumHeaderTuple() != 0 ){
        Map<String, Header> headers = new HashMap<>();
        for( HeaderTuple t : responseObject.getHeaderTuples() )
        headers.put(t.getKey(), HeaderObject.composeHeader(t.getHeaderObject()));
        response.setHeaders(headers);
        }
        if( responseObject.getNumContentTuple() != 0 ){
        Map<String, MediaType> contents = new HashMap<>();
        for( ContentTuple t : responseObject.getContentTuples() )
        contents.put(t.getKey(), MediaTypeObject.composeMediaType(t.getMediaTypeObject()));
        response.setContentMediaTypes(contents);
        }
        if( responseObject.getNumLinkTuple() != 0 ){
        Map<String, Link> links = new HashMap<>();
        for( LinkTuple t : responseObject.getLinkTuples() )
        links.put(t.getKey(), LinkObject.composeLink(t.getLinkObject()));
        response.setLinks(links);
        }

        return response;
        }

public static Callback CallbackOb.composeCallback (CallbackObject callbackObject, Map<Object, ASTNode> map){
        Callback callback = new Callback();

        if( callbackObject.getNumExpression() != 0 ){
        Map<String, Path> paths = new HashMap<>();
        for( Expression e : callbackObject.getExpressions() )
        paths.put( e.getName(), PathItem.composePath( e.getPathItem() ));
        callback.setCallbackPaths(paths);
        }

        return callback;
        }

public static Example ExampleObject.composeExample (ExampleObject exampleObject, Map<Object, ASTNode> map){
        Example example = new Example();

        if( !exampleObject.getSummary().isEmpty() )
        example.setSummary( exampleObject.getSummary() );
        if( !exampleObject.getDescription().isEmpty() )
        example.setDescription( exampleObject.getDescription() );
        if( exampleObject.getValue() != null )
        example.setValue( exampleObject.getValue() );
        if( !exampleObject.getExternalValue().isEmpty() )
        example.setExternalValue( exampleObject.getExternalValue() );
        if( exampleObject.getNumExtension() != 0 ){
        Map<String, Object> extension = new HashMap<>();
        for( Extension e : exampleObject.getExtensions() )
        extension.put(e.getKey(), e.getValue());
        example.setExtensions(extension);
        }

        return example;
        }

public static Link LinkOb.composeLink (LinkObject linkObject, Map<Object, ASTNode> map){
        Link link = new Link();


        if( !linkObject.getRef().isEmpty() )
        link.setRef(linkObject.getRef());
        if( !linkObject.getOperationRef().isEmpty() )
        link.setOperationRef( linkObject.getOperationRef() );
        if( !linkObject.getOperationID().isEmpty() )
        link.setOperationId( linkObject.getOperationID() );
        if( linkObject.getNumLinkParameterTuple() != 0 ){
        Map<String, String> parameters = new HashMap<>();
        for( LinkParameterTuple t : linkObject.getLinkParameterTuples() )
        parameters.put( t.getLinkParameterKey(), t.getLinkParameterValue() );
        link.setParameters(parameters);
        }
        if( !linkObject.getDescription().isEmpty() )
        link.setDescription( linkObject.getDescription() );
        if( linkObject.hasServerObject() )
        link.setServer( ServerObject.composeServer(linkObject.getServerObject()) );

        return link;
        }

public static Header HeaderOb.composeHeader (HeaderObject headerObject, Map<Object, ASTNode> map){
        Header header = new Header();

        if( !headerObject.getRef().isEmpty() )
        header.setRef(headerObject.getRef());
        if( headerObject.getRequired() != null )
        header.setRequired(headerObject.getRequired());
        if( !headerObject.getDescription().isEmpty() )
        header.setDescription( headerObject.getDescription() );
        if( !headerObject.getStyle().isEmpty() )
        header.setStyle(headerObject.getStyle());
        if( headerObject.getExplode() != null )
        header.setExplode(headerObject.getExplode());
        if( headerObject.getAllowReserved() != null )
        header.setAllowReserved(headerObject.getAllowReserved());
        if( headerObject.getExample() != null )
        header.setExample(headerObject.getExample());
        if( headerObject.getNumExampleTuple() != 0 ){
        Map<String, Example> examples = new HashMap<>();
        for( ExampleTuple t : headerObject.getExampleTuples() )
        examples.put(t.getKey(), ExampleObject.composeExample(t.getExampleObject()));
        header.setExample(examples);
        }
        if( headerObject.getNumContentTuple() != 0 ){
        Map<String, MediaType> contents = new HashMap<>();
        for( ContentTuple t : headerObject.getContentTuples() )
        contents.put(t.getKey(), MediaTypeObject.composeMediaType(t.getMediaTypeObject()));
        header.setContentMediaTypes(contents);
        }
        if( headerObject.hasSchemaObject() )
            header.setSchema(SchemaObject.composeSchema(headerObject.getSchemaObject()));

        return header;
        }

public static org.openapi4j.parser.model.v3.Tag TagObject.composeTag (TagObject tagObject, Map<Object, ASTNode> map){
        org.openapi4j.parser.model.v3.Tag tag = new org.openapi4j.parser.model.v3.Tag();

        tag.setName( tagObject.getName() );

        if( !tagObject.getDescription().isEmpty() )
        tag.setDescription( tagObject.getDescription() );
        if( tagObject.hasExternalDocObject() )
        tag.setExternalDocs( ExternalDocObject.composeExternalDocs(tagObject.getExternalDocObject()) );
        if( tagObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : tagObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        tag.setExtensions(extensionMap);
        }

        return tag;
        }

public static org.openapi4j.parser.model.v3.Schema SchemaOb.composeSchema (SchemaOb schemaOb, Map<Object, ASTNode> map){
        org.openapi4j.parser.model.v3.Schema schema = new org.openapi4j.parser.model.v3.Schema();

        if( !schemaObject.getRef().isEmpty() )
        schema.setRef(schemaObject.getRef());
        if( schemaObject.getAdditionalProperties() != null )
        schema.setAdditionalProperties(composeSchema(schemaObject.getAdditionalProperties()));
        if( schemaObject.getAdditionalPropertiesAllowed() != null )
        schema.setAdditionalPropertiesAllowed(schemaObject.getAdditionalPropertiesAllowed());
        if( schemaObject.getDefaultValue() != null )
        schema.setDefault(schemaObject.getDefaultValue());
        if( !schemaObject.getDescription().isEmpty() )
        schema.setDescription(schemaObject.getDescription());
        if( schemaObject.getDeprecatedBoolean() != null )
        schema.setDeprecated(schemaObject.getDeprecatedBoolean());
        if( schemaObject.hasDiscriminatorObject() )
        schema.setDiscriminator(DiscriminatorObject.composeDiscriminator(schemaObject.getDiscriminatorObject()));
        if( schemaObject.getNumEnumObj() != 0 ){
        for( EnumObj e : schemaObject.getEnumObjs() )
        schema.addEnum(e.getEnumOb());
        }
        if( schemaObject.getExample() != null )
        schema.setExample(schemaObject.getExample());
        if( schemaObject.getExclusiveMaximum() != null )
        schema.setExclusiveMaximum(schemaObject.getExclusiveMaximum());
        if( schemaObject.getExclusiveMinimum() != null )
        schema.setExclusiveMinimum(schemaObject.getExclusiveMinimum());
        if( schemaObject.hasExternalDocObject() )
        schema.setExternalDocs(ExternalDocObject.composeExternalDocs(schemaObject.getExternalDocObject()));
        if( !schemaObject.getFormat().isEmpty() )
        schema.setFormat(schemaObject.getFormat());
        if( schemaObject.hasItemsSchema() )
        schema.setItemsSchema(composeSchema(schemaObject.getItemsSchema().getSchemaObject()));
        if( schemaObject.getMaximum() != null )
        schema.setMaximum(schemaObject.getMaximum());
        if( schemaObject.getMinimum() != null )
        schema.setMinimum(schemaObject.getMinimum());
        if( schemaObject.getMaxItems() != null )
        schema.setMaxItems(schemaObject.getMaxItems());
        if( schemaObject.getMinItems() != null )
        schema.setMinItems(schemaObject.getMinItems());
        if( schemaObject.getMaxLength() != null )
        schema.setMaxLength(schemaObject.getMaxLength());
        if( schemaObject.getMinLength() != null )
        schema.setMinLength(schemaObject.getMinLength());
        if( schemaObject.getMaxProperties() != null )
        schema.setMaxProperties(schemaObject.getMaxProperties());
        if( schemaObject.getMinProperties() != null )
        schema.setMinProperties(schemaObject.getMinProperties());
        if( schemaObject.getMultipleOf() != null )
        schema.setMultipleOf(schemaObject.getMultipleOf());
        if( schemaObject.hasNotSchema() )
        schema.setNotSchema(composeSchema(schemaObject.getNotSchema().getSchemaObject()));
        if( schemaObject.getNullable() != null )
        schema.setNullable(schemaObject.getNullable());
        if( !schemaObject.getPattern().isEmpty() )
        schema.setPattern(schemaObject.getPattern());
        if( schemaObject.getNumPropertyItem() != 0 ){
        Map<String, org.openapi4j.parser.model.v3.Schema> properties = new HashMap<>();
        for( PropertyItem p : schemaObject.getPropertyItemList() )
        properties.put(p.getName(), composeSchema(p.getSchemaObject()));
        schema.setProperties(properties);
        }
        if( schemaObject.getNumRequiredField() != 0 ){
        for( RequiredField r : schemaObject.getRequiredFields() )
        schema.addRequiredField(r.getValue());
        }
        if( schemaObject.getNumAllOfSchema() != 0 ){
        for( AllOfSchema a : schemaObject.getAllOfSchemas() )
        schema.addAllOfSchema(composeSchema(a.getSchemaObject()));
        }
        if( schemaObject.getNumAnyOfSchema() != 0 ){
        for( AnyOfSchema a : schemaObject.getAnyOfSchemas() )
        schema.addAnyOfSchema(composeSchema(a.getSchemaObject()));
        }
        if( schemaObject.getNumOneOfSchema() != 0 ){
        for( OneOfSchema o : schemaObject.getOneOfSchemas() )
        schema.addOneOfSchema(composeSchema(o.getSchemaObject()));
        }
        if( schemaObject.getReadOnly() != null )
        schema.setReadOnly(schemaObject.getReadOnly());
        if( schemaObject.getWriteOnly() != null )
        schema.setWriteOnly(schemaObject.getWriteOnly());
        if( !schemaObject.getType().isEmpty() )
        schema.setType(schemaObject.getType());
        if( !schemaObject.getTitle().isEmpty() )
        schema.setTitle(schemaObject.getTitle());
        if( schemaObject.getUniqueItems() != null )
        schema.setUniqueItems(schemaObject.getUniqueItems());
        if( schemaObject.hasXmlObject() )
        schema.setXml(XmlObject.composeXml(schemaObject.getXmlObject()));
        if( schemaObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : schemaObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        schema.setExtensions(extensionMap);
        }

        return schema;
        }

public static Discriminator DiscriminatorObject.composeDiscriminator (DiscriminatorObject discriminatorObject, Map<Object, ASTNode> map) {
        Discriminator discriminator = new Discriminator();

        if( !discriminatorObject.getPropertyName().isEmpty() )
        discriminator.setPropertyName(discriminatorObject.getPropertyName());
        if( discriminatorObject.getNumMappingTuple() != 0 ){
        Map<String, String> mapping = new HashMap<>();
        for( MappingTuple m : discriminatorObject.getMappingTuples() )
        mapping.put(m.getKey(), m.getValue());
        discriminator.setMapping(mapping);
        }

        return discriminator;
        }

public static Xml XmlObject.composeXml (XmlObject xmlObject) {
        Xml xml = new Xml();

        if( !xmlObject.getName().isEmpty() )
        xml.setName(xmlObject.getName());
        if( !xmlObject.getNamespace().isEmpty() )
        xml.setNamespace(xmlObject.getNamespace());
        if( !xmlObject.getPrefix().isEmpty() )
        xml.setPrefix(xmlObject.getPrefix());
        if( xmlObject.getAttribute() != null )
        xml.setAttribute((boolean) xmlObject.getAttribute());
        if( xmlObject.getWrapped() != null )
        xml.setWrapped((boolean) xmlObject.getWrapped());

        return xml;
        }

public static SecurityScheme SecuritySchemeOb.composeSecurityScheme (SecuritySchemeObject securitySchemeObject, Map<Object, ASTNode> map){
        SecurityScheme securityScheme = new SecurityScheme();

        if( !securitySchemeObject.getType().isEmpty() )
        securityScheme.setType(securitySchemeObject.getType());
        if( !securitySchemeObject.getName().isEmpty() )
        securityScheme.setName(securitySchemeObject.getName());
        if( !securitySchemeObject.getIn().isEmpty() )
        securityScheme.setIn(securitySchemeObject.getIn());
        if( !securitySchemeObject.getScheme().isEmpty() )
        securityScheme.setScheme(securitySchemeObject.getScheme());
        if( !securitySchemeObject.getOpenIdConnectUrl().isEmpty() )
        securityScheme.setOpenIdConnectUrl(securitySchemeObject.getOpenIdConnectUrl());
        if( securitySchemeObject.getOAuthFlowsObject() != null )
        securityScheme.setFlows(OAuthFlowsObject.composeOAuthFlows(securitySchemeObject.getOAuthFlowsObject()));
        if( !securitySchemeObject.getDescription().isEmpty() )
        securityScheme.setDescription( securitySchemeObject.getDescription() );
        if( !securitySchemeObject.getBearerFormat().isEmpty() )
        securityScheme.setBearerFormat( securitySchemeObject.getBearerFormat() );
        if( securitySchemeObject.getNumExtension() != 0 ){
        Map<String, Object> extensionMap = new HashMap<>();
        for( Extension e : securitySchemeObject.getExtensions() )
        extensionMap.put(e.getKey(), e.getValue());
        securityScheme.setExtensions(extensionMap);
        }

        return securityScheme;
        }

public static OAuthFlows OAuthFlowsObject.composeOAuthFlows (OAuthFlowsObject oAuthFlowsObject, Map<Object, ASTNode> map){
        OAuthFlows oAuthFlows = new OAuthFlows();

        if( oAuthFlowsObject.hasImplicit() )
        oAuthFlows.setImplicit( OAuthFlowObject.composeOAuthFlow(oAuthFlowsObject.getImplicit().getOAuthFlowObject()) );
        if( oAuthFlowsObject.hasPassword() ){
        System.out.println("Password eingegangen : " + oAuthFlowsObject.getPassword().getOAuthFlowObject().getAuthorizationUrl() );
        System.out.println("Password eingegangen : " + oAuthFlowsObject.getPassword().getOAuthFlowObject().getConfiguration() );
        System.out.println("Password eingegangen : " + oAuthFlowsObject.getPassword().getOAuthFlowObject().getTokenUrl() );
        System.out.println("Password eingegangen : " + oAuthFlowsObject.getPassword().getOAuthFlowObject().getRefreshUrl() );
        oAuthFlows.setPassword( OAuthFlowObject.composeOAuthFlow(oAuthFlowsObject.getPassword().getOAuthFlowObject()) );
        }
        if( oAuthFlowsObject.hasClientCredentials() )
        oAuthFlows.setClientCredentials( OAuthFlowObject.composeOAuthFlow(oAuthFlowsObject.getClientCredentials().getOAuthFlowObject()) );
        if( oAuthFlowsObject.hasAuthorizationCode() )
        oAuthFlows.setAuthorizationCode( OAuthFlowObject.composeOAuthFlow(oAuthFlowsObject.getAuthorizationCode().getOAuthFlowObject()) );

        return oAuthFlows;
        }

public static OAuthFlow OAuthFlowObject.composeOAuthFlow (OAuthFlowObject oAuthFlowObject, Map<Object, ASTNode> map){
        OAuthFlow oAuthFlow = new OAuthFlow();
        Map<String, String> scopes = new HashMap<>();

        if( oAuthFlowObject.getAuthorizationUrl() != null )
        oAuthFlow.setAuthorizationUrl( oAuthFlowObject.getAuthorizationUrl() );
        if( oAuthFlowObject.getTokenUrl() != null )
        oAuthFlow.setTokenUrl( oAuthFlowObject.getTokenUrl() );
        for( ScopesTuple t : oAuthFlowObject.getScopesTuples() )
        scopes.put(t.getScopesKey(), t.getScopesValue());
        oAuthFlow.setScopes(scopes);

        if( oAuthFlowObject.getRefreshUrl() != null )
        oAuthFlow.setRefreshUrl(oAuthFlowObject.getRefreshUrl());

        return oAuthFlow;
        }

public static SecurityRequirement SecurityRequirementObject.composeSecurityRequirement (SecurityRequirementObject securityRequirementObject, Map<Object, ASTNode> map){
        SecurityRequirement securityRequirement = new SecurityRequirement();

        if( securityRequirementObject.getNumSecurityRequirementTuple() != 0 ){
        Map<String, List<String>> requirements = new HashMap<>();
        for( SecurityRequirementTuple t : securityRequirementObject.getSecurityRequirementTuples() ){
        List<String> values = new ArrayList<>();
        for( SecurityRequirementValue v : t.getSecurityRequirementValues() )
        values.add(v.getValue());
        requirements.put(t.getName(), values);
        }
        securityRequirement.setRequirements(requirements);
        }

        return securityRequirement;
        }
}