aspect Parser {

public static OpenAPIObject OpenAPIObject.parseOpenAPI(OpenApi3 api) throws IOException, ResolutionException, ValidationException {
        OpenAPIObject openapi = new OpenAPIObject();

        if( api.getOpenapi() != null )
        openapi.setOpenAPI(api.getOpenapi());
        if( api.getInfo() != null )
        openapi.setInfoObject(InfoObject.parseInfo(api.getInfo()));
        if( api.getPaths() != null ){
        for( String key : api.getPaths().keySet() )
        openapi.addPathsObject(new PathsObject( key, PathItem.parsePath(api.getPath(key))));
        }
        if( api.getServers() != null ){
        for( Server s : api.getServers() )
        openapi.addServerObject(ServerObject.parseServer(s));
        }
        if( api.getComponents() != null )
        openapi.setComponentsObject(ComponentsObject.parseComponents(api.getComponents()));
        if( api.getSecurityRequirements() != null ){
        for( SecurityRequirement s : api.getSecurityRequirements() )
        openapi.addSecurityRequirementObject(SecurityRequirementObject.parseSecurityRequirement(s));
        }
        if( api.getTags() != null ){
        for( org.openapi4j.parser.model.v3.Tag t : api.getTags() )
        openapi.addTagObject(TagObject.parseTag(t));
        }
        if( api.getExternalDocs() != null )
        openapi.setExternalDocObject(ExternalDocObject.parseExternalDocs(api.getExternalDocs()));
        if( api.getContext() != null )
        openapi.setContext(api.getContext());

        return openapi;
        }

public static InfoObject InfoObject.parseInfo(Info info) {
        InfoObject infoObject = new InfoObject();

        if( info.getTitle() != null )
            infoObject.setTitle(info.getTitle());
        if( info.getVersion() != null )
            infoObject.setVersion(info.getVersion());
        if( info.getDescription() != null )
        infoObject.setDescription(info.getDescription());
        if( info.getTermsOfService() != null )
        infoObject.setTermsOfService(info.getTermsOfService());
        if( info.getContact() != null )
        infoObject.setContactObject(ContactObject.parseContact(info.getContact()));
        if( info.getLicense() != null )
        infoObject.setLicenseObject(LicenseObject.parseLicense(info.getLicense()));

        return infoObject;
        }

public static ContactObject ContactObject.parseContact(Contact contact){
        ContactObject contactObject = new ContactObject();

        if( contact.getName() != null )
        contactObject.setName( contact.getName() );
        if( contact.getUrl() != null )
        contactObject.setUrl( contact.getUrl() );
        if( contact.getEmail() != null )
        contactObject.setEmail( contact.getEmail() );

        return contactObject;
        }

public static LicenseObject LicenseObject.parseLicense(License license){
        LicenseObject licenseObject = new LicenseObject();

        if( license.getName() != null )
        licenseObject.setName( license.getName() );
        if( license.getUrl() != null )
        licenseObject.setUrl( license.getUrl() );

        return licenseObject;
        }

public static ServerObject ServerObject.parseServer(Server server){
        ServerObject serverObject = new ServerObject();

        if( server.getUrl() != null )
        serverObject.setUrl(server.getUrl());
        if( server.getDescription() != null )
        serverObject.setDescription(server.getDescription());
        if( server.getVariables() != null ){
        for (String key : server.getVariables().keySet())
        serverObject.addServerVariablesTuple(new ServerVariablesTuple(key, ServerVariableObject.parseServerVariable(server.getVariable(key))));
        }

        return serverObject;
        }

public static ServerVariableObject ServerVariableObject.parseServerVariable(ServerVariable serverVariable){
        ServerVariableObject serverVariableObject = new ServerVariableObject();

        if( serverVariable.getDefault() != null )
        serverVariableObject.setDefault(serverVariable.getDefault());
        if( serverVariable.getDescription() != null )
        serverVariableObject.setDescription(serverVariable.getDescription());
        if( serverVariable.getEnums() != null ){
        for( String e : serverVariable.getEnums() )
        serverVariableObject.addEnum(new Enum(e));
        }

        return serverVariableObject;
        }

public static ComponentsObject ComponentsObject.parseComponents(Components components){
        ComponentsObject componentsObject = new ComponentsObject();

        if( components.getSchemas() != null ){
        for( String key : components.getSchemas().keySet() ){
        SchemaTuple schemaTuple = new SchemaTuple();
        if( components.getSchema(key).isRef() ){
        SchemaObject schemaObject = new SchemaObject();
        schemaObject.setRef(components.getSchema(key).getRef());
        schemaTuple.setKey(key);
        schemaTuple.setSchemaObject(schemaObject);
        componentsObject.addSchemaTuple(schemaTuple);
        }
        else{
        schemaTuple.setKey(key);
        schemaTuple.setSchemaObject(SchemaObject.parseSchema(components.getSchema(key)));
        componentsObject.addSchemaTuple(schemaTuple);
        }
        }
        }
        if( components.getResponses() != null ){
        for( String key : components.getResponses().keySet() ){
        ResponseTuple responseTuple = new ResponseTuple();
        if( components.getResponse(key).isRef() ){
        ResponseObject responseObject = new ResponseObject();
        responseObject.setRef(components.getResponse(key).getRef());
        responseTuple.setKey(key);
        responseTuple.setResponseObject(responseObject);
        componentsObject.addResponseTuple(responseTuple);
        }
        else{
        responseTuple.setKey(key);
        responseTuple.setResponseObject(ResponseObject.parseResponse(components.getResponse(key)));
        componentsObject.addResponseTuple(responseTuple);
        }
        }
        }
        if( components.getParameters() != null ){
        for( String key : components.getParameters().keySet() ){
        ParameterTuple parameterTuple = new ParameterTuple();
        if( components.getParameter(key).isRef() ){
        ParameterObject parameterObject = new ParameterObject();
        parameterObject.setRef(components.getParameter(key).getRef());
        parameterTuple.setKey(key);
        parameterTuple.setParameterObject(parameterObject);
        componentsObject.addParameterTuple(parameterTuple);
        }
        else{
        parameterTuple.setKey(key);
        parameterTuple.setParameterObject(ParameterObject.parseParameter(components.getParameter(key)));
        componentsObject.addParameterTuple(parameterTuple);
        }
        }
        }
        if( components.getExamples() != null ){
        for( String key : components.getExamples().keySet() ){
        ExampleTuple exampleTuple = new ExampleTuple();
        ExampleObject exampleObject = new ExampleObject();
        exampleTuple.setKey(key);
        exampleTuple.setExampleObject(ExampleObject.parseExample(components.getExample(key)));
        componentsObject.addExampleTuple(exampleTuple);
        }
        }
        if( components.getRequestBodies() != null ){
        for( String key : components.getRequestBodies().keySet() ){
        RequestBodyTuple requestBodyTuple = new RequestBodyTuple();
        if( components.getRequestBody(key).isRef() ){
        RequestBodyObject requestBodyObject = new RequestBodyObject();
        requestBodyObject.setRef(components.getRequestBody(key).getRef());
        requestBodyTuple.setKey(key);
        requestBodyTuple.setRequestBodyObject(requestBodyObject);
        componentsObject.addRequestBodyTuple(requestBodyTuple);
        }
        else{
        requestBodyTuple.setKey(key);
        requestBodyTuple.setRequestBodyObject(RequestBodyObject.parseRequestBody(components.getRequestBody(key)));
        componentsObject.addRequestBodyTuple(requestBodyTuple);
        }
        }
        }
        if( components.getHeaders() != null ){
        for( String key : components.getHeaders().keySet() ){
        HeaderTuple headerTuple = new HeaderTuple();
        if( components.getHeader(key).isRef() ){
        HeaderObject headerObject = new HeaderObject();
        headerObject.setRef(components.getHeader(key).getRef());
        headerTuple.setKey(key);
        headerTuple.setHeaderObject(headerObject);
        componentsObject.addHeaderTuple(headerTuple);
        }
        else{
        headerTuple.setKey(key);
        headerTuple.setHeaderObject(HeaderObject.parseHeader(components.getHeader(key)));
        componentsObject.addHeaderTuple(headerTuple);
        }
        }
        }
        if( components.getSecuritySchemes() != null ){
        for( String key : components.getSecuritySchemes().keySet() ){
        SecuritySchemeTuple securitySchemeTuple = new SecuritySchemeTuple();
        if( components.getSecurityScheme(key).isRef() ){
        SecuritySchemeObject securitySchemeObject = new SecuritySchemeObject();
        securitySchemeObject.setRef(components.getSecurityScheme(key).getRef());
        securitySchemeTuple.setKey(key);
        securitySchemeTuple.setSecuritySchemeObject(securitySchemeObject);
        componentsObject.addSecuritySchemeTuple(securitySchemeTuple);
        }
        else{
        securitySchemeTuple.setKey(key);
        securitySchemeTuple.setSecuritySchemeObject(SecuritySchemeObject.parseSecurityScheme(components.getSecurityScheme(key)));
        componentsObject.addSecuritySchemeTuple(securitySchemeTuple);
        }
        }
        }
        if( components.getLinks() != null ){
        for( String key : components.getLinks().keySet() ){
        LinkTuple linkTuple = new LinkTuple();
        if( components.getLink(key).isRef() ){
        LinkObject linkObject = new LinkObject();
        linkObject.setRef(components.getLink(key).getRef());
        linkTuple.setKey(key);
        linkTuple.setLinkObject(linkObject);
        componentsObject.addLinkTuple(linkTuple);
        }
        else{
        linkTuple.setKey(key);
        linkTuple.setLinkObject(LinkObject.parseLink(components.getLink(key)));
        componentsObject.addLinkTuple(linkTuple);
        }
        }
        }
        if( components.getCallbacks() != null ){
        for( String key : components.getCallbacks().keySet() ){
        CallbackTuple callbackTuple = new CallbackTuple();
        if( components.getCallback(key).isRef() ){
        CallbackObject callbackObject = new CallbackObject();
        callbackObject.setRef(components.getCallback(key).getRef());
        callbackTuple.setKey(key);
        callbackTuple.setCallbackObject(callbackObject);
        componentsObject.addCallbackTuple(callbackTuple);
        }
        else{
        callbackTuple.setKey(key);
        callbackTuple.setCallbackObject(CallbackObject.parseCallback(components.getCallback(key)));
        componentsObject.addCallbackTuple(callbackTuple);
        }
        }
        }

        return componentsObject;
        }

public static PathItem PathItem.parsePath(Path path){
        PathItem pathItem = new PathItem();


        if( path.getRef() != null )
        pathItem.setRef(path.getRef());
        if( path.getSummary() != null )
        pathItem.setSummary(path.getSummary());
        if( path.getDescription() != null )
        pathItem.setDescription(path.getDescription());
        if( path.getGet() != null ){
        Get get = new Get();
        get.setOperationObject( OperationObject.parseOperation( path.getGet() ) );
        pathItem.setGet(get);
        }
        if( path.getPut() != null ){
        Put put = new Put();
        put.setOperationObject( OperationObject.parseOperation( path.getPut() ) );
        pathItem.setPut(put);
        }
        if( path.getPost() != null ){
        Post post = new Post();
        post.setOperationObject( OperationObject.parseOperation( path.getPost() ) );
        pathItem.setPost(post);
        }
        if( path.getDelete() != null ){
        Delete delete = new Delete();
        delete.setOperationObject( OperationObject.parseOperation( path.getDelete() ) );
        pathItem.setDelete(delete);
        }
        if( path.getOptions() != null ){
        Options options = new Options();
        options.setOperationObject( OperationObject.parseOperation( path.getOptions() ) );
        pathItem.setOptions(options);
        }
        if( path.getHead() != null ){
        Head head = new Head();
        head.setOperationObject( OperationObject.parseOperation( path.getHead() ) );
        pathItem.setHead(head);
        }
        if( path.getPatch() != null ){
        Patch patch = new Patch();
        patch.setOperationObject( OperationObject.parseOperation( path.getPatch() ) );
        pathItem.setPatch(patch);
        }
        if( path.getTrace() != null ){
        Trace trace = new Trace();
        trace.setOperationObject( OperationObject.parseOperation( path.getTrace() ) );
        pathItem.setTrace(trace);
        }
        if( path.getServers() != null ){
        for(Server s : path.getServers())
        pathItem.addServerObject( ServerObject.parseServer(s));
        }
        if( path.getParameters() != null ){
        for(Parameter p : path.getParameters()){
        if( p.isRef() ) {
        ParameterObject parameterObject = new ParameterObject();
        parameterObject.setRef(p.getRef());
        pathItem.addParameterObject(parameterObject);
        }
        else
        pathItem.addParameterObject(ParameterObject.parseParameter(p));
        }
        }

        return pathItem;
        }

public static OperationObject OperationObject.parseOperation(Operation operation){
        OperationObject operationObject = new OperationObject();

        if( operation.getDeprecated() != null )
        operationObject.setDeprecatedBoolean(operation.getDeprecated());
        if( operation.getTags() != null ){
        for(String t : operation.getTags()) {
        de.tudresden.inf.st.openapi.ast.Tag tag = new de.tudresden.inf.st.openapi.ast.Tag();
        tag.setTag(t);
        operationObject.addTag(tag);
        }
        }
        if( operation.getSummary() != null )
        operationObject.setSummary(operation.getSummary());
        if( operation.getDescription() != null )
        operationObject.setDescription( operation.getDescription() );
        if( operation.getExternalDocs() != null )
        operationObject.setExternalDocObject(ExternalDocObject.parseExternalDocs(operation.getExternalDocs()));
        if( operation.getOperationId() != null )
        operationObject.setOperationID( operation.getOperationId() );
        if( operation.getParameters() != null ){
        for( Parameter p : operation.getParameters() )
        operationObject.addParameterObject(ParameterObject.parseParameter(p));
        }
        if( operation.getRequestBody() != null )
        operationObject.setRequestBodyObject( RequestBodyObject.parseRequestBody( operation.getRequestBody() ) );
        if( operation.getResponses() != null ){
        for( String key : operation.getResponses().keySet())
        operationObject.addResponseTuple(new ResponseTuple(key, ResponseObject.parseResponse(operation.getResponse(key))));
        }
        if( operation.getCallbacks() != null ){
        for( String key : operation.getCallbacks().keySet() )
        operationObject.addCallbackTuple(new CallbackTuple(key, CallbackObject.parseCallback(operation.getCallback(key))));
        }
        if( operation.getSecurityRequirements() != null ){
        for( SecurityRequirement s : operation.getSecurityRequirements() )
        operationObject.addSecurityRequirementObject(SecurityRequirementObject.parseSecurityRequirement(s));
        }
        if( operation.getServers() != null ){
        for( Server s : operation.getServers() )
        operationObject.addServerObject(ServerObject.parseServer(s));
        }

        return operationObject;
        }

public static ExternalDocObject ExternalDocObject.parseExternalDocs(ExternalDocs externalDocs){
        ExternalDocObject externalDocObject = new ExternalDocObject();


        if( externalDocs.getDescription() != null )
        externalDocObject.setDescription(externalDocs.getDescription());
        if( externalDocs.getUrl() != null )
        externalDocObject.setUrl(externalDocObject.getUrl());
        if( externalDocs.getExtensions() != null ) {
        for( String key : externalDocs.getExtensions().keySet() )
        externalDocObject.addExtension(new Extension(key, externalDocs.getExtensions().get(key)));
        }

        return externalDocObject;
        }

public static ParameterObject ParameterObject.parseParameter(Parameter parameter){
        ParameterObject parameterObject = new ParameterObject();

        if( parameter.isRef() )
        parameterObject.setRef(parameter.getRef());
        if( parameter.getName() != null )
        parameterObject.setName(parameter.getName());
        if( parameter.getIn() != null )
        parameterObject.setIn(parameter.getIn());
        if( parameter.getDescription() != null )
        parameterObject.setDescription(parameter.getDescription());
        if( parameter.getDeprecated() != null )
        parameterObject.setDeprecatedBoolean(parameter.getDeprecated());
        if( parameter.getStyle() != null )
        parameterObject.setStyle( parameter.getStyle() );
        if( parameter.getExplode() != null )
        parameterObject.setExplode( parameter.getExplode() );
        if( parameter.getAllowReserved() != null )
        parameterObject.setAllowReserved( parameter.getAllowReserved() );
        if( parameter.getSchema() != null )
        parameterObject.setSchemaObject(SchemaObject.parseSchema(parameter.getSchema()));
        if( parameter.getExample() != null )
        parameterObject.setExample( parameter.getExample() );
        if( parameter.getExamples() != null ){
        for( String key : parameter.getExamples().keySet() )
        parameterObject.addExampleTuple(new ExampleTuple(key, ExampleObject.parseExample(parameter.getExample(key))));
        }
        if( parameter.getContentMediaTypes() != null ){
        for( String key : parameter.getContentMediaTypes().keySet() )
        parameterObject.addContentTuple(new ContentTuple(key, MediaTypeObject.parseMediaType(parameter.getContentMediaType(key))));
        }
        if( parameter.getRequired() != null )
            parameterObject.setRequired(parameter.getRequired());

        return parameterObject;
        }

public static RequestBodyObject RequestBodyObject.parseRequestBody(org.openapi4j.parser.model.v3.RequestBody requestBody){
        RequestBodyObject requestBodyObject = new RequestBodyObject();

        if( requestBody.getContentMediaTypes() != null ) {
        for (String key : requestBody.getContentMediaTypes().keySet())
        requestBodyObject.addContentTuple(new ContentTuple(key, MediaTypeObject.parseMediaType(requestBody.getContentMediaType(key))));
        }
        if( requestBody.getDescription() != null )
        requestBodyObject.setDescription(requestBody.getDescription());
        if( requestBody.getRequired() != null )
        requestBodyObject.setRequired( requestBody.getRequired() );
        if( requestBody.isRef() )
        requestBodyObject.setRef(requestBody.getRef());

        return requestBodyObject;
        }

public static MediaTypeObject MediaTypeObject.parseMediaType(MediaType mediaType){
        MediaTypeObject mediaTypeObject = new MediaTypeObject();

        if( mediaType.getSchema() != null )
        mediaTypeObject.setSchemaObject(SchemaObject.parseSchema(mediaType.getSchema()));
        if( mediaType.getExample() != null )
        mediaTypeObject.setExample(mediaType.getExample());
        if( mediaType.getExamples() != null ){
        for( String key : mediaType.getExamples().keySet() )
        mediaTypeObject.addExampleTuple(new ExampleTuple(key, ExampleObject.parseExample(mediaType.getExample(key))));
        }
        if( mediaType.getEncodings() != null ){
        for( String key : mediaType.getEncodings().keySet() )
        mediaTypeObject.addEncodingTuple(new EncodingTuple(key, EncodingObject.parseEncoding(mediaType.getEncoding(key))));
        }

        return mediaTypeObject;
        }

public static EncodingObject EncodingObject.parseEncoding(EncodingProperty encodingProperty){
        EncodingObject encodingObject = new EncodingObject();

        if( encodingProperty.getContentType() != null )
        encodingObject.setContentType( encodingProperty.getContentType() );
        if( encodingProperty.getHeaders() != null ){
        for( String key : encodingProperty.getHeaders().keySet() )
        encodingObject.addHeaderTuple(new HeaderTuple(key, HeaderObject.parseHeader(encodingProperty.getHeader(key))));
        }
        if( encodingProperty.getStyle() != null )
        encodingObject.setStyle( encodingProperty.getStyle() );
        if( encodingProperty.getExplode() != null )
        encodingObject.setExplode( encodingProperty.getExplode() );
        if( encodingProperty.getExtensions() != null ){
        for( String key : encodingProperty.getExtensions().keySet() )
        encodingObject.addExtension(new Extension(key, encodingProperty.getExtensions().get(key)));
        }

        return encodingObject;
        }

public static ResponseObject ResponseObject.parseResponse(Response response){
        ResponseObject responseObject = new ResponseObject();

        if( response.isRef() )
        responseObject.setRef(response.getRef());
        if( response.getDescription() != null )
        responseObject.setDescription(response.getDescription());
        if( response.getHeaders() != null ){
        for( String key : response.getHeaders().keySet() )
        responseObject.addHeaderTuple( new HeaderTuple(key, HeaderObject.parseHeader(response.getHeader(key))) );
        }
        if( response.getContentMediaTypes() != null ){
        for( String key : response.getContentMediaTypes().keySet() )
        responseObject.addContentTuple( new ContentTuple(key, MediaTypeObject.parseMediaType(response.getContentMediaType(key))) );
        }
        if( response.getLinks() != null ){
        for( String key : response.getLinks().keySet() )
        responseObject.addLinkTuple( new LinkTuple(key, LinkObject.parseLink(response.getLink(key))) );
        }

        return responseObject;
        }

public static CallbackObject CallbackObject.parseCallback(Callback callback){
        CallbackObject callbackObject = new CallbackObject();

        if( callback.getCallbackPaths() != null ){
        for( String key : callback.getCallbackPaths().keySet() )
        callbackObject.addExpression(new Expression(key, PathItem.parsePath(callback.getCallbackPath(key))));
        }

        return callbackObject;
        }

public static ExampleObject ExampleObject.parseExample(Example example){
        ExampleObject exampleObject = new ExampleObject();

        if( example.getSummary() != null )
        exampleObject.setSummary( example.getSummary() );
        if( example.getDescription() != null )
        exampleObject.setDescription( example.getDescription() );
        if( example.getValue() != null )
        exampleObject.setValue( example.getValue() );
        if( example.getExternalValue() != null )
        exampleObject.setExternalValue( example.getExternalValue() );

        return exampleObject;
        }

public static LinkObject LinkObject.parseLink(Link link){
        LinkObject linkObject = new LinkObject();

        if( link.isRef() )
        linkObject.setRef(link.getRef());
        if( link.getOperationRef() != null )
        linkObject.setOperationRef( link.getOperationRef() );
        if( link.getOperationId() != null )
        linkObject.setOperationID( link.getOperationId() );
        if( link.getParameters() != null ){
        for( String key : link.getParameters().keySet() )
        linkObject.addLinkParameterTuple(new LinkParameterTuple(key, link.getParameter(key)));
        }
        if( link.getDescription() != null )
        linkObject.setDescription( link.getDescription() );
        if( link.getServer() != null )
        linkObject.setServerObject( ServerObject.parseServer(link.getServer()) );

        return linkObject;
        }

public static HeaderObject HeaderObject.parseHeader(Header header){
        HeaderObject headerObject = new HeaderObject();

        if( header.getRequired() != null )
        headerObject.setRequired( header.getRequired() );
        if( header.getDescription() != null )
        headerObject.setDescription( header.getDescription() );
        if( header.getDeprecated() != null )
        headerObject.setDeprecatedBoolean( header.getDeprecated() );
        if( header.getStyle() != null )
        headerObject.setStyle( header.getStyle() );
        if( header.getExplode() != null )
        headerObject.setExplode( header.getExplode() );
        if( header.getAllowReserved() != null )
        headerObject.setExplode( header.getAllowReserved() );
        if( header.getExample() != null )
        headerObject.setExample( header.getExample() );
        if( header.getExamples() != null ){
        for( String key : header.getExamples().keySet() )
        headerObject.addExampleTuple(new ExampleTuple(key, ExampleObject.parseExample(header.getExample(key))));
        }
        if( header.getContentMediaTypes() != null ){
        for( String key : header.getContentMediaTypes().keySet() )
        headerObject.addContentTuple(new ContentTuple(key, MediaTypeObject.parseMediaType(header.getContentMediaType(key))));
        }
        if( header.getSchema() != null )
            headerObject.setSchemaObject(SchemaObject.parseSchema(header.getSchema()));

        return headerObject;
        }

public static TagObject TagObject.parseTag(org.openapi4j.parser.model.v3.Tag tag){
        TagObject tagObject = new TagObject();

        tagObject.setName( tag.getName() );

        if( tag.getDescription() != null )
        tagObject.setDescription( tag.getDescription() );
        if( tag.getExternalDocs() != null )
        tagObject.setExternalDocObject( ExternalDocObject.parseExternalDocs(tag.getExternalDocs()) );

        return tagObject;
        }

public static SchemaObject SchemaObject.parseSchema (org.openapi4j.parser.model.v3.Schema schema) {
        SchemaObject schemaObject = new SchemaObject();

        if( schema.isRef() )
        schemaObject.setRef(schema.getRef());
        if( schema.getAdditionalProperties() != null )
        schemaObject.setAdditionalProperties(parseSchema(schema.getAdditionalProperties()));
        if( schema.getAdditionalPropertiesAllowed() != null )
        schemaObject.setAdditionalPropertiesAllowed(schema.getAdditionalPropertiesAllowed());
        if( schema.getDefault() != null )
        schemaObject.setDefaultValue(schema.getDefault());
        if( schema.getDescription() != null )
        schemaObject.setDescription(schema.getDescription());
        if( schema.getDeprecated() != null )
        schemaObject.setDeprecatedBoolean(schema.getDeprecated());
        if( schema.getDiscriminator() != null )
        schemaObject.setDiscriminatorObject(DiscriminatorObject.parseDiscriminator(schema.getDiscriminator()));
        if( schema.getEnums() != null ){
        for( Object o : schema.getEnums() ){
        EnumObj enumObj = new EnumObj();
        enumObj.setEnumOb(o);
        schemaObject.addEnumObj(enumObj);
        }
        }
        if( schema.getExample() != null )
        schemaObject.setExample(schema.getExample());
        if( schema.getExclusiveMaximum() != null )
        schemaObject.setExclusiveMaximum(schema.getExclusiveMaximum());
        if( schema.getExclusiveMinimum() != null )
        schemaObject.setExclusiveMinimum(schema.getExclusiveMinimum());
        if( schema.getExternalDocs() != null )
        schemaObject.setExternalDocObject(ExternalDocObject.parseExternalDocs(schema.getExternalDocs()));
        if( schema.getFormat() != null )
        schemaObject.setFormat(schema.getFormat());
        if( schema.getItemsSchema() != null ){
        ItemsSchema itemsSchema = new ItemsSchema();
        itemsSchema.setSchemaObject(parseSchema(schema.getItemsSchema()));
        schemaObject.setItemsSchema(itemsSchema);
        }
        if( schema.getMaximum() != null )
        schemaObject.setMaximum(schema.getMaximum());
        if( schema.getMinimum() != null )
        schemaObject.setMinimum(schema.getMinimum());
        if( schema.getMaxItems() != null )
        schemaObject.setMaxItems(schema.getMaxItems());
        if( schema.getMinItems() != null )
        schemaObject.setMinItems(schema.getMinItems());
        if( schema.getMaxLength() != null )
        schemaObject.setMaxLength(schema.getMaxLength());
        if( schema.getMinLength() != null )
        schemaObject.setMinLength(schema.getMinLength());
        if( schema.getMaxProperties() != null )
        schemaObject.setMaxProperties(schema.getMaxProperties());
        if( schema.getMinProperties() != null )
        schemaObject.setMinProperties(schema.getMinProperties());
        if( schema.getMultipleOf() != null )
        schemaObject.setMultipleOf(schema.getMultipleOf());
        if( schema.getNotSchema() != null ){
        NotSchema notSchema = new NotSchema();
        notSchema.setSchemaObject(parseSchema(schema.getNotSchema()));
        schemaObject.setNotSchema(notSchema);
        }
        if( schema.getNullable() != null )
        schemaObject.setNullable(schema.getNullable());
        if( schema.getPattern() != null )
        schemaObject.setPattern(schema.getPattern());
        if( schema.getProperties() != null  ){
        for( String key : schema.getProperties().keySet() ){
        PropertyItem propertyItem = new PropertyItem();
        schemaObject.addPropertyItem(new PropertyItem(key, parseSchema(schema.getProperty(key))));
        }
        }
        if( schema.getRequiredFields() != null ){
        for( String s : schema.getRequiredFields() ){
        RequiredField requiredField = new RequiredField();
        requiredField.setValue(s);
        schemaObject.addRequiredField(requiredField);
        }
        }
        if( schema.getAllOfSchemas() != null ){
        for(org.openapi4j.parser.model.v3.Schema schemaItem : schema.getAllOfSchemas()){
        AllOfSchema allOfSchema = new AllOfSchema();
        allOfSchema.setSchemaObject(parseSchema(schemaItem));
        schemaObject.addAllOfSchema(allOfSchema);
        }
        }
        if( schema.getAnyOfSchemas() != null ){
        for(org.openapi4j.parser.model.v3.Schema schemaItem : schema.getAnyOfSchemas()){
        AnyOfSchema anyOfSchema = new AnyOfSchema();
        anyOfSchema.setSchemaObject(parseSchema(schemaItem));
        schemaObject.addAnyOfSchema(anyOfSchema);
        }
        }
        if( schema.getOneOfSchemas() != null ){
        for(org.openapi4j.parser.model.v3.Schema schemaItem : schema.getOneOfSchemas()){
        OneOfSchema oneOfSchema = new OneOfSchema();
        oneOfSchema.setSchemaObject(parseSchema(schemaItem));
        schemaObject.addOneOfSchema(oneOfSchema);
        }
        }
        if( schema.getReadOnly() != null )
        schemaObject.setReadOnly(schema.getReadOnly());
        if( schema.getWriteOnly() != null )
        schemaObject.setWriteOnly(schema.getWriteOnly());
        if( schema.getType() != null )
        schemaObject.setType(schema.getType());
        if( schema.getTitle() != null )
        schemaObject.setTitle(schema.getTitle());
        if( schema.getUniqueItems() != null )
        schemaObject.setUniqueItems(schema.getUniqueItems());
        if( schema.getXml() != null )
        schemaObject.setXmlObject(XmlObject.parseXml(schema.getXml()));

        return schemaObject;
        }

public static DiscriminatorObject DiscriminatorObject.parseDiscriminator (Discriminator discriminator) {
        DiscriminatorObject discriminatorObject = new DiscriminatorObject();

        if( discriminator.getPropertyName() != null )
        discriminatorObject.setPropertyName(discriminator.getPropertyName());
        if( discriminator.getMapping() != null ){
        MappingTuple mapping = new MappingTuple();
        for( String key : discriminator.getMapping().keySet() ){
        mapping.setKey(key);
        mapping.setValue(discriminator.getMapping().get(key));
        discriminatorObject.addMappingTuple(mapping);
        }
        }

        return discriminatorObject;
        }

public static XmlObject XmlObject.parseXml (Xml xml) {
        XmlObject xmlObject = new XmlObject();

        if( xml.getName() != null )
        xmlObject.setName(xml.getName());
        if( xml.getNamespace() != null )
        xmlObject.setNamespace(xml.getNamespace());
        if( xml.getPrefix() != null )
        xmlObject.setPrefix(xml.getPrefix());
        if( xml.getAttribute() != null )
        xmlObject.setAttribute(xml.getAttribute());
        if( xml.getWrapped() != null )
        xmlObject.setWrapped(xml.getWrapped());

        return xmlObject;
        }

public static SecuritySchemeObject SecuritySchemeObject.parseSecurityScheme(SecurityScheme securityScheme){
        SecuritySchemeObject securitySchemeObject = new SecuritySchemeObject();

        securitySchemeObject.setType( securityScheme.getType() );
        securitySchemeObject.setName( securityScheme.getName() );
        securitySchemeObject.setIn( securityScheme.getIn() );
        securitySchemeObject.setScheme( securityScheme.getScheme() );
        securitySchemeObject.setOpenIdConnectUrl( securityScheme.getOpenIdConnectUrl() );
        securitySchemeObject.setOAuthFlowsObject( OAuthFlowsObject.parseOAuthFlows(securityScheme.getFlows()) );

        if( securityScheme.getDescription() != null )
        securitySchemeObject.setDescription( securityScheme.getDescription() );
        if( securityScheme.getBearerFormat() != null )
        securitySchemeObject.setBearerFormat( securityScheme.getBearerFormat() );

        return securitySchemeObject;
        }

public static OAuthFlowsObject OAuthFlowsObject.parseOAuthFlows(OAuthFlows oAuthFlows){
        OAuthFlowsObject oAuthFlowsObject = new OAuthFlowsObject();
        Implicit implicit = new Implicit();
        Password password = new Password();
        ClientCredentials clientCredentials = new ClientCredentials();
        AuthorizationCode authorizationCode = new AuthorizationCode();

        if( oAuthFlows.getImplicit() != null )
        implicit.setOAuthFlowObject( OAuthFlowObject.parseOAuthFlow(oAuthFlows.getImplicit()) );
        if( oAuthFlows.getPassword() != null )
        password.setOAuthFlowObject( OAuthFlowObject.parseOAuthFlow(oAuthFlows.getPassword()) );
        if( oAuthFlows.getClientCredentials() != null )
        clientCredentials.setOAuthFlowObject( OAuthFlowObject.parseOAuthFlow(oAuthFlows.getClientCredentials()) );
        if( oAuthFlows.getAuthorizationCode() != null )
        authorizationCode.setOAuthFlowObject( OAuthFlowObject.parseOAuthFlow(oAuthFlows.getAuthorizationCode()) );

        oAuthFlowsObject.setImplicit(implicit);
        oAuthFlowsObject.setPassword(password);
        oAuthFlowsObject.setClientCredentials(clientCredentials);
        oAuthFlowsObject.setAuthorizationCode(authorizationCode);

        return oAuthFlowsObject;
        }

public static OAuthFlowObject OAuthFlowObject.parseOAuthFlow(OAuthFlow oAuthFlow){
        OAuthFlowObject oAuthFlowObject = new OAuthFlowObject();

        oAuthFlowObject.setAuthorizationUrl( oAuthFlow.getAuthorizationUrl() );
        oAuthFlowObject.setTokenUrl( oAuthFlow.getTokenUrl() );
        for( String key : oAuthFlow.getScopes().keySet() )
        oAuthFlowObject.addScopesTuple( new ScopesTuple(key, oAuthFlow.getScope(key)) );

        if( oAuthFlow.getRefreshUrl() != null )
        oAuthFlowObject.setRefreshUrl( oAuthFlow.getRefreshUrl() );

        return oAuthFlowObject;
        }

public static SecurityRequirementObject SecurityRequirementObject.parseSecurityRequirement(SecurityRequirement securityRequirement){
        SecurityRequirementObject securityRequirementObject = new SecurityRequirementObject();

        if( securityRequirement.getRequirements() != null ){
        for( String key : securityRequirement.getRequirements().keySet() ){
        JastAddList<SecurityRequirementTuple> tuples = new JastAddList<>();
        for( String v : securityRequirement.getRequirement(key) ) {
        JastAddList<SecurityRequirementValue> values = new JastAddList<>();
        }

        }
        }

        return securityRequirementObject;
        }
}