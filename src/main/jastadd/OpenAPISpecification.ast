//OpenAPI Object
OpenAPIObject ::= <OpenAPI> InfoObject ServerObject* PathsObject* [ComponentsObject] SecurityRequirementObject* TagObject* [ExternalDocumentationObject];
PathsObject ::= <Ref> PathItemObject;
ServerObject ::= <Url> <Description> ServerVariablesTuple*;
ComponentsObject ::= SchemasTuple* ResponsesTuple* ParameterTuple* ExamplesTuple* RequestBodiesTuple* HeadersTuple* SecuritySchemesTuple* LinksTuple* CallbacksTuple*;
SecurityRequirementObject ::= SecurityRequirementTuple*;
ExternalDocumentationObject ::= <Description> <Url>;

//Info Object
InfoObject ::= <Title> <Description> <TermsOfService> [ContactObject] [LicenseObject] <Version>;
ContactObject ::= <Name> <Url> <Email>;
LicenseObject ::= <Name> <Url>;

//Contact Object
//ContactObject ::= <Name> <Url> <Email>;

//License Object
//LicenseObject ::= <Name> <Url>;

//Server Object
//ServerObject ::= <Url> <Description> ServerVariablesTuple*;
ServerVariablesTuple ::= <Name> ServerVariableObject;

//Server Variable Object
ServerVariableObject ::= Enum* <Default> <Description>;
Enum ::= <EnumValue>;

//Components Object
//ComponentsObject ::= SchemasTuple* ResponsesTuple* ParameterTuple* ExamplesTuple* RequestBodiesTuple* HeadersTuple* SecuritySchemesTuple* LinksTuple* CallbacksTuple*;
abstract SchemasTuple;
SchemaObjectTuple:SchemasTuple ::= <Name> SchemaObject;
SchemaReferenceTuple:SchemasTuple ::= <Name> <Ref>;
abstract ResponsesTuple;
ResponseObjectTuple:ResponsesTuple ::= <Name> ResponseObject;
ResponseReferenceTuple:ResponsesTuple ::= <Name> <Ref>;
abstract ParameterTuple;
ParameterObjectTuple:ParameterTuple ::= <Name> ParameterObject;
ParameterReferenceTuple:ParameterTuple ::= <Name> <Ref>;
abstract ExamplesTuple;
ExampleObjectTuple:ExamplesTuple ::= <Name> ExampleObject;
ExampleReferenceTuple:ExamplesTuple ::= <Name> <Ref>;
abstract RequestBodiesTuple;
RequestBodyObjectTuple:RequestBodiesTuple ::= <Name> RequestBodyObject;
RequestBodyReferenceTuple:RequestBodiesTuple ::= <Name> <Ref>;
abstract HeadersTuple;
HeaderObjectTuple:HeadersTuple ::= <Name> HeaderObject;
HeaderReferenceTuple:HeadersTuple ::= <Name> <Ref>;
abstract SecuritySchemesTuple;
SecuritySchemeObjectTuple:SecuritySchemesTuple ::= <Name> SecuritySchemeObject;
SecuritySchemeReferenceTuple:SecuritySchemesTuple ::= <Name> <Ref>;
abstract LinksTuple;
LinkObjectTuple:LinksTuple ::= <Name> LinkObject;
LinkReferenceTuple:LinksTuple ::= <Name> <Ref>;
abstract CallbacksTuple;
CallbackObjectTuple:CallbacksTuple ::= <Name> CallbackObject;
CallbackReferenceTuple:CallbacksTuple ::= <Name> <Ref>;

//Paths Object
//PathsObject ::= <Ref> PathItemObject;
PathItemObject ::= <Ref> <Summary> <Description> [Get] [Put] [Post] [Delete] [Options] [Head] [Patch] [Trace] ServerObject* Param*;

//Path Item Object
//PathItemObject ::= <Summary> <Description> [Get] [Put] [Post] [Delete] [Options] [Head] [Patch] [Trace] Server* Parameter*;
Get ::= OperationObject;
Put ::= OperationObject;
Post ::= OperationObject;
Delete ::= OperationObject;
Options ::= OperationObject;
Head ::= OperationObject;
Patch ::= OperationObject;
Trace ::= OperationObject;
abstract Param;
ParameterReference:Param ::= <Name> <Ref>;
ParameterObject:Param ::= <Name> <In> <Description> <Required:boolean> <DeprecatedBoolean:Object> <AllowEmptyValue:Object> <Style> <Explode:Object> <AllowReserved:Object> [SchemaObject] <Example:Object> ExamplesTuple* ContentTuple*;

//Operation Object
OperationObject ::= Tag* <Summary> <Description> [ExternalDocumentationObject] <OperationID> Param* [RequestBody] ResponsesObject CallbacksTuple* [DeprecatedBoolean] SecurityRequirementObject* ServerObject*;
Tag ::= <Tag:String>;
abstract RequestBody;
RequestBodyObject:RequestBody ::= <Description> ContentTuple* <Required:Object>;
RequestBodyReference:RequestBody ::= <Ref>;
DeprecatedBoolean ::= <DeprecatedBoolean:Object>;

//External Documentation Object
//ExternalDocumentationObject ::= <Description:Object> <Url>;

//Parameter Object
//ParameterObject ::= Name In <Description:Object> <Required> [Deprecated] <AllowEmptyValue:Object> <Style:Object> <Explode:Object> <AllowReserved:Object> [Schema] <Example:Object> ExamplesTuple* ContentTuple*;
abstract Schema;
SchemaReference:Schema ::= <Name> <Ref>;
SchemaObject:Schema ::= [AdditionalProperties] <AdditionalPropertiesAllowed:Object> <DefaultValue:Object> <Description> <DeprecatedBoolean:Object> [DiscriminatorObject] EnumObj* <Example:Object> <ExclusiveMaximum:Object> <ExclusiveMinimum:Object> [ExternalDocumentationObject] <Format> [ItemsSchema] <Maximum:Object> <Minimum:Object> <MaxItems:Object> <MinItems:Object> <MaxLength:Object> <MinLength:Object> <MaxProperties:Object> <MinProperties:Object> <MultipleOf:Object> [NotSchema] <Nullable:Object> <Pattern> PropertyItem* RequiredField* AllOfSchema* AnyOfSchema* OneOfSchema* <ReadOnly:Object> <WriteOnly:Object> <Type> <Title> <UniqueItems:Object> [XmlObject];
abstract ContentTuple;
ContentObjectTuple:ContentTuple ::= <Name> MediaTypeObject;
ContentReferenceTuple:ContentTuple ::= <Name> <Ref>;

//Request Body Object
//RequestBodyObject ::= <Description:Object> ContentTuple* <Required:Object>;

//Media Type Object
MediaTypeObject ::= [SchemaObject] <Example:Object> ExamplesTuple* EncodingTuple*;
abstract EncodingTuple;
EncodingObjectTuple:EncodingTuple ::= <Name> EncodingObject;
EncodingReferenceTuple:EncodingTuple ::= <Name> <Ref>;

//Encoding Object
EncodingObject ::= <ContentType> HeadersTuple* <Style> <Explode:Object> <AllowReserved:Object>;

//Responses Object
ResponsesObject ::= HTTPStatusCode*;
abstract HTTPStatusCode;
ResponseObject:HTTPStatusCode ::= <Name> <Description> HeadersTuple* ContentTuple* LinksTuple*;
HTTPStatusCodeReference:HTTPStatusCode ::= <Name> <Ref>;

//Response Object
//ResponseObject ::= <Name> <Description> HeadersTuple* ContentTuple* LinksTuple*;

//Callback Object
CallbackObject ::= Expression*;
Expression ::= <Name> PathItemObject;

//Example Object
ExampleObject ::= <Summary> <Description> <Value:Object> <ExternalValue>;

//Link Object
LinkObject ::= <OperationRef> <OperationID> LinkParameterTuple* <LinkRequestBody:Object> <Description> [ServerObject];
LinkParameterTuple ::= <LinkParameterKey> <LinkParameterValue>;

//Header Object
HeaderObject ::= <Description> <Required:boolean> <DeprecatedBoolean:Object> <AllowEmptyValue:Object> <Style> <Explode:Object> <AllowReserved:Object> [Schema] <Example:Object> ExamplesTuple* ContentTuple*;

//Tag Object
TagObject ::= <Name> <Description> [ExternalDocumentationObject];

//Schema Object
//SchemaObject ::= [AdditionalProperties] <AdditionalPropertiesAllowed:Object> <DefaultValue:Object> <Description> <DeprecatedBoolean:Object> [DiscriminatorObject] EnumObj* <Example:Object> <ExclusiveMaximum:Object> <ExclusiveMinimum:Object> [ExternalDocumentationObject] <Format> [ItemsSchema] <Maximum:Object> <Minimum:Object> <MaxItems:Object> <MinItems:Object> <MaxLength:Object> <MinLength:Object> <MaxProperties:Object> <MinProperties:Object> <MultipleOf:Object> [NotSchema] <Nullable:Object> <Pattern> PropertyItem* RequiredField* AllOfSchema* AnyOfSchema* OneOfSchema* <ReadOnly:Object> <WriteOnly:Object> <Type> <Title> <UniqueItems:Object> [XmlObject];
AdditionalProperties ::= SchemaObject;
EnumObj ::= <EnumOb:Object>;
ItemsSchema ::= SchemaObject;
NotSchema ::= SchemaObject;
PropertyItem ::= <Name> SchemaObject;
RequiredField ::= <Value>;
AllOfSchema ::= SchemaObject;
AnyOfSchema ::= SchemaObject;
OneOfSchema ::= SchemaObject;

//Discriminator Object
DiscriminatorObject ::= <PropertyName> MappingTuple*;
MappingTuple ::= <Key> <Value>;

//XML Object
XmlObject ::= <Name> <Namespace> <Prefix> <Attribute:Object> <Wrapped:Object>;

//Security Scheme Object
SecuritySchemeObject ::= <Type> <Description> <Name> <In> <Scheme> <BearerFormat> Flows <OpenIdConnectUrl>;
Flows ::= OAuthFlowsObject;

//OAuth Flows Object
OAuthFlowsObject ::= [Implicit] [Password] [ClientCredentials] [AuthorizationCode];
Implicit ::= OAuthFlowObject;
Password ::= OAuthFlowObject;
ClientCredentials ::= OAuthFlowObject;
AuthorizationCode ::= OAuthFlowObject;

//OAuth Flow Object
OAuthFlowObject ::= <AuthorizationUrl> <TokenUrl> <RefreshUrl> ScopesTuple*;
ScopesTuple ::= <ScopesKey> <ScopesValue>;

//Security Requirement Object
//SecurityRequirementObject ::= SecurityRequirementValue*;
SecurityRequirementTuple ::= <Name> SecurityRequirementValue*;
SecurityRequirementValue ::= <Value>;