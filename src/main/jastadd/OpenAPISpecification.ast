//OpenAPI Object
OpenAPIObject ::= <OpenAPI> [InfoObject] ServerObject* PathsObject* [ComponentsObject] SecurityRequirementObject* TagObject* [ExternalDocObject] <Context:OAIContext> Extension*;

//Info Object
InfoObject ::= <Title> <Description> <TermsOfService> [ContactObject] [LicenseObject] <Version> Extension*;

//Contact Object
ContactObject ::= <Name> <Url> <Email> Extension*;

//License Object
LicenseObject ::= <Name> <Url> Extension*;

//Server Object
ServerObject ::= <Url> <Description> ServerVariablesTuple* Extension*;
ServerVariablesTuple ::= <Name> ServerVariableObject;

//Server Variable Object
ServerVariableObject ::= Enum* <Default> <Description> Extension*;
Enum ::= <EnumValue>;

//Components Object
ComponentsObject ::= SchemaTuple* ResponseTuple* ParameterTuple* ExampleTuple* RequestBodyTuple* HeaderTuple* SecuritySchemeTuple* LinkTuple* CallbackTuple* Extension*;
SchemaTuple ::= <Key> SchemaOb;
ResponseTuple ::= <Key> ResponseOb;
ParameterTuple ::= <Key> ParameterOb;
ExampleTuple ::= <Key> ExampleObject;
RequestBodyTuple ::= <Key> RequestBodyOb;
HeaderTuple ::= <Key> HeaderOb;
SecuritySchemeTuple ::= <Key> SecuritySchemeOb;
LinkTuple ::= <Key> LinkOb;
CallbackTuple ::= <Key> CallbackOb;


//Paths Object
PathsObject ::= <Ref> PathItemOb;

//Path Item Object
abstract PathItemOb;
PathItemReference : PathItemOb ::= <Ref> <PathItemOb:PathItemOb>;
PathItemObject : PathItemOb ::= <Summary> <Description> [Get] [Put] [Post] [Delete] [Options] [Head] [Patch] [Trace] ServerObject* ParameterOb* Extension*;

//Operation Object
abstract OperationOb;
OperationObject : OperationOb ::= Tag* <Summary> <Description> [ExternalDocObject] <OperationID> ParameterOb* [RequestBodyOb] ResponseTuple* CallbackTuple* <DeprecatedBoolean:Boolean> SecurityRequirementObject* ServerObject* <Required:Boolean> Extension*;
Get : OperationOb ::= <OperationObject:OperationObject>;
Put : OperationOb ::= <OperationObject:OperationObject>;
Post : OperationOb ::= <OperationObject:OperationObject>;
Delete : OperationOb ::= <OperationObject:OperationObject>;
Options : OperationOb ::= <OperationObject:OperationObject>;
Head : OperationOb ::= <OperationObject:OperationObject>;
Patch : OperationOb ::= <OperationObject:OperationObject>;
Trace : OperationOb ::= <OperationObject:OperationObject>;
Tag ::= <Tag:String>;

//External Documentation Object
ExternalDocObject ::= <Description> <Url> Extension*;

//Parameter Object
abstract ParameterOb;
ParameterReference : ParameterOb ::= <Ref> <ParameterOb:ParameterOb>;
ParameterObject : ParameterOb ::= <Name> <In> <Description> <Required:Boolean> <DeprecatedBoolean:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> [SchemaOb] <Example:Object> ExampleTuple* ContentTuple* Extension*;
ContentTuple ::= <Key> MediaTypeObject;

//Request Body Object
abstract RequestBodyOb;
RequestBodyReference : RequestBodyOb ::= <Ref> <RequestBodyOb:RequestBodyOb>;
RequestBodyObject : RequestBodyOb ::= <Description> ContentTuple* <Required:Boolean> Extension*;

//Media Type Object
MediaTypeObject ::= [SchemaOb] <Example:Object> ExampleTuple* EncodingTuple* Extension*;
EncodingTuple ::= <Key> EncodingObject;

//Encoding Object
EncodingObject ::= <ContentType> HeaderTuple* <Style> <Explode:Boolean> <AllowReserved:Boolean> Extension*;

//Response Object
abstract ResponseOb;
ResponseReference : ResponseOb ::= <Ref> <ResponseOb:ResponseOb>;
ResponseObject : ResponseOb ::= <Description> HeaderTuple* ContentTuple* LinkTuple* Extension*;

//Callback Object
abstract CallbackOb;
CallbackReference : CallbackOb ::= <Ref> <CallbackOb:CallbackOb>;
CallbackObject : CallbackOb ::= Expression* Extension*;
Expression ::= <Name> PathItemOb;
Extension ::= <Key> <Value:Object>;

//Example Object
ExampleObject ::= <Summary> <Description> <Value:Object> <ExternalValue> Extension*;

//Link Object
abstract LinkOb;
LinkReference : LinkOb ::= <Ref> <LinkOb:LinkOb>;
LinkObject : LinkOb ::= <OperationRef> <OperationID> LinkParameterTuple* HeaderTuple* <Description> [ServerObject] Extension*;
LinkParameterTuple ::= <LinkParameterKey> <LinkParameterValue>;

//Header Object
abstract HeaderOb;
HeaderReference : HeaderOb ::= <Ref> <HeaderOb:HeaderOb>;
HeaderObject : HeaderOb ::= <Description> <Required:Boolean> <DeprecatedBoolean:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> [SchemaOb] <Example:Object> ExampleTuple* ContentTuple* Extension*;

//Tag Object
TagObject ::= <Name> <Description> [ExternalDocObject] Extension*;

//Schema Object
abstract SchemaOb;
SchemaReference : SchemaOb ::= <Ref> <SchemaOb:SchemaOb>;
SchemaObject : SchemaOb ::= [AdditionalProperties] <AdditionalPropertiesAllowed:Boolean> <DefaultValue:Object> <Description> <DeprecatedBoolean:Boolean> [DiscriminatorObject] EnumObj* <Example:Object> <ExclusiveMaximum:Boolean> <ExclusiveMinimum:Boolean> [ExternalDocObject] <Format> [ItemsSchema] <Maximum:Number> <Minimum:Number> <MaxItems:Integer> <MinItems:Integer> <MaxLength:Integer> <MinLength:Integer> <MaxProperties:Integer> <MinProperties:Integer> <MultipleOf:Number> [NotSchema] <Nullable:Boolean> <Pattern> PropertyItem* RequiredField* AllOfSchema* AnyOfSchema* OneOfSchema* <ReadOnly:Boolean> <WriteOnly:Boolean> <Type> <Title> <UniqueItems:Boolean> [XmlObject] Extension*;
AdditionalProperties ::= SchemaOb;
EnumObj ::= <EnumOb:Object>;
ItemsSchema ::= SchemaOb;
NotSchema ::= SchemaOb;
PropertyItem ::= <Name> SchemaOb;
RequiredField ::= <Value>;
AllOfSchema ::= SchemaOb;
AnyOfSchema ::= SchemaOb;
OneOfSchema ::= SchemaOb;

//Discriminator Object
DiscriminatorObject ::= <PropertyName> MappingTuple*;
MappingTuple ::= <Key> <Value>;

//XML Object
XmlObject ::= <Name> <Namespace> <Prefix> <Attribute:Boolean> <Wrapped:Boolean> Extension*;

//Security Scheme Object
abstract SecuritySchemeOb;
SecuritySchemeReference : SecuritySchemeOb ::= <Ref> <SecuritySchemeOb:SecuritySchemeOb>;
SecuritySchemeObject : SecuritySchemeOb ::= <Type> <Description> <Name> <In> <Scheme> <BearerFormat> OAuthFlowsObject <OpenIdConnectUrl> Extension*;

//OAuth Flows Object
OAuthFlowsObject ::= [Implicit] [Password] [ClientCredentials] [AuthorizationCode] Extension*;
Implicit ::= OAuthFlowObject;
Password ::= OAuthFlowObject;
ClientCredentials ::= OAuthFlowObject;
AuthorizationCode ::= OAuthFlowObject;

//OAuth Flow Object
OAuthFlowObject ::= <AuthorizationUrl> <TokenUrl> <RefreshUrl> ScopesTuple* <Configuration> Extension*;
ScopesTuple ::= <ScopesKey> <ScopesValue>;

//Security Requirement Object
SecurityRequirementObject ::= SecurityRequirementTuple*;
SecurityRequirementTuple ::= <Name> SecurityRequirementValue*;
SecurityRequirementValue ::= <Value>;